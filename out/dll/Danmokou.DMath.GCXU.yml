### YamlMime:ManagedReference
items:
- uid: Danmokou.DMath.GCXU
  commentId: T:Danmokou.DMath.GCXU
  id: GCXU
  parent: Danmokou.DMath
  children:
  - Danmokou.DMath.GCXU.#ctor(List{System.ValueTuple{System.Type,System.String}})
  - Danmokou.DMath.GCXU.BoundAliases
  - Danmokou.DMath.GCXU.CompileCustomDataType
  - Danmokou.DMath.GCXU.CompileDelegate
  - Danmokou.DMath.GCXU.CustomDataType
  - Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  - Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  - Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  langs:
  - csharp
  - vb
  name: GCXU
  nameWithType: GCXU
  fullName: Danmokou.DMath.GCXU
  type: Class
  source:
    id: GCXU
    path: ''
    startLine: 7142
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nA wrapper type used to upload values from a GCX to private data hoisting before providing a delegate to a new object.\n<br />It is recommended to call <xref href=\"Danmokou.DMath.GCXU.CompileDelegate\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> immediately after construction, as this avoids compiling expressions or types during gameplay, and is also required for AOT support.\n"
  example: []
  syntax:
    content: 'public abstract class GCXU : IEquatable<GCXU>'
    content.vb: >-
      Public MustInherit Class GCXU
          Implements IEquatable(Of GCXU)
  inheritance:
  - System.Object
  derivedClasses:
  - Danmokou.DMath.GCXU`1
  implements:
  - System.IEquatable{Danmokou.DMath.GCXU}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Danmokou.DMath.GCXU.#ctor(List{System.ValueTuple{System.Type,System.String}})
  commentId: M:Danmokou.DMath.GCXU.#ctor(List{System.ValueTuple{System.Type,System.String}})
  id: '#ctor(List{System.ValueTuple{System.Type,System.String}})'
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: GCXU(List<(Type, String)>)
  nameWithType: GCXU.GCXU(List<(Type, String)>)
  fullName: Danmokou.DMath.GCXU.GCXU(List<System.ValueTuple<System.Type, System.String>>)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 7142
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nA wrapper type used to upload values from a GCX to private data hoisting before providing a delegate to a new object.\n<br />It is recommended to call <xref href=\"Danmokou.DMath.GCXU.CompileDelegate\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> immediately after construction, as this avoids compiling expressions or types during gameplay, and is also required for AOT support.\n"
  example: []
  syntax:
    content: protected GCXU(List<(Type, string)> BoundAliases)
    parameters:
    - id: BoundAliases
      type: List{System.ValueTuple{System.Type,System.String}}
    content.vb: Protected Sub New(BoundAliases As List(Of(Type, String)(Of Type , String)))
  overload: Danmokou.DMath.GCXU.#ctor*
  nameWithType.vb: GCXU.GCXU(List(Of (Type, String)(Of Type, String)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Danmokou.DMath.GCXU.GCXU(List(Of System.ValueTuple(Of System.Type, System.String)))
  name.vb: GCXU(List(Of (Type, String)(Of Type, String)))
- uid: Danmokou.DMath.GCXU.BoundAliases
  commentId: P:Danmokou.DMath.GCXU.BoundAliases
  id: BoundAliases
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: BoundAliases
  nameWithType: GCXU.BoundAliases
  fullName: Danmokou.DMath.GCXU.BoundAliases
  type: Property
  source:
    id: BoundAliases
    path: ''
    startLine: 7142
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public List<(Type, string)> BoundAliases { get; set; }
    parameters: []
    return:
      type: List{System.ValueTuple{System.Type,System.String}}
    content.vb: Public Property BoundAliases As List(Of(Type, String)(Of Type , String))
  overload: Danmokou.DMath.GCXU.BoundAliases*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.GCXU.CustomDataType
  commentId: P:Danmokou.DMath.GCXU.CustomDataType
  id: CustomDataType
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: CustomDataType
  nameWithType: GCXU.CustomDataType
  fullName: Danmokou.DMath.GCXU.CustomDataType
  type: Property
  source:
    id: CustomDataType
    path: ''
    startLine: 7143
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public ConstructedType? CustomDataType { get; }
    parameters: []
    return:
      type: System.Nullable{ConstructedType}
    content.vb: Public ReadOnly Property CustomDataType As ConstructedType?
  overload: Danmokou.DMath.GCXU.CustomDataType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.GCXU.CompileDelegate
  commentId: M:Danmokou.DMath.GCXU.CompileDelegate
  id: CompileDelegate
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: CompileDelegate()
  nameWithType: GCXU.CompileDelegate()
  fullName: Danmokou.DMath.GCXU.CompileDelegate()
  type: Method
  source:
    id: CompileDelegate
    path: ''
    startLine: 7145
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public abstract void CompileDelegate()
    content.vb: Public MustOverride Sub CompileDelegate
  overload: Danmokou.DMath.GCXU.CompileDelegate*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Danmokou.DMath.GCXU.CompileCustomDataType
  commentId: M:Danmokou.DMath.GCXU.CompileCustomDataType
  id: CompileCustomDataType
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: CompileCustomDataType()
  nameWithType: GCXU.CompileCustomDataType()
  fullName: Danmokou.DMath.GCXU.CompileCustomDataType()
  type: Method
  source:
    id: CompileCustomDataType
    path: ''
    startLine: 7150
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCompile the custom data type for this GCXU if it is not already set.\n"
  example: []
  syntax:
    content: public ConstructedType CompileCustomDataType()
    return:
      type: ConstructedType
    content.vb: Public Function CompileCustomDataType As ConstructedType
  overload: Danmokou.DMath.GCXU.CompileCustomDataType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  commentId: M:Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  id: SetNewCustomDataType(ConstructedType)
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: SetNewCustomDataType(ConstructedType)
  nameWithType: GCXU.SetNewCustomDataType(ConstructedType)
  fullName: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  type: Method
  source:
    id: SetNewCustomDataType
    path: ''
    startLine: 7160
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nSet the custom data type, throwing an exception if it is already set.\n"
  example: []
  syntax:
    content: protected void SetNewCustomDataType(ConstructedType type)
    parameters:
    - id: type
      type: ConstructedType
      description: ''
    content.vb: Protected Sub SetNewCustomDataType(type As ConstructedType)
  overload: Danmokou.DMath.GCXU.SetNewCustomDataType*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  commentId: M:Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  id: ShareType(Danmokou.DMath.GCXU[])
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: ShareType(GCXU[])
  nameWithType: GCXU.ShareType(GCXU[])
  fullName: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  type: Method
  source:
    id: ShareType
    path: ''
    startLine: 7170
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate a single shared type for multiple GCXUs.\n"
  example: []
  syntax:
    content: public static ConstructedType ShareType(params GCXU[] gcxus)
    parameters:
    - id: gcxus
      type: Danmokou.DMath.GCXU[]
    return:
      type: ConstructedType
    content.vb: Public Shared Function ShareType(ParamArray gcxus As GCXU()) As ConstructedType
  overload: Danmokou.DMath.GCXU.ShareType*
  nameWithType.vb: GCXU.ShareType(GCXU())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU())
  name.vb: ShareType(GCXU())
- uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  commentId: M:Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  id: ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  parent: Danmokou.DMath.GCXU
  langs:
  - csharp
  - vb
  name: ShareTypeAndCompile(GCXU[])
  nameWithType: GCXU.ShareTypeAndCompile(GCXU[])
  fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  type: Method
  source:
    id: ShareTypeAndCompile
    path: ''
    startLine: 7195
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate a single shared type for multiple GCXUs, and compile them all with that type.\n"
  example: []
  syntax:
    content: public static ConstructedType ShareTypeAndCompile(params GCXU[] gcxus)
    parameters:
    - id: gcxus
      type: Danmokou.DMath.GCXU[]
    return:
      type: ConstructedType
    content.vb: Public Shared Function ShareTypeAndCompile(ParamArray gcxus As GCXU()) As ConstructedType
  overload: Danmokou.DMath.GCXU.ShareTypeAndCompile*
  nameWithType.vb: GCXU.ShareTypeAndCompile(GCXU())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU())
  name.vb: ShareTypeAndCompile(GCXU())
references:
- uid: Danmokou.DMath.GCXU.CompileDelegate
  commentId: M:Danmokou.DMath.GCXU.CompileDelegate
  parent: Danmokou.DMath.GCXU
  name: CompileDelegate()
  nameWithType: GCXU.CompileDelegate()
  fullName: Danmokou.DMath.GCXU.CompileDelegate()
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.CompileDelegate
    name: CompileDelegate
    nameWithType: GCXU.CompileDelegate
    fullName: Danmokou.DMath.GCXU.CompileDelegate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.CompileDelegate
    name: CompileDelegate
    nameWithType: GCXU.CompileDelegate
    fullName: Danmokou.DMath.GCXU.CompileDelegate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  commentId: M:Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  parent: Danmokou.DMath.GCXU
  name: ShareTypeAndCompile(GCXU[])
  nameWithType: GCXU.ShareTypeAndCompile(GCXU[])
  fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  nameWithType.vb: GCXU.ShareTypeAndCompile(GCXU())
  fullName.vb: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU())
  name.vb: ShareTypeAndCompile(GCXU())
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
    name: ShareTypeAndCompile
    nameWithType: GCXU.ShareTypeAndCompile
    fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
    name: ShareTypeAndCompile
    nameWithType: GCXU.ShareTypeAndCompile
    fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath
  commentId: N:Danmokou.DMath
  name: Danmokou.DMath
  nameWithType: Danmokou.DMath
  fullName: Danmokou.DMath
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Danmokou.DMath.GCXU}
  commentId: T:System.IEquatable{Danmokou.DMath.GCXU}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<GCXU>
  nameWithType: IEquatable<GCXU>
  fullName: System.IEquatable<Danmokou.DMath.GCXU>
  nameWithType.vb: IEquatable(Of GCXU)
  fullName.vb: System.IEquatable(Of Danmokou.DMath.GCXU)
  name.vb: IEquatable(Of GCXU)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU
  commentId: T:Danmokou.DMath.GCXU
  parent: Danmokou.DMath
  name: GCXU
  nameWithType: GCXU
  fullName: Danmokou.DMath.GCXU
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.#ctor*
  commentId: Overload:Danmokou.DMath.GCXU.#ctor
  name: GCXU
  nameWithType: GCXU.GCXU
  fullName: Danmokou.DMath.GCXU.GCXU
- uid: List{System.ValueTuple{System.Type,System.String}}
  commentId: '!:List{System.ValueTuple{System.Type,System.String}}'
  definition: List`1
  name: List<(T1, T2)<Type, String>>
  nameWithType: List<(T1, T2)<Type, String>>
  fullName: List<System.ValueTuple<System.Type, System.String>>
  nameWithType.vb: List(Of (T1, T2)(Of Type, String))
  fullName.vb: List(Of System.ValueTuple(Of System.Type, System.String))
  name.vb: List(Of (T1, T2)(Of Type, String))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.BoundAliases*
  commentId: Overload:Danmokou.DMath.GCXU.BoundAliases
  name: BoundAliases
  nameWithType: GCXU.BoundAliases
  fullName: Danmokou.DMath.GCXU.BoundAliases
- uid: Danmokou.DMath.GCXU.CustomDataType*
  commentId: Overload:Danmokou.DMath.GCXU.CustomDataType
  name: CustomDataType
  nameWithType: GCXU.CustomDataType
  fullName: Danmokou.DMath.GCXU.CustomDataType
- uid: System.Nullable{ConstructedType}
  commentId: T:System.Nullable{ConstructedType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ConstructedType>
  nameWithType: Nullable<ConstructedType>
  fullName: System.Nullable<ConstructedType>
  nameWithType.vb: Nullable(Of ConstructedType)
  fullName.vb: System.Nullable(Of ConstructedType)
  name.vb: Nullable(Of ConstructedType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.CompileDelegate*
  commentId: Overload:Danmokou.DMath.GCXU.CompileDelegate
  name: CompileDelegate
  nameWithType: GCXU.CompileDelegate
  fullName: Danmokou.DMath.GCXU.CompileDelegate
- uid: Danmokou.DMath.GCXU.CompileCustomDataType*
  commentId: Overload:Danmokou.DMath.GCXU.CompileCustomDataType
  name: CompileCustomDataType
  nameWithType: GCXU.CompileCustomDataType
  fullName: Danmokou.DMath.GCXU.CompileCustomDataType
- uid: ConstructedType
  isExternal: true
  name: ConstructedType
  nameWithType: ConstructedType
  fullName: ConstructedType
- uid: Danmokou.DMath.GCXU.SetNewCustomDataType*
  commentId: Overload:Danmokou.DMath.GCXU.SetNewCustomDataType
  name: SetNewCustomDataType
  nameWithType: GCXU.SetNewCustomDataType
  fullName: Danmokou.DMath.GCXU.SetNewCustomDataType
- uid: Danmokou.DMath.GCXU.ShareType*
  commentId: Overload:Danmokou.DMath.GCXU.ShareType
  name: ShareType
  nameWithType: GCXU.ShareType
  fullName: Danmokou.DMath.GCXU.ShareType
- uid: Danmokou.DMath.GCXU[]
  isExternal: true
  name: GCXU[]
  nameWithType: GCXU[]
  fullName: Danmokou.DMath.GCXU[]
  nameWithType.vb: GCXU()
  fullName.vb: Danmokou.DMath.GCXU()
  name.vb: GCXU()
  spec.csharp:
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.GCXU.ShareTypeAndCompile*
  commentId: Overload:Danmokou.DMath.GCXU.ShareTypeAndCompile
  name: ShareTypeAndCompile
  nameWithType: GCXU.ShareTypeAndCompile
  fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile
