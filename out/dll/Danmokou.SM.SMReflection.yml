### YamlMime:ManagedReference
items:
- uid: Danmokou.SM.SMReflection
  commentId: T:Danmokou.SM.SMReflection
  id: SMReflection
  parent: Danmokou.SM
  children:
  - Danmokou.SM.SMReflection.AssertComplex(System.String)
  - Danmokou.SM.SMReflection.AssertSimple(System.String)
  - Danmokou.SM.SMReflection.Async(System.String,GCXF{V2RV2},AsyncPattern)
  - Danmokou.SM.SMReflection.BEHControl(GCXF{System.Boolean},StyleSelector,BehaviorEntity.cBEHControl)
  - Danmokou.SM.SMReflection.Boss(System.String)
  - Danmokou.SM.SMReflection.BulletControl(GCXF{System.Boolean},StyleSelector,BulletManager.cBulletControl)
  - Danmokou.SM.SMReflection.CreateShot1(V2RV2,System.Single,System.Single,System.String)
  - Danmokou.SM.SMReflection.CreateShot2(System.Single,System.Single,System.Single,System.Single,System.String)
  - Danmokou.SM.SMReflection.Crosshair(System.String,GCXF{Vector2},GCXF{System.Single},GCXF{System.Single},ReflectEx.Hoist{Vector2},ExBPY)
  - Danmokou.SM.SMReflection.Cull
  - Danmokou.SM.SMReflection.DangerBot
  - Danmokou.SM.SMReflection.DangerLeft
  - Danmokou.SM.SMReflection.DangerLeft2
  - Danmokou.SM.SMReflection.DangerRight
  - Danmokou.SM.SMReflection.DangerRight2
  - Danmokou.SM.SMReflection.DangerTop
  - Danmokou.SM.SMReflection.dBossExplode(TP4,TP4)
  - Danmokou.SM.SMReflection.Debug(System.String)
  - Danmokou.SM.SMReflection.Delay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.Dialogue(System.String)
  - Danmokou.SM.SMReflection.DivertHP(GCXF{BehaviorEntity})
  - Danmokou.SM.SMReflection.dRaiko(GCXF{System.Single},GCXF{System.Single})
  - Danmokou.SM.SMReflection.dZaWarudo(GCXF{System.Single})
  - Danmokou.SM.SMReflection.Effect(System.String,GCXF{Vector2})
  - Danmokou.SM.SMReflection.Exec(ErasedGCXF)
  - Danmokou.SM.SMReflection.Exec``1(ErasedGCXF)
  - Danmokou.SM.SMReflection.ExecuteVN(System.Func{DMKVNState,Task},System.String)
  - Danmokou.SM.SMReflection.FadeSprite(BPY,GCXF{System.Single})
  - Danmokou.SM.SMReflection.Fire(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.FireSame(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.IMoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.LaserControl(GCXF{System.Boolean},StyleSelector,CurvedTileRenderLaser.cLaserControl)
  - Danmokou.SM.SMReflection.LifeToScore(System.Int32)
  - Danmokou.SM.SMReflection.LoadBEHTextures(StyleSelector)
  - Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  - Danmokou.SM.SMReflection.Move(GCXF{System.Single},VTP)
  - Danmokou.SM.SMReflection.MoveTarget(ExBPY,System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}},ExTP)
  - Danmokou.SM.SMReflection.MoveWhile(GCXF{System.Single},System.Nullable{Pred},VTP)
  - Danmokou.SM.SMReflection.MoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.MoveWrapFixedDelay(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.MoveWrapFixedDelayNB(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.NoOp
  - Danmokou.SM.SMReflection.PlayerVariant(System.ValueTuple{System.String,Danmokou.SM.StateMachine}[])
  - Danmokou.SM.SMReflection.Poof
  - Danmokou.SM.SMReflection.PoolControl``1(StyleSelector,``0)
  - Danmokou.SM.SMReflection.Pos(GCXF{Vector2})
  - Danmokou.SM.SMReflection.Position(GCXF{System.Single},GCXF{System.Single})
  - Danmokou.SM.SMReflection.Print``1(GCXF{``0})
  - Danmokou.SM.SMReflection.Raiko(GCXF{System.Single},GCXF{System.Single},FXY)
  - Danmokou.SM.SMReflection.RunDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.Save``1(ReflectEx.Hoist{``0},GCXF{System.Single},GCXF{``0})
  - Danmokou.SM.SMReflection.Scale(BPY,GCXF{System.Single})
  - Danmokou.SM.SMReflection.ScreenClear
  - Danmokou.SM.SMReflection.SeijaX(System.Single,System.Single)
  - Danmokou.SM.SMReflection.SeijaY(System.Single,System.Single)
  - Danmokou.SM.SMReflection.SFX(System.String)
  - Danmokou.SM.SMReflection.ShiftPhase
  - Danmokou.SM.SMReflection.ShiftPhaseTo(System.Int32)
  - Danmokou.SM.SMReflection.SkipTime(System.Single)
  - Danmokou.SM.SMReflection.Slowdown(GCXF{System.Single})
  - Danmokou.SM.SMReflection.SlowdownFor(Danmokou.SM.Synchronizer,GCXF{System.Single})
  - Danmokou.SM.SMReflection.StageAnnounce
  - Danmokou.SM.SMReflection.StageDeannounce
  - Danmokou.SM.SMReflection.Sync(System.String,GCXF{V2RV2},SyncPattern)
  - Danmokou.SM.SMReflection.ThenDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  - Danmokou.SM.SMReflection.Vulnerable(GCXF{System.Boolean})
  - Danmokou.SM.SMReflection.VulnerableAfter(Danmokou.SM.Synchronizer)
  - Danmokou.SM.SMReflection.Wait(Danmokou.SM.Synchronizer)
  - Danmokou.SM.SMReflection.Wrap(GCXF{Danmokou.SM.StateMachine})
  - Danmokou.SM.SMReflection.ZaWarudo(GCXF{System.Single},GCXF{Vector2},System.Nullable{GCXF{System.Single}},System.Nullable{GCXF{System.Single}},GCXF{System.Single})
  langs:
  - csharp
  - vb
  name: SMReflection
  nameWithType: SMReflection
  fullName: Danmokou.SM.SMReflection
  type: Class
  source:
    id: SMReflection
    path: ''
    startLine: 17298
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nAll public functions in this repository can be used as LASM state machines.\n"
  example: []
  syntax:
    content: public static class SMReflection
    content.vb: Public Module SMReflection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Danmokou.SM.SMReflection.Crosshair(System.String,GCXF{Vector2},GCXF{System.Single},GCXF{System.Single},ReflectEx.Hoist{Vector2},ExBPY)
  commentId: M:Danmokou.SM.SMReflection.Crosshair(System.String,GCXF{Vector2},GCXF{System.Single},GCXF{System.Single},ReflectEx.Hoist{Vector2},ExBPY)
  id: Crosshair(System.String,GCXF{Vector2},GCXF{System.Single},GCXF{System.Single},ReflectEx.Hoist{Vector2},ExBPY)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Crosshair(String, GCXF<Vector2>, GCXF<Single>, GCXF<Single>, ReflectEx.Hoist<Vector2>, ExBPY)
  nameWithType: SMReflection.Crosshair(String, GCXF<Vector2>, GCXF<Single>, GCXF<Single>, ReflectEx.Hoist<Vector2>, ExBPY)
  fullName: Danmokou.SM.SMReflection.Crosshair(System.String, GCXF<Vector2>, GCXF<System.Single>, GCXF<System.Single>, ReflectEx.Hoist<Vector2>, ExBPY)
  type: Method
  source:
    id: Crosshair
    path: ''
    startLine: 17319
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\n`crosshair`: Create a crosshair that follows the target for a limited amount of time\nand saves the target&apos;s position in public data hoisting.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Crosshair(string style, GCXF<Vector2> locator, GCXF<float> homeSec, GCXF<float> stickSec, ReflectEx.Hoist<Vector2> locSave, ExBPY indexer)
    parameters:
    - id: style
      type: System.String
    - id: locator
      type: GCXF{Vector2}
    - id: homeSec
      type: GCXF{System.Single}
    - id: stickSec
      type: GCXF{System.Single}
    - id: locSave
      type: ReflectEx.Hoist{Vector2}
    - id: indexer
      type: ExBPY
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Crosshair(style As String, locator As GCXF(Of Vector2), homeSec As GCXF(Of Single), stickSec As GCXF(Of Single), locSave As ReflectEx.Hoist(Of Vector2), indexer As ExBPY) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Crosshair*
  nameWithType.vb: SMReflection.Crosshair(String, GCXF(Of Vector2), GCXF(Of Single), GCXF(Of Single), ReflectEx.Hoist(Of Vector2), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Crosshair(System.String, GCXF(Of Vector2), GCXF(Of System.Single), GCXF(Of System.Single), ReflectEx.Hoist(Of Vector2), ExBPY)
  name.vb: Crosshair(String, GCXF(Of Vector2), GCXF(Of Single), GCXF(Of Single), ReflectEx.Hoist(Of Vector2), ExBPY)
- uid: Danmokou.SM.SMReflection.dZaWarudo(GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.dZaWarudo(GCXF{System.Single})
  id: dZaWarudo(GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: dZaWarudo(GCXF<Single>)
  nameWithType: SMReflection.dZaWarudo(GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.dZaWarudo(GCXF<System.Single>)
  type: Method
  source:
    id: dZaWarudo
    path: ''
    startLine: 17349
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM dZaWarudo(GCXF<float> time)
    parameters:
    - id: time
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function dZaWarudo(time As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.dZaWarudo*
  nameWithType.vb: SMReflection.dZaWarudo(GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.dZaWarudo(GCXF(Of System.Single))
  name.vb: dZaWarudo(GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.ZaWarudo(GCXF{System.Single},GCXF{Vector2},System.Nullable{GCXF{System.Single}},System.Nullable{GCXF{System.Single}},GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.ZaWarudo(GCXF{System.Single},GCXF{Vector2},System.Nullable{GCXF{System.Single}},System.Nullable{GCXF{System.Single}},GCXF{System.Single})
  id: ZaWarudo(GCXF{System.Single},GCXF{Vector2},System.Nullable{GCXF{System.Single}},System.Nullable{GCXF{System.Single}},GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ZaWarudo(GCXF<Single>, GCXF<Vector2>, Nullable<GCXF<Single>>, Nullable<GCXF<Single>>, GCXF<Single>)
  nameWithType: SMReflection.ZaWarudo(GCXF<Single>, GCXF<Vector2>, Nullable<GCXF<Single>>, Nullable<GCXF<Single>>, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.ZaWarudo(GCXF<System.Single>, GCXF<Vector2>, System.Nullable<GCXF<System.Single>>, System.Nullable<GCXF<System.Single>>, GCXF<System.Single>)
  type: Method
  source:
    id: ZaWarudo
    path: ''
    startLine: 17350
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM ZaWarudo(GCXF<float> time, GCXF<Vector2> loc, GCXF<float>? t1r, GCXF<float>? t2r, GCXF<float> scale)
    parameters:
    - id: time
      type: GCXF{System.Single}
    - id: loc
      type: GCXF{Vector2}
    - id: t1r
      type: System.Nullable{GCXF{System.Single}}
    - id: t2r
      type: System.Nullable{GCXF{System.Single}}
    - id: scale
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function ZaWarudo(time As GCXF(Of Single), loc As GCXF(Of Vector2), t1r As GCXF(Of Single)?, t2r As GCXF(Of Single)?, scale As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ZaWarudo*
  nameWithType.vb: SMReflection.ZaWarudo(GCXF(Of Single), GCXF(Of Vector2), Nullable(Of GCXF(Of Single)), Nullable(Of GCXF(Of Single)), GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.ZaWarudo(GCXF(Of System.Single), GCXF(Of Vector2), System.Nullable(Of GCXF(Of System.Single)), System.Nullable(Of GCXF(Of System.Single)), GCXF(Of System.Single))
  name.vb: ZaWarudo(GCXF(Of Single), GCXF(Of Vector2), Nullable(Of GCXF(Of Single)), Nullable(Of GCXF(Of Single)), GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.ScreenClear
  commentId: M:Danmokou.SM.SMReflection.ScreenClear
  id: ScreenClear
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ScreenClear()
  nameWithType: SMReflection.ScreenClear()
  fullName: Danmokou.SM.SMReflection.ScreenClear()
  type: Method
  source:
    id: ScreenClear
    path: ''
    startLine: 17370
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nAutodeletes enemy bullets. Note that some types of bullets (lasers, pathers, large bullets) may be unaffected.\n"
  example: []
  syntax:
    content: public static ReflectableLASM ScreenClear()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function ScreenClear As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ScreenClear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.dBossExplode(TP4,TP4)
  commentId: M:Danmokou.SM.SMReflection.dBossExplode(TP4,TP4)
  id: dBossExplode(TP4,TP4)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: dBossExplode(TP4, TP4)
  nameWithType: SMReflection.dBossExplode(TP4, TP4)
  fullName: Danmokou.SM.SMReflection.dBossExplode(TP4, TP4)
  type: Method
  source:
    id: dBossExplode
    path: ''
    startLine: 17375
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM dBossExplode(TP4 powerupColor, TP4 powerdownColor)
    parameters:
    - id: powerupColor
      type: TP4
    - id: powerdownColor
      type: TP4
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function dBossExplode(powerupColor As TP4, powerdownColor As TP4) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.dBossExplode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Effect(System.String,GCXF{Vector2})
  commentId: M:Danmokou.SM.SMReflection.Effect(System.String,GCXF{Vector2})
  id: Effect(System.String,GCXF{Vector2})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Effect(String, GCXF<Vector2>)
  nameWithType: SMReflection.Effect(String, GCXF<Vector2>)
  fullName: Danmokou.SM.SMReflection.Effect(System.String, GCXF<Vector2>)
  type: Method
  source:
    id: Effect
    path: ''
    startLine: 17401
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSpawn an effect at the given location.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Effect(string effect, GCXF<Vector2> loc)
    parameters:
    - id: effect
      type: System.String
    - id: loc
      type: GCXF{Vector2}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Effect(effect As String, loc As GCXF(Of Vector2)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Effect*
  nameWithType.vb: SMReflection.Effect(String, GCXF(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Effect(System.String, GCXF(Of Vector2))
  name.vb: Effect(String, GCXF(Of Vector2))
- uid: Danmokou.SM.SMReflection.SkipTime(System.Single)
  commentId: M:Danmokou.SM.SMReflection.SkipTime(System.Single)
  id: SkipTime(System.Single)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: SkipTime(Single)
  nameWithType: SMReflection.SkipTime(Single)
  fullName: Danmokou.SM.SMReflection.SkipTime(System.Single)
  type: Method
  source:
    id: SkipTime
    path: ''
    startLine: 17412
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\n(For debugging use) Skip forward in time in the engine. The player will be invulnerable during this time.\n"
  example: []
  syntax:
    content: public static ReflectableLASM SkipTime(float seconds)
    parameters:
    - id: seconds
      type: System.Single
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function SkipTime(seconds As Single) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.SkipTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Raiko(GCXF{System.Single},GCXF{System.Single},FXY)
  commentId: M:Danmokou.SM.SMReflection.Raiko(GCXF{System.Single},GCXF{System.Single},FXY)
  id: Raiko(GCXF{System.Single},GCXF{System.Single},FXY)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Raiko(GCXF<Single>, GCXF<Single>, FXY)
  nameWithType: SMReflection.Raiko(GCXF<Single>, GCXF<Single>, FXY)
  fullName: Danmokou.SM.SMReflection.Raiko(GCXF<System.Single>, GCXF<System.Single>, FXY)
  type: Method
  source:
    id: Raiko
    path: ''
    startLine: 17427
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nCreate screenshake.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Raiko(GCXF<float> magnitude, GCXF<float> time, FXY by_time)
    parameters:
    - id: magnitude
      type: GCXF{System.Single}
      description: Magnitude multiplier. Use 1 for a small but noticeable screenshake
    - id: time
      type: GCXF{System.Single}
      description: Time of screenshake
    - id: by_time
      type: FXY
      description: Magnitude multiplier over time
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Raiko(magnitude As GCXF(Of Single), time As GCXF(Of Single), by_time As FXY) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Raiko*
  nameWithType.vb: SMReflection.Raiko(GCXF(Of Single), GCXF(Of Single), FXY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Raiko(GCXF(Of System.Single), GCXF(Of System.Single), FXY)
  name.vb: Raiko(GCXF(Of Single), GCXF(Of Single), FXY)
- uid: Danmokou.SM.SMReflection.dRaiko(GCXF{System.Single},GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.dRaiko(GCXF{System.Single},GCXF{System.Single})
  id: dRaiko(GCXF{System.Single},GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: dRaiko(GCXF<Single>, GCXF<Single>)
  nameWithType: SMReflection.dRaiko(GCXF<Single>, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.dRaiko(GCXF<System.Single>, GCXF<System.Single>)
  type: Method
  source:
    id: dRaiko
    path: ''
    startLine: 17434
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM dRaiko(GCXF<float> magnitude, GCXF<float> time)
    parameters:
    - id: magnitude
      type: GCXF{System.Single}
    - id: time
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function dRaiko(magnitude As GCXF(Of Single), time As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.dRaiko*
  nameWithType.vb: SMReflection.dRaiko(GCXF(Of Single), GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.dRaiko(GCXF(Of System.Single), GCXF(Of System.Single))
  name.vb: dRaiko(GCXF(Of Single), GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.SeijaX(System.Single,System.Single)
  commentId: M:Danmokou.SM.SMReflection.SeijaX(System.Single,System.Single)
  id: SeijaX(System.Single,System.Single)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: SeijaX(Single, Single)
  nameWithType: SMReflection.SeijaX(Single, Single)
  fullName: Danmokou.SM.SMReflection.SeijaX(System.Single, System.Single)
  type: Method
  source:
    id: SeijaX
    path: ''
    startLine: 17445
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRotate the camera around the screen&apos;s X-axis.\nNote: this returns immediately.\n"
  example: []
  syntax:
    content: public static ReflectableLASM SeijaX(float degrees, float time)
    parameters:
    - id: degrees
      type: System.Single
    - id: time
      type: System.Single
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function SeijaX(degrees As Single, time As Single) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.SeijaX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.SeijaY(System.Single,System.Single)
  commentId: M:Danmokou.SM.SMReflection.SeijaY(System.Single,System.Single)
  id: SeijaY(System.Single,System.Single)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: SeijaY(Single, Single)
  nameWithType: SMReflection.SeijaY(Single, Single)
  fullName: Danmokou.SM.SMReflection.SeijaY(System.Single, System.Single)
  type: Method
  source:
    id: SeijaY
    path: ''
    startLine: 17454
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRotate the camera around the screen&apos;s Y-axis.\nNote: this returns immediately.\n"
  example: []
  syntax:
    content: public static ReflectableLASM SeijaY(float degrees, float time)
    parameters:
    - id: degrees
      type: System.Single
    - id: time
      type: System.Single
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function SeijaY(degrees As Single, time As Single) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.SeijaY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.StageAnnounce
  commentId: M:Danmokou.SM.SMReflection.StageAnnounce
  id: StageAnnounce
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: StageAnnounce()
  nameWithType: SMReflection.StageAnnounce()
  fullName: Danmokou.SM.SMReflection.StageAnnounce()
  type: Method
  source:
    id: StageAnnounce
    path: ''
    startLine: 17461
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM StageAnnounce()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function StageAnnounce As ReflectableLASM
  overload: Danmokou.SM.SMReflection.StageAnnounce*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.StageDeannounce
  commentId: M:Danmokou.SM.SMReflection.StageDeannounce
  id: StageDeannounce
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: StageDeannounce()
  nameWithType: SMReflection.StageDeannounce()
  fullName: Danmokou.SM.SMReflection.StageDeannounce()
  type: Method
  source:
    id: StageDeannounce
    path: ''
    startLine: 17466
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM StageDeannounce()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function StageDeannounce As ReflectableLASM
  overload: Danmokou.SM.SMReflection.StageDeannounce*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.NoOp
  commentId: M:Danmokou.SM.SMReflection.NoOp
  id: NoOp
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: NoOp()
  nameWithType: SMReflection.NoOp()
  fullName: Danmokou.SM.SMReflection.NoOp()
  type: Method
  source:
    id: NoOp
    path: ''
    startLine: 17473
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM NoOp()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function NoOp As ReflectableLASM
  overload: Danmokou.SM.SMReflection.NoOp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Boss(System.String)
  commentId: M:Danmokou.SM.SMReflection.Boss(System.String)
  id: Boss(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Boss(String)
  nameWithType: SMReflection.Boss(String)
  fullName: Danmokou.SM.SMReflection.Boss(System.String)
  type: Method
  source:
    id: Boss
    path: ''
    startLine: 17479
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSummon a boss, ie. a BEH with its own action handling.\n<br />The boss configuration must be loaded in ResourceManager.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Boss(string bossKey)
    parameters:
    - id: bossKey
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Boss(bossKey As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Boss*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Exec(ErasedGCXF)
  commentId: M:Danmokou.SM.SMReflection.Exec(ErasedGCXF)
  id: Exec(ErasedGCXF)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Exec(ErasedGCXF)
  nameWithType: SMReflection.Exec(ErasedGCXF)
  fullName: Danmokou.SM.SMReflection.Exec(ErasedGCXF)
  type: Method
  source:
    id: Exec
    path: ''
    startLine: 17494
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun arbitrary code as a StateMachine.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Exec(ErasedGCXF code)
    parameters:
    - id: code
      type: ErasedGCXF
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Exec(code As ErasedGCXF) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Exec*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Exec``1(ErasedGCXF)
  commentId: M:Danmokou.SM.SMReflection.Exec``1(ErasedGCXF)
  id: Exec``1(ErasedGCXF)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Exec<T>(ErasedGCXF)
  nameWithType: SMReflection.Exec<T>(ErasedGCXF)
  fullName: Danmokou.SM.SMReflection.Exec<T>(ErasedGCXF)
  type: Method
  source:
    id: Exec
    path: ''
    startLine: 17503
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun arbitrary code as a StateMachine, SyncPattern, or AsyncPattern.\n"
  example: []
  syntax:
    content: >-
      public static T Exec<T>(ErasedGCXF code)
          where T : class
    parameters:
    - id: code
      type: ErasedGCXF
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Exec(Of T As Class)(code As ErasedGCXF) As T
  overload: Danmokou.SM.SMReflection.Exec*
  nameWithType.vb: SMReflection.Exec(Of T)(ErasedGCXF)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Exec(Of T)(ErasedGCXF)
  name.vb: Exec(Of T)(ErasedGCXF)
- uid: Danmokou.SM.SMReflection.Wrap(GCXF{Danmokou.SM.StateMachine})
  commentId: M:Danmokou.SM.SMReflection.Wrap(GCXF{Danmokou.SM.StateMachine})
  id: Wrap(GCXF{Danmokou.SM.StateMachine})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Wrap(GCXF<StateMachine>)
  nameWithType: SMReflection.Wrap(GCXF<StateMachine>)
  fullName: Danmokou.SM.SMReflection.Wrap(GCXF<Danmokou.SM.StateMachine>)
  type: Method
  source:
    id: Wrap
    path: ''
    startLine: 17517
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun some code that returns a StateMachine, and then execute that StateMachine.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Wrap(GCXF<StateMachine> code)
    parameters:
    - id: code
      type: GCXF{Danmokou.SM.StateMachine}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Wrap(code As GCXF(Of StateMachine)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Wrap*
  nameWithType.vb: SMReflection.Wrap(GCXF(Of StateMachine))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Wrap(GCXF(Of Danmokou.SM.StateMachine))
  name.vb: Wrap(GCXF(Of StateMachine))
- uid: Danmokou.SM.SMReflection.Wait(Danmokou.SM.Synchronizer)
  commentId: M:Danmokou.SM.SMReflection.Wait(Danmokou.SM.Synchronizer)
  id: Wait(Danmokou.SM.Synchronizer)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Wait(Synchronizer)
  nameWithType: SMReflection.Wait(Synchronizer)
  fullName: Danmokou.SM.SMReflection.Wait(Danmokou.SM.Synchronizer)
  type: Method
  source:
    id: Wait
    path: ''
    startLine: 17535
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nWait for a synchronization event.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Wait(Synchronizer sycnhr)
    parameters:
    - id: sycnhr
      type: Danmokou.SM.Synchronizer
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Wait(sycnhr As Synchronizer) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Wait*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Delay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.Delay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  id: Delay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Delay(Synchronizer, StateMachine)
  nameWithType: SMReflection.Delay(Synchronizer, StateMachine)
  fullName: Danmokou.SM.SMReflection.Delay(Danmokou.SM.Synchronizer, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: Delay
    path: ''
    startLine: 17541
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nWait for a synchronization event and then run the child.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Delay(Synchronizer synchr, StateMachine state)
    parameters:
    - id: synchr
      type: Danmokou.SM.Synchronizer
    - id: state
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Delay(synchr As Synchronizer, state As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Delay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.ThenDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.ThenDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  id: ThenDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ThenDelay(Synchronizer, StateMachine)
  nameWithType: SMReflection.ThenDelay(Synchronizer, StateMachine)
  fullName: Danmokou.SM.SMReflection.ThenDelay(Danmokou.SM.Synchronizer, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: ThenDelay
    path: ''
    startLine: 17551
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun the child and then wait for a synchronization event.\n"
  example: []
  syntax:
    content: public static ReflectableLASM ThenDelay(Synchronizer synchr, StateMachine state)
    parameters:
    - id: synchr
      type: Danmokou.SM.Synchronizer
    - id: state
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function ThenDelay(synchr As Synchronizer, state As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ThenDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.RunDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.RunDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  id: RunDelay(Danmokou.SM.Synchronizer,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: RunDelay(Synchronizer, StateMachine)
  nameWithType: SMReflection.RunDelay(Synchronizer, StateMachine)
  fullName: Danmokou.SM.SMReflection.RunDelay(Danmokou.SM.Synchronizer, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: RunDelay
    path: ''
    startLine: 17562
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun the child nonblockingly and then wait for a synchronization event.\nSame as >> SYNCHR ~ STATE.\n"
  example: []
  syntax:
    content: public static ReflectableLASM RunDelay(Synchronizer synchr, StateMachine state)
    parameters:
    - id: synchr
      type: Danmokou.SM.Synchronizer
    - id: state
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function RunDelay(synchr As Synchronizer, state As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.RunDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.ExecuteVN(System.Func{DMKVNState,Task},System.String)
  commentId: M:Danmokou.SM.SMReflection.ExecuteVN(System.Func{DMKVNState,Task},System.String)
  id: ExecuteVN(System.Func{DMKVNState,Task},System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ExecuteVN(Func<DMKVNState, Task>, String)
  nameWithType: SMReflection.ExecuteVN(Func<DMKVNState, Task>, String)
  fullName: Danmokou.SM.SMReflection.ExecuteVN(System.Func<DMKVNState, Task>, System.String)
  type: Method
  source:
    id: ExecuteVN
    path: ''
    startLine: 17576
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun the provided visual novel script, disabling <see cref=\"!:PlayerController\"></see> input while it is running.\n"
  example: []
  syntax:
    content: public static ReflectableLASM ExecuteVN(Func<DMKVNState, Task> vnTask, string scriptId)
    parameters:
    - id: vnTask
      type: System.Func{DMKVNState,Task}
      description: Visual novel script function.
    - id: scriptId
      type: System.String
      description: Description of the script used when printing debug messages.
    return:
      type: Danmokou.SM.ReflectableLASM
      description: ''
    content.vb: Public Shared Function ExecuteVN(vnTask As Func(Of DMKVNState, Task), scriptId As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ExecuteVN*
  nameWithType.vb: SMReflection.ExecuteVN(Func(Of DMKVNState, Task), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.ExecuteVN(System.Func(Of DMKVNState, Task), System.String)
  name.vb: ExecuteVN(Func(Of DMKVNState, Task), String)
- uid: Danmokou.SM.SMReflection.Async(System.String,GCXF{V2RV2},AsyncPattern)
  commentId: M:Danmokou.SM.SMReflection.Async(System.String,GCXF{V2RV2},AsyncPattern)
  id: Async(System.String,GCXF{V2RV2},AsyncPattern)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Async(String, GCXF<V2RV2>, AsyncPattern)
  nameWithType: SMReflection.Async(String, GCXF<V2RV2>, AsyncPattern)
  fullName: Danmokou.SM.SMReflection.Async(System.String, GCXF<V2RV2>, AsyncPattern)
  type: Method
  source:
    id: Async
    path: ''
    startLine: 17603
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nAsynchronous bullet pattern fire.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Async(string style, GCXF<V2RV2> rv2, AsyncPattern ap)
    parameters:
    - id: style
      type: System.String
    - id: rv2
      type: GCXF{V2RV2}
    - id: ap
      type: AsyncPattern
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Async(style As String, rv2 As GCXF(Of V2RV2), ap As AsyncPattern) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Async*
  nameWithType.vb: SMReflection.Async(String, GCXF(Of V2RV2), AsyncPattern)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Async(System.String, GCXF(Of V2RV2), AsyncPattern)
  name.vb: Async(String, GCXF(Of V2RV2), AsyncPattern)
- uid: Danmokou.SM.SMReflection.Sync(System.String,GCXF{V2RV2},SyncPattern)
  commentId: M:Danmokou.SM.SMReflection.Sync(System.String,GCXF{V2RV2},SyncPattern)
  id: Sync(System.String,GCXF{V2RV2},SyncPattern)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Sync(String, GCXF<V2RV2>, SyncPattern)
  nameWithType: SMReflection.Sync(String, GCXF<V2RV2>, SyncPattern)
  fullName: Danmokou.SM.SMReflection.Sync(System.String, GCXF<V2RV2>, SyncPattern)
  type: Method
  source:
    id: Sync
    path: ''
    startLine: 17617
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSynchronous bullet pattern fire.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Sync(string style, GCXF<V2RV2> rv2, SyncPattern sp)
    parameters:
    - id: style
      type: System.String
    - id: rv2
      type: GCXF{V2RV2}
    - id: sp
      type: SyncPattern
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Sync(style As String, rv2 As GCXF(Of V2RV2), sp As SyncPattern) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Sync*
  nameWithType.vb: SMReflection.Sync(String, GCXF(Of V2RV2), SyncPattern)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Sync(System.String, GCXF(Of V2RV2), SyncPattern)
  name.vb: Sync(String, GCXF(Of V2RV2), SyncPattern)
- uid: Danmokou.SM.SMReflection.CreateShot1(V2RV2,System.Single,System.Single,System.String)
  commentId: M:Danmokou.SM.SMReflection.CreateShot1(V2RV2,System.Single,System.Single,System.String)
  id: CreateShot1(V2RV2,System.Single,System.Single,System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: CreateShot1(V2RV2, Single, Single, String)
  nameWithType: SMReflection.CreateShot1(V2RV2, Single, Single, String)
  fullName: Danmokou.SM.SMReflection.CreateShot1(V2RV2, System.Single, System.Single, System.String)
  type: Method
  source:
    id: CreateShot1
    path: ''
    startLine: 17628
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM CreateShot1(V2RV2 rv2, float speed, float angle, string style)
    parameters:
    - id: rv2
      type: V2RV2
    - id: speed
      type: System.Single
    - id: angle
      type: System.Single
    - id: style
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function CreateShot1(rv2 As V2RV2, speed As Single, angle As Single, style As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.CreateShot1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.CreateShot2(System.Single,System.Single,System.Single,System.Single,System.String)
  commentId: M:Danmokou.SM.SMReflection.CreateShot2(System.Single,System.Single,System.Single,System.Single,System.String)
  id: CreateShot2(System.Single,System.Single,System.Single,System.Single,System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: CreateShot2(Single, Single, Single, Single, String)
  nameWithType: SMReflection.CreateShot2(Single, Single, Single, Single, String)
  fullName: Danmokou.SM.SMReflection.CreateShot2(System.Single, System.Single, System.Single, System.Single, System.String)
  type: Method
  source:
    id: CreateShot2
    path: ''
    startLine: 17631
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM CreateShot2(float x, float y, float speed, float angle, string style)
    parameters:
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: speed
      type: System.Single
    - id: angle
      type: System.Single
    - id: style
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function CreateShot2(x As Single, y As Single, speed As Single, angle As Single, style As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.CreateShot2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Dialogue(System.String)
  commentId: M:Danmokou.SM.SMReflection.Dialogue(System.String)
  id: Dialogue(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Dialogue(String)
  nameWithType: SMReflection.Dialogue(String)
  fullName: Danmokou.SM.SMReflection.Dialogue(System.String)
  type: Method
  source:
    id: Dialogue
    path: ''
    startLine: 17634
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM Dialogue(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Dialogue(file As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Dialogue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.SFX(System.String)
  commentId: M:Danmokou.SM.SMReflection.SFX(System.String)
  id: SFX(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: SFX(String)
  nameWithType: SMReflection.SFX(String)
  fullName: Danmokou.SM.SMReflection.SFX(System.String)
  type: Method
  source:
    id: SFX
    path: ''
    startLine: 17646
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nPlay a sound.\n"
  example: []
  syntax:
    content: public static ReflectableLASM SFX(string sfx)
    parameters:
    - id: sfx
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function SFX(sfx As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.SFX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Save``1(ReflectEx.Hoist{``0},GCXF{System.Single},GCXF{``0})
  commentId: M:Danmokou.SM.SMReflection.Save``1(ReflectEx.Hoist{``0},GCXF{System.Single},GCXF{``0})
  id: Save``1(ReflectEx.Hoist{``0},GCXF{System.Single},GCXF{``0})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Save<T>(ReflectEx.Hoist<T>, GCXF<Single>, GCXF<T>)
  nameWithType: SMReflection.Save<T>(ReflectEx.Hoist<T>, GCXF<Single>, GCXF<T>)
  fullName: Danmokou.SM.SMReflection.Save<T>(ReflectEx.Hoist<T>, GCXF<System.Single>, GCXF<T>)
  type: Method
  source:
    id: Save
    path: ''
    startLine: 17655
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSave some information in public data hoisting.\n<br />Public data hoisting is two-layer: it requires a name and an index.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Save<T>(ReflectEx.Hoist<T> name, GCXF<float> indexer, GCXF<T> valuer)
    parameters:
    - id: name
      type: ReflectEx.Hoist{{T}}
    - id: indexer
      type: GCXF{System.Single}
    - id: valuer
      type: GCXF{{T}}
    typeParameters:
    - id: T
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Save(Of T)(name As ReflectEx.Hoist(Of T), indexer As GCXF(Of Single), valuer As GCXF(Of T)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Save*
  nameWithType.vb: SMReflection.Save(Of T)(ReflectEx.Hoist(Of T), GCXF(Of Single), GCXF(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Save(Of T)(ReflectEx.Hoist(Of T), GCXF(Of System.Single), GCXF(Of T))
  name.vb: Save(Of T)(ReflectEx.Hoist(Of T), GCXF(Of Single), GCXF(Of T))
- uid: Danmokou.SM.SMReflection.BulletControl(GCXF{System.Boolean},StyleSelector,BulletManager.cBulletControl)
  commentId: M:Danmokou.SM.SMReflection.BulletControl(GCXF{System.Boolean},StyleSelector,BulletManager.cBulletControl)
  id: BulletControl(GCXF{System.Boolean},StyleSelector,BulletManager.cBulletControl)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: BulletControl(GCXF<Boolean>, StyleSelector, BulletManager.cBulletControl)
  nameWithType: SMReflection.BulletControl(GCXF<Boolean>, StyleSelector, BulletManager.cBulletControl)
  fullName: Danmokou.SM.SMReflection.BulletControl(GCXF<System.Boolean>, StyleSelector, BulletManager.cBulletControl)
  type: Method
  source:
    id: BulletControl
    path: ''
    startLine: 17665
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nApply bullet controls to simple bullet pools.\n"
  example: []
  syntax:
    content: public static ReflectableLASM BulletControl(GCXF<bool> persist, StyleSelector style, BulletManager.cBulletControl control)
    parameters:
    - id: persist
      type: GCXF{System.Boolean}
    - id: style
      type: StyleSelector
    - id: control
      type: BulletManager.cBulletControl
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function BulletControl(persist As GCXF(Of Boolean), style As StyleSelector, control As BulletManager.cBulletControl) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.BulletControl*
  nameWithType.vb: SMReflection.BulletControl(GCXF(Of Boolean), StyleSelector, BulletManager.cBulletControl)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.BulletControl(GCXF(Of System.Boolean), StyleSelector, BulletManager.cBulletControl)
  name.vb: BulletControl(GCXF(Of Boolean), StyleSelector, BulletManager.cBulletControl)
- uid: Danmokou.SM.SMReflection.BEHControl(GCXF{System.Boolean},StyleSelector,BehaviorEntity.cBEHControl)
  commentId: M:Danmokou.SM.SMReflection.BEHControl(GCXF{System.Boolean},StyleSelector,BehaviorEntity.cBEHControl)
  id: BEHControl(GCXF{System.Boolean},StyleSelector,BehaviorEntity.cBEHControl)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: BEHControl(GCXF<Boolean>, StyleSelector, BehaviorEntity.cBEHControl)
  nameWithType: SMReflection.BEHControl(GCXF<Boolean>, StyleSelector, BehaviorEntity.cBEHControl)
  fullName: Danmokou.SM.SMReflection.BEHControl(GCXF<System.Boolean>, StyleSelector, BehaviorEntity.cBEHControl)
  type: Method
  source:
    id: BEHControl
    path: ''
    startLine: 17674
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nApply bullet controls to BEH bullet pools.\n"
  example: []
  syntax:
    content: public static ReflectableLASM BEHControl(GCXF<bool> persist, StyleSelector style, BehaviorEntity.cBEHControl control)
    parameters:
    - id: persist
      type: GCXF{System.Boolean}
    - id: style
      type: StyleSelector
    - id: control
      type: BehaviorEntity.cBEHControl
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function BEHControl(persist As GCXF(Of Boolean), style As StyleSelector, control As BehaviorEntity.cBEHControl) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.BEHControl*
  nameWithType.vb: SMReflection.BEHControl(GCXF(Of Boolean), StyleSelector, BehaviorEntity.cBEHControl)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.BEHControl(GCXF(Of System.Boolean), StyleSelector, BehaviorEntity.cBEHControl)
  name.vb: BEHControl(GCXF(Of Boolean), StyleSelector, BehaviorEntity.cBEHControl)
- uid: Danmokou.SM.SMReflection.LaserControl(GCXF{System.Boolean},StyleSelector,CurvedTileRenderLaser.cLaserControl)
  commentId: M:Danmokou.SM.SMReflection.LaserControl(GCXF{System.Boolean},StyleSelector,CurvedTileRenderLaser.cLaserControl)
  id: LaserControl(GCXF{System.Boolean},StyleSelector,CurvedTileRenderLaser.cLaserControl)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: LaserControl(GCXF<Boolean>, StyleSelector, CurvedTileRenderLaser.cLaserControl)
  nameWithType: SMReflection.LaserControl(GCXF<Boolean>, StyleSelector, CurvedTileRenderLaser.cLaserControl)
  fullName: Danmokou.SM.SMReflection.LaserControl(GCXF<System.Boolean>, StyleSelector, CurvedTileRenderLaser.cLaserControl)
  type: Method
  source:
    id: LaserControl
    path: ''
    startLine: 17683
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nApply laser-specific bullet controls to lasers.\n"
  example: []
  syntax:
    content: public static ReflectableLASM LaserControl(GCXF<bool> persist, StyleSelector style, CurvedTileRenderLaser.cLaserControl control)
    parameters:
    - id: persist
      type: GCXF{System.Boolean}
    - id: style
      type: StyleSelector
    - id: control
      type: CurvedTileRenderLaser.cLaserControl
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function LaserControl(persist As GCXF(Of Boolean), style As StyleSelector, control As CurvedTileRenderLaser.cLaserControl) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.LaserControl*
  nameWithType.vb: SMReflection.LaserControl(GCXF(Of Boolean), StyleSelector, CurvedTileRenderLaser.cLaserControl)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.LaserControl(GCXF(Of System.Boolean), StyleSelector, CurvedTileRenderLaser.cLaserControl)
  name.vb: LaserControl(GCXF(Of Boolean), StyleSelector, CurvedTileRenderLaser.cLaserControl)
- uid: Danmokou.SM.SMReflection.PoolControl``1(StyleSelector,``0)
  commentId: M:Danmokou.SM.SMReflection.PoolControl``1(StyleSelector,``0)
  id: PoolControl``1(StyleSelector,``0)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: PoolControl<CF>(StyleSelector, CF)
  nameWithType: SMReflection.PoolControl<CF>(StyleSelector, CF)
  fullName: Danmokou.SM.SMReflection.PoolControl<CF>(StyleSelector, CF)
  type: Method
  source:
    id: PoolControl
    path: ''
    startLine: 17692
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nApply a controller function to a pool of entities.\n"
  example: []
  syntax:
    content: public static ReflectableLASM PoolControl<CF>(StyleSelector style, CF control)
    parameters:
    - id: style
      type: StyleSelector
    - id: control
      type: '{CF}'
    typeParameters:
    - id: CF
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function PoolControl(Of CF)(style As StyleSelector, control As CF) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.PoolControl*
  nameWithType.vb: SMReflection.PoolControl(Of CF)(StyleSelector, CF)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.PoolControl(Of CF)(StyleSelector, CF)
  name.vb: PoolControl(Of CF)(StyleSelector, CF)
- uid: Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  commentId: M:Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  id: LoadSBTextures(StyleSelector)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: LoadSBTextures(StyleSelector)
  nameWithType: SMReflection.LoadSBTextures(StyleSelector)
  fullName: Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  type: Method
  source:
    id: LoadSBTextures
    path: ''
    startLine: 17712
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nLoad textures for the provided styles. Textures are normally loaded the first time a bullet\nis instantiated, but this may cause lag spikes on some platforms, in which case loading them ahead\nof time may be better.\n<br />For simple bullets, also instantiate the bullet for a few frames to trigger a shader compile.\n"
  example: []
  syntax:
    content: public static ReflectableLASM LoadSBTextures(StyleSelector styles)
    parameters:
    - id: styles
      type: StyleSelector
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function LoadSBTextures(styles As StyleSelector) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.LoadSBTextures*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.LoadBEHTextures(StyleSelector)
  commentId: M:Danmokou.SM.SMReflection.LoadBEHTextures(StyleSelector)
  id: LoadBEHTextures(StyleSelector)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: LoadBEHTextures(StyleSelector)
  nameWithType: SMReflection.LoadBEHTextures(StyleSelector)
  fullName: Danmokou.SM.SMReflection.LoadBEHTextures(StyleSelector)
  type: Method
  source:
    id: LoadBEHTextures
    path: ''
    startLine: 17728
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nLoad textures for the provided styles. Textures are normally loaded the first time a bullet\nis instantiated, but this may cause lag spikes on some platforms, in which case loading them ahead\nof time may be better.\n<br />For simple bullets, also instantiate the bullet for a few frames to trigger a shader compile.\n"
  example: []
  syntax:
    content: public static ReflectableLASM LoadBEHTextures(StyleSelector styles)
    parameters:
    - id: styles
      type: StyleSelector
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function LoadBEHTextures(styles As StyleSelector) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.LoadBEHTextures*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.ShiftPhaseTo(System.Int32)
  commentId: M:Danmokou.SM.SMReflection.ShiftPhaseTo(System.Int32)
  id: ShiftPhaseTo(System.Int32)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ShiftPhaseTo(Int32)
  nameWithType: SMReflection.ShiftPhaseTo(Int32)
  fullName: Danmokou.SM.SMReflection.ShiftPhaseTo(System.Int32)
  type: Method
  source:
    id: ShiftPhaseTo
    path: ''
    startLine: 17740
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nChange the running phase.\n"
  example: []
  syntax:
    content: public static ReflectableLASM ShiftPhaseTo(int toPhase)
    parameters:
    - id: toPhase
      type: System.Int32
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function ShiftPhaseTo(toPhase As Integer) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ShiftPhaseTo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.ShiftPhase
  commentId: M:Danmokou.SM.SMReflection.ShiftPhase
  id: ShiftPhase
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: ShiftPhase()
  nameWithType: SMReflection.ShiftPhase()
  fullName: Danmokou.SM.SMReflection.ShiftPhase()
  type: Method
  source:
    id: ShiftPhase
    path: ''
    startLine: 17750
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nGo to the next phase.\n"
  example: []
  syntax:
    content: public static ReflectableLASM ShiftPhase()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function ShiftPhase As ReflectableLASM
  overload: Danmokou.SM.SMReflection.ShiftPhase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Cull
  commentId: M:Danmokou.SM.SMReflection.Cull
  id: Cull
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Cull()
  nameWithType: SMReflection.Cull()
  fullName: Danmokou.SM.SMReflection.Cull()
  type: Method
  source:
    id: Cull
    path: ''
    startLine: 17755
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nKill this entity (no death effects).\n"
  example: []
  syntax:
    content: public static ReflectableLASM Cull()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Cull As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Cull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Poof
  commentId: M:Danmokou.SM.SMReflection.Poof
  id: Poof
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Poof()
  nameWithType: SMReflection.Poof()
  fullName: Danmokou.SM.SMReflection.Poof()
  type: Method
  source:
    id: Poof
    path: ''
    startLine: 17763
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nKill this entity (death effects included).\n"
  example: []
  syntax:
    content: public static ReflectableLASM Poof()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Poof As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Poof*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.MoveWhile(GCXF{System.Single},System.Nullable{Pred},VTP)
  commentId: M:Danmokou.SM.SMReflection.MoveWhile(GCXF{System.Single},System.Nullable{Pred},VTP)
  id: MoveWhile(GCXF{System.Single},System.Nullable{Pred},VTP)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: MoveWhile(GCXF<Single>, Nullable<Pred>, VTP)
  nameWithType: SMReflection.MoveWhile(GCXF<Single>, Nullable<Pred>, VTP)
  fullName: Danmokou.SM.SMReflection.MoveWhile(GCXF<System.Single>, System.Nullable<Pred>, VTP)
  type: Method
  source:
    id: MoveWhile
    path: ''
    startLine: 17771
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove the executing entity, but cancel movement if the predicate is false.\n"
  example: []
  syntax:
    content: public static ReflectableLASM MoveWhile(GCXF<float> time, Pred? condition, VTP path)
    parameters:
    - id: time
      type: GCXF{System.Single}
    - id: condition
      type: System.Nullable{Pred}
    - id: path
      type: VTP
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function MoveWhile(time As GCXF(Of Single), condition As Pred?, path As VTP) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.MoveWhile*
  nameWithType.vb: SMReflection.MoveWhile(GCXF(Of Single), Nullable(Of Pred), VTP)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.MoveWhile(GCXF(Of System.Single), System.Nullable(Of Pred), VTP)
  name.vb: MoveWhile(GCXF(Of Single), Nullable(Of Pred), VTP)
- uid: Danmokou.SM.SMReflection.Move(GCXF{System.Single},VTP)
  commentId: M:Danmokou.SM.SMReflection.Move(GCXF{System.Single},VTP)
  id: Move(GCXF{System.Single},VTP)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Move(GCXF<Single>, VTP)
  nameWithType: SMReflection.Move(GCXF<Single>, VTP)
  fullName: Danmokou.SM.SMReflection.Move(GCXF<System.Single>, VTP)
  type: Method
  source:
    id: Move
    path: ''
    startLine: 17791
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove the executing entity.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Move(GCXF<float> time, VTP path)
    parameters:
    - id: time
      type: GCXF{System.Single}
    - id: path
      type: VTP
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Move(time As GCXF(Of Single), path As VTP) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Move*
  nameWithType.vb: SMReflection.Move(GCXF(Of Single), VTP)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Move(GCXF(Of System.Single), VTP)
  name.vb: Move(GCXF(Of Single), VTP)
- uid: Danmokou.SM.SMReflection.MoveTarget(ExBPY,System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}},ExTP)
  commentId: M:Danmokou.SM.SMReflection.MoveTarget(ExBPY,System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}},ExTP)
  id: MoveTarget(ExBPY,System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}},ExTP)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: MoveTarget(ExBPY, Func<TExArgCtx, TEx<Func<Single, Single>>>, ExTP)
  nameWithType: SMReflection.MoveTarget(ExBPY, Func<TExArgCtx, TEx<Func<Single, Single>>>, ExTP)
  fullName: Danmokou.SM.SMReflection.MoveTarget(ExBPY, System.Func<TExArgCtx, TEx<System.Func<System.Single, System.Single>>>, ExTP)
  type: Method
  source:
    id: MoveTarget
    path: ''
    startLine: 17796
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove the executing entity to a target position over time. This has zero error.\n"
  example: []
  syntax:
    content: public static ReflectableLASM MoveTarget(ExBPY time, Func<TExArgCtx, TEx<Func<float, float>>> ease, ExTP target)
    parameters:
    - id: time
      type: ExBPY
    - id: ease
      type: System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}}
    - id: target
      type: ExTP
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function MoveTarget(time As ExBPY, ease As Func(Of TExArgCtx, TEx(Of Func(Of Single, Single))), target As ExTP) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.MoveTarget*
  nameWithType.vb: SMReflection.MoveTarget(ExBPY, Func(Of TExArgCtx, TEx(Of Func(Of Single, Single))), ExTP)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.MoveTarget(ExBPY, System.Func(Of TExArgCtx, TEx(Of System.Func(Of System.Single, System.Single))), ExTP)
  name.vb: MoveTarget(ExBPY, Func(Of TExArgCtx, TEx(Of Func(Of Single, Single))), ExTP)
- uid: Danmokou.SM.SMReflection.MoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.MoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  id: MoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: MoveWrap(ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  nameWithType: SMReflection.MoveWrap(ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  fullName: Danmokou.SM.SMReflection.MoveWrap(ExBPY, ExTP, ExBPY, ExTP, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: MoveWrap
    path: ''
    startLine: 17804
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove to a target position, run a state machine, and then move to another target position.\n"
  example: []
  syntax:
    content: public static ReflectableLASM MoveWrap(ExBPY t1, ExTP target1, ExBPY t2, ExTP target2, StateMachine wrapped)
    parameters:
    - id: t1
      type: ExBPY
    - id: target1
      type: ExTP
    - id: t2
      type: ExBPY
    - id: target2
      type: ExTP
    - id: wrapped
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function MoveWrap(t1 As ExBPY, target1 As ExTP, t2 As ExBPY, target2 As ExTP, wrapped As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.MoveWrap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.MoveWrapFixedDelay(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.MoveWrapFixedDelay(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  id: MoveWrapFixedDelay(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: MoveWrapFixedDelay(Synchronizer, ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  nameWithType: SMReflection.MoveWrapFixedDelay(Synchronizer, ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  fullName: Danmokou.SM.SMReflection.MoveWrapFixedDelay(Danmokou.SM.Synchronizer, ExBPY, ExTP, ExBPY, ExTP, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: MoveWrapFixedDelay
    path: ''
    startLine: 17821
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove to a target position, run a state machine nonblockingly, wait for a synchronization event,\nand then move to another target position.\n"
  example: []
  syntax:
    content: public static ReflectableLASM MoveWrapFixedDelay(Synchronizer s, ExBPY t1, ExTP target1, ExBPY t2, ExTP target2, StateMachine wrapped)
    parameters:
    - id: s
      type: Danmokou.SM.Synchronizer
    - id: t1
      type: ExBPY
    - id: target1
      type: ExTP
    - id: t2
      type: ExBPY
    - id: target2
      type: ExTP
    - id: wrapped
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function MoveWrapFixedDelay(s As Synchronizer, t1 As ExBPY, target1 As ExTP, t2 As ExBPY, target2 As ExTP, wrapped As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.MoveWrapFixedDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.MoveWrapFixedDelayNB(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.MoveWrapFixedDelayNB(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  id: MoveWrapFixedDelayNB(Danmokou.SM.Synchronizer,ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: MoveWrapFixedDelayNB(Synchronizer, ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  nameWithType: SMReflection.MoveWrapFixedDelayNB(Synchronizer, ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  fullName: Danmokou.SM.SMReflection.MoveWrapFixedDelayNB(Danmokou.SM.Synchronizer, ExBPY, ExTP, ExBPY, ExTP, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: MoveWrapFixedDelayNB
    path: ''
    startLine: 17831
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nRun a state machine nonblockingly, move to a target position, wait for a synchronization event,\nand then move to another target position.\n"
  example: []
  syntax:
    content: public static ReflectableLASM MoveWrapFixedDelayNB(Synchronizer s, ExBPY t1, ExTP target1, ExBPY t2, ExTP target2, StateMachine wrapped)
    parameters:
    - id: s
      type: Danmokou.SM.Synchronizer
    - id: t1
      type: ExBPY
    - id: target1
      type: ExTP
    - id: t2
      type: ExBPY
    - id: target2
      type: ExTP
    - id: wrapped
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function MoveWrapFixedDelayNB(s As Synchronizer, t1 As ExBPY, target1 As ExTP, t2 As ExBPY, target2 As ExTP, wrapped As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.MoveWrapFixedDelayNB*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.IMoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.IMoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  id: IMoveWrap(ExBPY,ExTP,ExBPY,ExTP,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: IMoveWrap(ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  nameWithType: SMReflection.IMoveWrap(ExBPY, ExTP, ExBPY, ExTP, StateMachine)
  fullName: Danmokou.SM.SMReflection.IMoveWrap(ExBPY, ExTP, ExBPY, ExTP, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: IMoveWrap
    path: ''
    startLine: 17848
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nMove-wrap, but the enemy is set invincible until the wrapped SM starts.\n"
  example: []
  syntax:
    content: public static ReflectableLASM IMoveWrap(ExBPY t1, ExTP target1, ExBPY t2, ExTP target2, StateMachine wrapped)
    parameters:
    - id: t1
      type: ExBPY
    - id: target1
      type: ExTP
    - id: t2
      type: ExBPY
    - id: target2
      type: ExTP
    - id: wrapped
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function IMoveWrap(t1 As ExBPY, target1 As ExTP, t2 As ExBPY, target2 As ExTP, wrapped As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.IMoveWrap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Position(GCXF{System.Single},GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.Position(GCXF{System.Single},GCXF{System.Single})
  id: Position(GCXF{System.Single},GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Position(GCXF<Single>, GCXF<Single>)
  nameWithType: SMReflection.Position(GCXF<Single>, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.Position(GCXF<System.Single>, GCXF<System.Single>)
  type: Method
  source:
    id: Position
    path: ''
    startLine: 17866
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSet the position of the executing BEH in world coordinates, with X and Y as separate arguments.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Position(GCXF<float> x, GCXF<float> y)
    parameters:
    - id: x
      type: GCXF{System.Single}
    - id: y
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Position(x As GCXF(Of Single), y As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Position*
  nameWithType.vb: SMReflection.Position(GCXF(Of Single), GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Position(GCXF(Of System.Single), GCXF(Of System.Single))
  name.vb: Position(GCXF(Of Single), GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.Pos(GCXF{Vector2})
  commentId: M:Danmokou.SM.SMReflection.Pos(GCXF{Vector2})
  id: Pos(GCXF{Vector2})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Pos(GCXF<Vector2>)
  nameWithType: SMReflection.Pos(GCXF<Vector2>)
  fullName: Danmokou.SM.SMReflection.Pos(GCXF<Vector2>)
  type: Method
  source:
    id: Pos
    path: ''
    startLine: 17874
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSet the position of the executing BEH in world coordinates using one Vector2.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Pos(GCXF<Vector2> xy)
    parameters:
    - id: xy
      type: GCXF{Vector2}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Pos(xy As GCXF(Of Vector2)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Pos*
  nameWithType.vb: SMReflection.Pos(GCXF(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Pos(GCXF(Of Vector2))
  name.vb: Pos(GCXF(Of Vector2))
- uid: Danmokou.SM.SMReflection.DivertHP(GCXF{BehaviorEntity})
  commentId: M:Danmokou.SM.SMReflection.DivertHP(GCXF{BehaviorEntity})
  id: DivertHP(GCXF{BehaviorEntity})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DivertHP(GCXF<BehaviorEntity>)
  nameWithType: SMReflection.DivertHP(GCXF<BehaviorEntity>)
  fullName: Danmokou.SM.SMReflection.DivertHP(GCXF<BehaviorEntity>)
  type: Method
  source:
    id: DivertHP
    path: ''
    startLine: 17882
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nLink this entity&apos;s HP pool to another enemy. The other enemy will serve as the source and this will simply redirect damage.\n"
  example: []
  syntax:
    content: public static ReflectableLASM DivertHP(GCXF<BehaviorEntity> target)
    parameters:
    - id: target
      type: GCXF{BehaviorEntity}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DivertHP(target As GCXF(Of BehaviorEntity)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DivertHP*
  nameWithType.vb: SMReflection.DivertHP(GCXF(Of BehaviorEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.DivertHP(GCXF(Of BehaviorEntity))
  name.vb: DivertHP(GCXF(Of BehaviorEntity))
- uid: Danmokou.SM.SMReflection.Vulnerable(GCXF{System.Boolean})
  commentId: M:Danmokou.SM.SMReflection.Vulnerable(GCXF{System.Boolean})
  id: Vulnerable(GCXF{System.Boolean})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Vulnerable(GCXF<Boolean>)
  nameWithType: SMReflection.Vulnerable(GCXF<Boolean>)
  fullName: Danmokou.SM.SMReflection.Vulnerable(GCXF<System.Boolean>)
  type: Method
  source:
    id: Vulnerable
    path: ''
    startLine: 17890
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSet the enemy to be vulnerable if the condition returns true, otherwise set it to be invulnerable.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Vulnerable(GCXF<bool> isVulnerable)
    parameters:
    - id: isVulnerable
      type: GCXF{System.Boolean}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Vulnerable(isVulnerable As GCXF(Of Boolean)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Vulnerable*
  nameWithType.vb: SMReflection.Vulnerable(GCXF(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Vulnerable(GCXF(Of System.Boolean))
  name.vb: Vulnerable(GCXF(Of Boolean))
- uid: Danmokou.SM.SMReflection.VulnerableAfter(Danmokou.SM.Synchronizer)
  commentId: M:Danmokou.SM.SMReflection.VulnerableAfter(Danmokou.SM.Synchronizer)
  id: VulnerableAfter(Danmokou.SM.Synchronizer)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: VulnerableAfter(Synchronizer)
  nameWithType: SMReflection.VulnerableAfter(Synchronizer)
  fullName: Danmokou.SM.SMReflection.VulnerableAfter(Danmokou.SM.Synchronizer)
  type: Method
  source:
    id: VulnerableAfter
    path: ''
    startLine: 17899
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSet the enemy invulnerable, wait for a synchronization event, and then set it vulnerable.\n(This SM is blocking.)\n"
  example: []
  syntax:
    content: public static ReflectableLASM VulnerableAfter(Synchronizer sync)
    parameters:
    - id: sync
      type: Danmokou.SM.Synchronizer
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function VulnerableAfter(sync As Synchronizer) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.VulnerableAfter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.FadeSprite(BPY,GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.FadeSprite(BPY,GCXF{System.Single})
  id: FadeSprite(BPY,GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: FadeSprite(BPY, GCXF<Single>)
  nameWithType: SMReflection.FadeSprite(BPY, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.FadeSprite(BPY, GCXF<System.Single>)
  type: Method
  source:
    id: FadeSprite
    path: ''
    startLine: 17906
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM FadeSprite(BPY fader, GCXF<float> time)
    parameters:
    - id: fader
      type: BPY
    - id: time
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function FadeSprite(fader As BPY, time As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.FadeSprite*
  nameWithType.vb: SMReflection.FadeSprite(BPY, GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.FadeSprite(BPY, GCXF(Of System.Single))
  name.vb: FadeSprite(BPY, GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.Scale(BPY,GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.Scale(BPY,GCXF{System.Single})
  id: Scale(BPY,GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Scale(BPY, GCXF<Single>)
  nameWithType: SMReflection.Scale(BPY, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.Scale(BPY, GCXF<System.Single>)
  type: Method
  source:
    id: Scale
    path: ''
    startLine: 17911
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM Scale(BPY scaler, GCXF<float> time)
    parameters:
    - id: scaler
      type: BPY
    - id: time
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Scale(scaler As BPY, time As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Scale*
  nameWithType.vb: SMReflection.Scale(BPY, GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Scale(BPY, GCXF(Of System.Single))
  name.vb: Scale(BPY, GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.Slowdown(GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.Slowdown(GCXF{System.Single})
  id: Slowdown(GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Slowdown(GCXF<Single>)
  nameWithType: SMReflection.Slowdown(GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.Slowdown(GCXF<System.Single>)
  type: Method
  source:
    id: Slowdown
    path: ''
    startLine: 17924
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nCreate a global slowdown effect. Note this will only reset when the nesting context (usually a phase)\nis cancelled.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Slowdown(GCXF<float> ratio)
    parameters:
    - id: ratio
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Slowdown(ratio As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Slowdown*
  nameWithType.vb: SMReflection.Slowdown(GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Slowdown(GCXF(Of System.Single))
  name.vb: Slowdown(GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.SlowdownFor(Danmokou.SM.Synchronizer,GCXF{System.Single})
  commentId: M:Danmokou.SM.SMReflection.SlowdownFor(Danmokou.SM.Synchronizer,GCXF{System.Single})
  id: SlowdownFor(Danmokou.SM.Synchronizer,GCXF{System.Single})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: SlowdownFor(Synchronizer, GCXF<Single>)
  nameWithType: SMReflection.SlowdownFor(Synchronizer, GCXF<Single>)
  fullName: Danmokou.SM.SMReflection.SlowdownFor(Danmokou.SM.Synchronizer, GCXF<System.Single>)
  type: Method
  source:
    id: SlowdownFor
    path: ''
    startLine: 17931
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nCreate a global slowdown effect for a limited amount of time.\n"
  example: []
  syntax:
    content: public static ReflectableLASM SlowdownFor(Synchronizer time, GCXF<float> ratio)
    parameters:
    - id: time
      type: Danmokou.SM.Synchronizer
    - id: ratio
      type: GCXF{System.Single}
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function SlowdownFor(time As Synchronizer, ratio As GCXF(Of Single)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.SlowdownFor*
  nameWithType.vb: SMReflection.SlowdownFor(Synchronizer, GCXF(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.SlowdownFor(Danmokou.SM.Synchronizer, GCXF(Of System.Single))
  name.vb: SlowdownFor(Synchronizer, GCXF(Of Single))
- uid: Danmokou.SM.SMReflection.DangerBot
  commentId: M:Danmokou.SM.SMReflection.DangerBot
  id: DangerBot
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerBot()
  nameWithType: SMReflection.DangerBot()
  fullName: Danmokou.SM.SMReflection.DangerBot()
  type: Method
  source:
    id: DangerBot
    path: ''
    startLine: 17940
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerBot()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerBot As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerBot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.DangerTop
  commentId: M:Danmokou.SM.SMReflection.DangerTop
  id: DangerTop
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerTop()
  nameWithType: SMReflection.DangerTop()
  fullName: Danmokou.SM.SMReflection.DangerTop()
  type: Method
  source:
    id: DangerTop
    path: ''
    startLine: 17943
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerTop()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerTop As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerTop*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.DangerLeft
  commentId: M:Danmokou.SM.SMReflection.DangerLeft
  id: DangerLeft
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerLeft()
  nameWithType: SMReflection.DangerLeft()
  fullName: Danmokou.SM.SMReflection.DangerLeft()
  type: Method
  source:
    id: DangerLeft
    path: ''
    startLine: 17946
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerLeft()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerLeft As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerLeft*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.DangerRight
  commentId: M:Danmokou.SM.SMReflection.DangerRight
  id: DangerRight
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerRight()
  nameWithType: SMReflection.DangerRight()
  fullName: Danmokou.SM.SMReflection.DangerRight()
  type: Method
  source:
    id: DangerRight
    path: ''
    startLine: 17949
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerRight()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerRight As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerRight*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.DangerLeft2
  commentId: M:Danmokou.SM.SMReflection.DangerLeft2
  id: DangerLeft2
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerLeft2()
  nameWithType: SMReflection.DangerLeft2()
  fullName: Danmokou.SM.SMReflection.DangerLeft2()
  type: Method
  source:
    id: DangerLeft2
    path: ''
    startLine: 17952
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerLeft2()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerLeft2 As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerLeft2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.DangerRight2
  commentId: M:Danmokou.SM.SMReflection.DangerRight2
  id: DangerRight2
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: DangerRight2()
  nameWithType: SMReflection.DangerRight2()
  fullName: Danmokou.SM.SMReflection.DangerRight2()
  type: Method
  source:
    id: DangerRight2
    path: ''
    startLine: 17955
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM DangerRight2()
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function DangerRight2 As ReflectableLASM
  overload: Danmokou.SM.SMReflection.DangerRight2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Fire(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.Fire(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  id: Fire(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Fire(StateMachine, StateMachine, StateMachine, StateMachine)
  nameWithType: SMReflection.Fire(StateMachine, StateMachine, StateMachine, StateMachine)
  fullName: Danmokou.SM.SMReflection.Fire(Danmokou.SM.StateMachine, Danmokou.SM.StateMachine, Danmokou.SM.StateMachine, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: Fire
    path: ''
    startLine: 17962
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM Fire(StateMachine freeFire, StateMachine freeCancel, StateMachine focusFire, StateMachine focusCancel)
    parameters:
    - id: freeFire
      type: Danmokou.SM.StateMachine
    - id: freeCancel
      type: Danmokou.SM.StateMachine
    - id: focusFire
      type: Danmokou.SM.StateMachine
    - id: focusCancel
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Fire(freeFire As StateMachine, freeCancel As StateMachine, focusFire As StateMachine, focusCancel As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Fire*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.FireSame(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  commentId: M:Danmokou.SM.SMReflection.FireSame(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  id: FireSame(Danmokou.SM.StateMachine,Danmokou.SM.StateMachine)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: FireSame(StateMachine, StateMachine)
  nameWithType: SMReflection.FireSame(StateMachine, StateMachine)
  fullName: Danmokou.SM.SMReflection.FireSame(Danmokou.SM.StateMachine, Danmokou.SM.StateMachine)
  type: Method
  source:
    id: FireSame
    path: ''
    startLine: 17998
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM FireSame(StateMachine fire, StateMachine cancel)
    parameters:
    - id: fire
      type: Danmokou.SM.StateMachine
    - id: cancel
      type: Danmokou.SM.StateMachine
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function FireSame(fire As StateMachine, cancel As StateMachine) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.FireSame*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.AssertSimple(System.String)
  commentId: M:Danmokou.SM.SMReflection.AssertSimple(System.String)
  id: AssertSimple(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: AssertSimple(String)
  nameWithType: SMReflection.AssertSimple(String)
  fullName: Danmokou.SM.SMReflection.AssertSimple(System.String)
  type: Method
  source:
    id: AssertSimple
    path: ''
    startLine: 18015
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM AssertSimple(string p_pool)
    parameters:
    - id: p_pool
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function AssertSimple(p_pool As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.AssertSimple*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.AssertComplex(System.String)
  commentId: M:Danmokou.SM.SMReflection.AssertComplex(System.String)
  id: AssertComplex(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: AssertComplex(String)
  nameWithType: SMReflection.AssertComplex(String)
  fullName: Danmokou.SM.SMReflection.AssertComplex(System.String)
  type: Method
  source:
    id: AssertComplex
    path: ''
    startLine: 18020
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public static ReflectableLASM AssertComplex(string p_pool)
    parameters:
    - id: p_pool
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function AssertComplex(p_pool As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.AssertComplex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Debug(System.String)
  commentId: M:Danmokou.SM.SMReflection.Debug(System.String)
  id: Debug(System.String)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Debug(String)
  nameWithType: SMReflection.Debug(String)
  fullName: Danmokou.SM.SMReflection.Debug(System.String)
  type: Method
  source:
    id: Debug
    path: ''
    startLine: 18032
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nPrint a message to the console.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Debug(string debug)
    parameters:
    - id: debug
      type: System.String
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Debug(debug As String) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Debug*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.SM.SMReflection.Print``1(GCXF{``0})
  commentId: M:Danmokou.SM.SMReflection.Print``1(GCXF{``0})
  id: Print``1(GCXF{``0})
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: Print<T>(GCXF<T>)
  nameWithType: SMReflection.Print<T>(GCXF<T>)
  fullName: Danmokou.SM.SMReflection.Print<T>(GCXF<T>)
  type: Method
  source:
    id: Print
    path: ''
    startLine: 18041
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nPrint a value to the console.\n"
  example: []
  syntax:
    content: public static ReflectableLASM Print<T>(GCXF<T> val)
    parameters:
    - id: val
      type: GCXF{{T}}
    typeParameters:
    - id: T
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function Print(Of T)(val As GCXF(Of T)) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.Print*
  nameWithType.vb: SMReflection.Print(Of T)(GCXF(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.Print(Of T)(GCXF(Of T))
  name.vb: Print(Of T)(GCXF(Of T))
- uid: Danmokou.SM.SMReflection.PlayerVariant(System.ValueTuple{System.String,Danmokou.SM.StateMachine}[])
  commentId: M:Danmokou.SM.SMReflection.PlayerVariant(System.ValueTuple{System.String,Danmokou.SM.StateMachine}[])
  id: PlayerVariant(System.ValueTuple{System.String,Danmokou.SM.StateMachine}[])
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: PlayerVariant((String key, StateMachine exec)[])
  nameWithType: SMReflection.PlayerVariant((String key, StateMachine exec)[])
  fullName: Danmokou.SM.SMReflection.PlayerVariant(System.ValueTuple<System.String, Danmokou.SM.StateMachine>[])
  type: Method
  source:
    id: PlayerVariant
    path: ''
    startLine: 18051
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nSelect one of several state machines depending on which player is currently in use.\nDisambiguates based on the &quot;key&quot; property of the PlayerConfig.\n"
  example: []
  syntax:
    content: public static ReflectableLASM PlayerVariant((string key, StateMachine exec)[] options)
    parameters:
    - id: options
      type: System.ValueTuple{System.String,Danmokou.SM.StateMachine}[]
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function PlayerVariant(options As(key As String, exec As StateMachine)(Of String , StateMachine)()) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.PlayerVariant*
  nameWithType.vb: SMReflection.PlayerVariant((key As String, exec As StateMachine)(Of String, StateMachine)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.SM.SMReflection.PlayerVariant(System.ValueTuple(Of System.String, Danmokou.SM.StateMachine)())
  name.vb: PlayerVariant((key As String, exec As StateMachine)(Of String, StateMachine)())
- uid: Danmokou.SM.SMReflection.LifeToScore(System.Int32)
  commentId: M:Danmokou.SM.SMReflection.LifeToScore(System.Int32)
  id: LifeToScore(System.Int32)
  parent: Danmokou.SM.SMReflection
  langs:
  - csharp
  - vb
  name: LifeToScore(Int32)
  nameWithType: SMReflection.LifeToScore(Int32)
  fullName: Danmokou.SM.SMReflection.LifeToScore(System.Int32)
  type: Method
  source:
    id: LifeToScore
    path: ''
    startLine: 18067
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nConvert excess health to score at the given rate.\nThis is done with SFX over time and will not return immediately.\n"
  example: []
  syntax:
    content: public static ReflectableLASM LifeToScore(int value)
    parameters:
    - id: value
      type: System.Int32
    return:
      type: Danmokou.SM.ReflectableLASM
    content.vb: Public Shared Function LifeToScore(value As Integer) As ReflectableLASM
  overload: Danmokou.SM.SMReflection.LifeToScore*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Danmokou.SM
  commentId: N:Danmokou.SM
  name: Danmokou.SM
  nameWithType: Danmokou.SM
  fullName: Danmokou.SM
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.SM.SMReflection.Crosshair*
  commentId: Overload:Danmokou.SM.SMReflection.Crosshair
  name: Crosshair
  nameWithType: SMReflection.Crosshair
  fullName: Danmokou.SM.SMReflection.Crosshair
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: GCXF{Vector2}
  commentId: '!:GCXF{Vector2}'
  definition: GCXF`1
  name: GCXF<Vector2>
  nameWithType: GCXF<Vector2>
  fullName: GCXF<Vector2>
  nameWithType.vb: GCXF(Of Vector2)
  fullName.vb: GCXF(Of Vector2)
  name.vb: GCXF(Of Vector2)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GCXF{System.Single}
  commentId: '!:GCXF{System.Single}'
  definition: GCXF`1
  name: GCXF<Single>
  nameWithType: GCXF<Single>
  fullName: GCXF<System.Single>
  nameWithType.vb: GCXF(Of Single)
  fullName.vb: GCXF(Of System.Single)
  name.vb: GCXF(Of Single)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReflectEx.Hoist{Vector2}
  commentId: '!:ReflectEx.Hoist{Vector2}'
  definition: ReflectEx.Hoist`1
  name: ReflectEx.Hoist<Vector2>
  nameWithType: ReflectEx.Hoist<Vector2>
  fullName: ReflectEx.Hoist<Vector2>
  nameWithType.vb: ReflectEx.Hoist(Of Vector2)
  fullName.vb: ReflectEx.Hoist(Of Vector2)
  name.vb: ReflectEx.Hoist(Of Vector2)
  spec.csharp:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ExBPY
  isExternal: true
  name: ExBPY
  nameWithType: ExBPY
  fullName: ExBPY
- uid: Danmokou.SM.ReflectableLASM
  commentId: T:Danmokou.SM.ReflectableLASM
  parent: Danmokou.SM
  name: ReflectableLASM
  nameWithType: ReflectableLASM
  fullName: Danmokou.SM.ReflectableLASM
- uid: GCXF`1
  isExternal: true
  name: GCXF<>
  nameWithType: GCXF<>
  fullName: GCXF<>
  nameWithType.vb: GCXF(Of )
  fullName.vb: GCXF(Of )
  name.vb: GCXF(Of )
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ReflectEx.Hoist`1
  isExternal: true
  name: ReflectEx.Hoist<>
  nameWithType: ReflectEx.Hoist<>
  fullName: ReflectEx.Hoist<>
  nameWithType.vb: ReflectEx.Hoist(Of )
  fullName.vb: ReflectEx.Hoist(Of )
  name.vb: ReflectEx.Hoist(Of )
  spec.csharp:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.dZaWarudo*
  commentId: Overload:Danmokou.SM.SMReflection.dZaWarudo
  name: dZaWarudo
  nameWithType: SMReflection.dZaWarudo
  fullName: Danmokou.SM.SMReflection.dZaWarudo
- uid: Danmokou.SM.SMReflection.ZaWarudo*
  commentId: Overload:Danmokou.SM.SMReflection.ZaWarudo
  name: ZaWarudo
  nameWithType: SMReflection.ZaWarudo
  fullName: Danmokou.SM.SMReflection.ZaWarudo
- uid: System.Nullable{GCXF{System.Single}}
  commentId: T:System.Nullable{GCXF{System.Single}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<GCXF<Single>>
  nameWithType: Nullable<GCXF<Single>>
  fullName: System.Nullable<GCXF<System.Single>>
  nameWithType.vb: Nullable(Of GCXF(Of Single))
  fullName.vb: System.Nullable(Of GCXF(Of System.Single))
  name.vb: Nullable(Of GCXF(Of Single))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.ScreenClear*
  commentId: Overload:Danmokou.SM.SMReflection.ScreenClear
  name: ScreenClear
  nameWithType: SMReflection.ScreenClear
  fullName: Danmokou.SM.SMReflection.ScreenClear
- uid: Danmokou.SM.SMReflection.dBossExplode*
  commentId: Overload:Danmokou.SM.SMReflection.dBossExplode
  name: dBossExplode
  nameWithType: SMReflection.dBossExplode
  fullName: Danmokou.SM.SMReflection.dBossExplode
- uid: TP4
  isExternal: true
  name: TP4
  nameWithType: TP4
  fullName: TP4
- uid: Danmokou.SM.SMReflection.Effect*
  commentId: Overload:Danmokou.SM.SMReflection.Effect
  name: Effect
  nameWithType: SMReflection.Effect
  fullName: Danmokou.SM.SMReflection.Effect
- uid: Danmokou.SM.SMReflection.SkipTime*
  commentId: Overload:Danmokou.SM.SMReflection.SkipTime
  name: SkipTime
  nameWithType: SMReflection.SkipTime
  fullName: Danmokou.SM.SMReflection.SkipTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Danmokou.SM.SMReflection.Raiko*
  commentId: Overload:Danmokou.SM.SMReflection.Raiko
  name: Raiko
  nameWithType: SMReflection.Raiko
  fullName: Danmokou.SM.SMReflection.Raiko
- uid: FXY
  isExternal: true
  name: FXY
  nameWithType: FXY
  fullName: FXY
- uid: Danmokou.SM.SMReflection.dRaiko*
  commentId: Overload:Danmokou.SM.SMReflection.dRaiko
  name: dRaiko
  nameWithType: SMReflection.dRaiko
  fullName: Danmokou.SM.SMReflection.dRaiko
- uid: Danmokou.SM.SMReflection.SeijaX*
  commentId: Overload:Danmokou.SM.SMReflection.SeijaX
  name: SeijaX
  nameWithType: SMReflection.SeijaX
  fullName: Danmokou.SM.SMReflection.SeijaX
- uid: Danmokou.SM.SMReflection.SeijaY*
  commentId: Overload:Danmokou.SM.SMReflection.SeijaY
  name: SeijaY
  nameWithType: SMReflection.SeijaY
  fullName: Danmokou.SM.SMReflection.SeijaY
- uid: Danmokou.SM.SMReflection.StageAnnounce*
  commentId: Overload:Danmokou.SM.SMReflection.StageAnnounce
  name: StageAnnounce
  nameWithType: SMReflection.StageAnnounce
  fullName: Danmokou.SM.SMReflection.StageAnnounce
- uid: Danmokou.SM.SMReflection.StageDeannounce*
  commentId: Overload:Danmokou.SM.SMReflection.StageDeannounce
  name: StageDeannounce
  nameWithType: SMReflection.StageDeannounce
  fullName: Danmokou.SM.SMReflection.StageDeannounce
- uid: Danmokou.SM.SMReflection.NoOp*
  commentId: Overload:Danmokou.SM.SMReflection.NoOp
  name: NoOp
  nameWithType: SMReflection.NoOp
  fullName: Danmokou.SM.SMReflection.NoOp
- uid: Danmokou.SM.SMReflection.Boss*
  commentId: Overload:Danmokou.SM.SMReflection.Boss
  name: Boss
  nameWithType: SMReflection.Boss
  fullName: Danmokou.SM.SMReflection.Boss
- uid: Danmokou.SM.SMReflection.Exec*
  commentId: Overload:Danmokou.SM.SMReflection.Exec
  name: Exec
  nameWithType: SMReflection.Exec
  fullName: Danmokou.SM.SMReflection.Exec
- uid: ErasedGCXF
  isExternal: true
  name: ErasedGCXF
  nameWithType: ErasedGCXF
  fullName: ErasedGCXF
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Danmokou.SM.SMReflection.Wrap*
  commentId: Overload:Danmokou.SM.SMReflection.Wrap
  name: Wrap
  nameWithType: SMReflection.Wrap
  fullName: Danmokou.SM.SMReflection.Wrap
- uid: GCXF{Danmokou.SM.StateMachine}
  commentId: '!:GCXF{Danmokou.SM.StateMachine}'
  definition: GCXF`1
  name: GCXF<StateMachine>
  nameWithType: GCXF<StateMachine>
  fullName: GCXF<Danmokou.SM.StateMachine>
  nameWithType.vb: GCXF(Of StateMachine)
  fullName.vb: GCXF(Of Danmokou.SM.StateMachine)
  name.vb: GCXF(Of StateMachine)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.Wait*
  commentId: Overload:Danmokou.SM.SMReflection.Wait
  name: Wait
  nameWithType: SMReflection.Wait
  fullName: Danmokou.SM.SMReflection.Wait
- uid: Danmokou.SM.Synchronizer
  commentId: T:Danmokou.SM.Synchronizer
  parent: Danmokou.SM
  name: Synchronizer
  nameWithType: Synchronizer
  fullName: Danmokou.SM.Synchronizer
- uid: Danmokou.SM.SMReflection.Delay*
  commentId: Overload:Danmokou.SM.SMReflection.Delay
  name: Delay
  nameWithType: SMReflection.Delay
  fullName: Danmokou.SM.SMReflection.Delay
- uid: Danmokou.SM.StateMachine
  commentId: T:Danmokou.SM.StateMachine
  parent: Danmokou.SM
  name: StateMachine
  nameWithType: StateMachine
  fullName: Danmokou.SM.StateMachine
- uid: Danmokou.SM.SMReflection.ThenDelay*
  commentId: Overload:Danmokou.SM.SMReflection.ThenDelay
  name: ThenDelay
  nameWithType: SMReflection.ThenDelay
  fullName: Danmokou.SM.SMReflection.ThenDelay
- uid: Danmokou.SM.SMReflection.RunDelay*
  commentId: Overload:Danmokou.SM.SMReflection.RunDelay
  name: RunDelay
  nameWithType: SMReflection.RunDelay
  fullName: Danmokou.SM.SMReflection.RunDelay
- uid: Danmokou.SM.SMReflection.ExecuteVN*
  commentId: Overload:Danmokou.SM.SMReflection.ExecuteVN
  name: ExecuteVN
  nameWithType: SMReflection.ExecuteVN
  fullName: Danmokou.SM.SMReflection.ExecuteVN
- uid: System.Func{DMKVNState,Task}
  commentId: T:System.Func{DMKVNState,Task}
  parent: System
  definition: System.Func`2
  name: Func<DMKVNState, Task>
  nameWithType: Func<DMKVNState, Task>
  fullName: System.Func<DMKVNState, Task>
  nameWithType.vb: Func(Of DMKVNState, Task)
  fullName.vb: System.Func(Of DMKVNState, Task)
  name.vb: Func(Of DMKVNState, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DMKVNState
    name: DMKVNState
    nameWithType: DMKVNState
    fullName: DMKVNState
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DMKVNState
    name: DMKVNState
    nameWithType: DMKVNState
    fullName: DMKVNState
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.Async*
  commentId: Overload:Danmokou.SM.SMReflection.Async
  name: Async
  nameWithType: SMReflection.Async
  fullName: Danmokou.SM.SMReflection.Async
- uid: GCXF{V2RV2}
  commentId: '!:GCXF{V2RV2}'
  definition: GCXF`1
  name: GCXF<V2RV2>
  nameWithType: GCXF<V2RV2>
  fullName: GCXF<V2RV2>
  nameWithType.vb: GCXF(Of V2RV2)
  fullName.vb: GCXF(Of V2RV2)
  name.vb: GCXF(Of V2RV2)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: V2RV2
    name: V2RV2
    nameWithType: V2RV2
    fullName: V2RV2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: V2RV2
    name: V2RV2
    nameWithType: V2RV2
    fullName: V2RV2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AsyncPattern
  commentId: '!:AsyncPattern'
  isExternal: true
  name: AsyncPattern
  nameWithType: AsyncPattern
  fullName: AsyncPattern
- uid: Danmokou.SM.SMReflection.Sync*
  commentId: Overload:Danmokou.SM.SMReflection.Sync
  name: Sync
  nameWithType: SMReflection.Sync
  fullName: Danmokou.SM.SMReflection.Sync
- uid: SyncPattern
  commentId: '!:SyncPattern'
  isExternal: true
  name: SyncPattern
  nameWithType: SyncPattern
  fullName: SyncPattern
- uid: Danmokou.SM.SMReflection.CreateShot1*
  commentId: Overload:Danmokou.SM.SMReflection.CreateShot1
  name: CreateShot1
  nameWithType: SMReflection.CreateShot1
  fullName: Danmokou.SM.SMReflection.CreateShot1
- uid: V2RV2
  isExternal: true
  name: V2RV2
  nameWithType: V2RV2
  fullName: V2RV2
- uid: Danmokou.SM.SMReflection.CreateShot2*
  commentId: Overload:Danmokou.SM.SMReflection.CreateShot2
  name: CreateShot2
  nameWithType: SMReflection.CreateShot2
  fullName: Danmokou.SM.SMReflection.CreateShot2
- uid: Danmokou.SM.SMReflection.Dialogue*
  commentId: Overload:Danmokou.SM.SMReflection.Dialogue
  name: Dialogue
  nameWithType: SMReflection.Dialogue
  fullName: Danmokou.SM.SMReflection.Dialogue
- uid: Danmokou.SM.SMReflection.SFX*
  commentId: Overload:Danmokou.SM.SMReflection.SFX
  name: SFX
  nameWithType: SMReflection.SFX
  fullName: Danmokou.SM.SMReflection.SFX
- uid: Danmokou.SM.SMReflection.Save*
  commentId: Overload:Danmokou.SM.SMReflection.Save
  name: Save
  nameWithType: SMReflection.Save
  fullName: Danmokou.SM.SMReflection.Save
- uid: ReflectEx.Hoist{{T}}
  commentId: '!:ReflectEx.Hoist{``0}'
  definition: ReflectEx.Hoist`1
  name: ReflectEx.Hoist<T>
  nameWithType: ReflectEx.Hoist<T>
  fullName: ReflectEx.Hoist<T>
  nameWithType.vb: ReflectEx.Hoist(Of T)
  fullName.vb: ReflectEx.Hoist(Of T)
  name.vb: ReflectEx.Hoist(Of T)
  spec.csharp:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GCXF{{T}}
  commentId: '!:GCXF{``0}'
  definition: GCXF`1
  name: GCXF<T>
  nameWithType: GCXF<T>
  fullName: GCXF<T>
  nameWithType.vb: GCXF(Of T)
  fullName.vb: GCXF(Of T)
  name.vb: GCXF(Of T)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.BulletControl*
  commentId: Overload:Danmokou.SM.SMReflection.BulletControl
  name: BulletControl
  nameWithType: SMReflection.BulletControl
  fullName: Danmokou.SM.SMReflection.BulletControl
- uid: GCXF{System.Boolean}
  commentId: '!:GCXF{System.Boolean}'
  definition: GCXF`1
  name: GCXF<Boolean>
  nameWithType: GCXF<Boolean>
  fullName: GCXF<System.Boolean>
  nameWithType.vb: GCXF(Of Boolean)
  fullName.vb: GCXF(Of System.Boolean)
  name.vb: GCXF(Of Boolean)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: StyleSelector
  isExternal: true
  name: StyleSelector
  nameWithType: StyleSelector
  fullName: StyleSelector
- uid: BulletManager.cBulletControl
  commentId: '!:BulletManager.cBulletControl'
  isExternal: true
  name: BulletManager.cBulletControl
  nameWithType: BulletManager.cBulletControl
  fullName: BulletManager.cBulletControl
- uid: Danmokou.SM.SMReflection.BEHControl*
  commentId: Overload:Danmokou.SM.SMReflection.BEHControl
  name: BEHControl
  nameWithType: SMReflection.BEHControl
  fullName: Danmokou.SM.SMReflection.BEHControl
- uid: BehaviorEntity.cBEHControl
  commentId: '!:BehaviorEntity.cBEHControl'
  isExternal: true
  name: BehaviorEntity.cBEHControl
  nameWithType: BehaviorEntity.cBEHControl
  fullName: BehaviorEntity.cBEHControl
- uid: Danmokou.SM.SMReflection.LaserControl*
  commentId: Overload:Danmokou.SM.SMReflection.LaserControl
  name: LaserControl
  nameWithType: SMReflection.LaserControl
  fullName: Danmokou.SM.SMReflection.LaserControl
- uid: CurvedTileRenderLaser.cLaserControl
  commentId: '!:CurvedTileRenderLaser.cLaserControl'
  isExternal: true
  name: CurvedTileRenderLaser.cLaserControl
  nameWithType: CurvedTileRenderLaser.cLaserControl
  fullName: CurvedTileRenderLaser.cLaserControl
- uid: Danmokou.SM.SMReflection.PoolControl*
  commentId: Overload:Danmokou.SM.SMReflection.PoolControl
  name: PoolControl
  nameWithType: SMReflection.PoolControl
  fullName: Danmokou.SM.SMReflection.PoolControl
- uid: '{CF}'
  commentId: '!:CF'
  definition: CF
  name: CF
  nameWithType: CF
  fullName: CF
- uid: CF
  commentId: '!:CF'
  name: CF
  nameWithType: CF
  fullName: CF
- uid: Danmokou.SM.SMReflection.LoadSBTextures*
  commentId: Overload:Danmokou.SM.SMReflection.LoadSBTextures
  name: LoadSBTextures
  nameWithType: SMReflection.LoadSBTextures
  fullName: Danmokou.SM.SMReflection.LoadSBTextures
- uid: Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  commentId: M:Danmokou.SM.SMReflection.LoadSBTextures(StyleSelector)
  isExternal: true
- uid: Danmokou.SM.SMReflection.LoadBEHTextures*
  commentId: Overload:Danmokou.SM.SMReflection.LoadBEHTextures
  name: LoadBEHTextures
  nameWithType: SMReflection.LoadBEHTextures
  fullName: Danmokou.SM.SMReflection.LoadBEHTextures
- uid: Danmokou.SM.SMReflection.ShiftPhaseTo*
  commentId: Overload:Danmokou.SM.SMReflection.ShiftPhaseTo
  name: ShiftPhaseTo
  nameWithType: SMReflection.ShiftPhaseTo
  fullName: Danmokou.SM.SMReflection.ShiftPhaseTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Danmokou.SM.SMReflection.ShiftPhase*
  commentId: Overload:Danmokou.SM.SMReflection.ShiftPhase
  name: ShiftPhase
  nameWithType: SMReflection.ShiftPhase
  fullName: Danmokou.SM.SMReflection.ShiftPhase
- uid: Danmokou.SM.SMReflection.Cull*
  commentId: Overload:Danmokou.SM.SMReflection.Cull
  name: Cull
  nameWithType: SMReflection.Cull
  fullName: Danmokou.SM.SMReflection.Cull
- uid: Danmokou.SM.SMReflection.Poof*
  commentId: Overload:Danmokou.SM.SMReflection.Poof
  name: Poof
  nameWithType: SMReflection.Poof
  fullName: Danmokou.SM.SMReflection.Poof
- uid: Danmokou.SM.SMReflection.MoveWhile*
  commentId: Overload:Danmokou.SM.SMReflection.MoveWhile
  name: MoveWhile
  nameWithType: SMReflection.MoveWhile
  fullName: Danmokou.SM.SMReflection.MoveWhile
- uid: System.Nullable{Pred}
  commentId: T:System.Nullable{Pred}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Pred>
  nameWithType: Nullable<Pred>
  fullName: System.Nullable<Pred>
  nameWithType.vb: Nullable(Of Pred)
  fullName.vb: System.Nullable(Of Pred)
  name.vb: Nullable(Of Pred)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Pred
    name: Pred
    nameWithType: Pred
    fullName: Pred
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Pred
    name: Pred
    nameWithType: Pred
    fullName: Pred
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VTP
  isExternal: true
  name: VTP
  nameWithType: VTP
  fullName: VTP
- uid: Danmokou.SM.SMReflection.Move*
  commentId: Overload:Danmokou.SM.SMReflection.Move
  name: Move
  nameWithType: SMReflection.Move
  fullName: Danmokou.SM.SMReflection.Move
- uid: Danmokou.SM.SMReflection.MoveTarget*
  commentId: Overload:Danmokou.SM.SMReflection.MoveTarget
  name: MoveTarget
  nameWithType: SMReflection.MoveTarget
  fullName: Danmokou.SM.SMReflection.MoveTarget
- uid: System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}}
  commentId: T:System.Func{TExArgCtx,TEx{System.Func{System.Single,System.Single}}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<Func<Single, Single>>>
  nameWithType: Func<TExArgCtx, TEx<Func<Single, Single>>>
  fullName: System.Func<TExArgCtx, TEx<System.Func<System.Single, System.Single>>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of Func(Of Single, Single)))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of System.Func(Of System.Single, System.Single)))
  name.vb: Func(Of TExArgCtx, TEx(Of Func(Of Single, Single)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ExTP
  isExternal: true
  name: ExTP
  nameWithType: ExTP
  fullName: ExTP
- uid: Danmokou.SM.SMReflection.MoveWrap*
  commentId: Overload:Danmokou.SM.SMReflection.MoveWrap
  name: MoveWrap
  nameWithType: SMReflection.MoveWrap
  fullName: Danmokou.SM.SMReflection.MoveWrap
- uid: Danmokou.SM.SMReflection.MoveWrapFixedDelay*
  commentId: Overload:Danmokou.SM.SMReflection.MoveWrapFixedDelay
  name: MoveWrapFixedDelay
  nameWithType: SMReflection.MoveWrapFixedDelay
  fullName: Danmokou.SM.SMReflection.MoveWrapFixedDelay
- uid: Danmokou.SM.SMReflection.MoveWrapFixedDelayNB*
  commentId: Overload:Danmokou.SM.SMReflection.MoveWrapFixedDelayNB
  name: MoveWrapFixedDelayNB
  nameWithType: SMReflection.MoveWrapFixedDelayNB
  fullName: Danmokou.SM.SMReflection.MoveWrapFixedDelayNB
- uid: Danmokou.SM.SMReflection.IMoveWrap*
  commentId: Overload:Danmokou.SM.SMReflection.IMoveWrap
  name: IMoveWrap
  nameWithType: SMReflection.IMoveWrap
  fullName: Danmokou.SM.SMReflection.IMoveWrap
- uid: Danmokou.SM.SMReflection.Position*
  commentId: Overload:Danmokou.SM.SMReflection.Position
  name: Position
  nameWithType: SMReflection.Position
  fullName: Danmokou.SM.SMReflection.Position
- uid: Danmokou.SM.SMReflection.Pos*
  commentId: Overload:Danmokou.SM.SMReflection.Pos
  name: Pos
  nameWithType: SMReflection.Pos
  fullName: Danmokou.SM.SMReflection.Pos
- uid: Danmokou.SM.SMReflection.DivertHP*
  commentId: Overload:Danmokou.SM.SMReflection.DivertHP
  name: DivertHP
  nameWithType: SMReflection.DivertHP
  fullName: Danmokou.SM.SMReflection.DivertHP
- uid: GCXF{BehaviorEntity}
  commentId: '!:GCXF{BehaviorEntity}'
  definition: GCXF`1
  name: GCXF<BehaviorEntity>
  nameWithType: GCXF<BehaviorEntity>
  fullName: GCXF<BehaviorEntity>
  nameWithType.vb: GCXF(Of BehaviorEntity)
  fullName.vb: GCXF(Of BehaviorEntity)
  name.vb: GCXF(Of BehaviorEntity)
  spec.csharp:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GCXF`1
    name: GCXF
    nameWithType: GCXF
    fullName: GCXF
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SMReflection.Vulnerable*
  commentId: Overload:Danmokou.SM.SMReflection.Vulnerable
  name: Vulnerable
  nameWithType: SMReflection.Vulnerable
  fullName: Danmokou.SM.SMReflection.Vulnerable
- uid: Danmokou.SM.SMReflection.VulnerableAfter*
  commentId: Overload:Danmokou.SM.SMReflection.VulnerableAfter
  name: VulnerableAfter
  nameWithType: SMReflection.VulnerableAfter
  fullName: Danmokou.SM.SMReflection.VulnerableAfter
- uid: Danmokou.SM.SMReflection.FadeSprite*
  commentId: Overload:Danmokou.SM.SMReflection.FadeSprite
  name: FadeSprite
  nameWithType: SMReflection.FadeSprite
  fullName: Danmokou.SM.SMReflection.FadeSprite
- uid: BPY
  isExternal: true
  name: BPY
  nameWithType: BPY
  fullName: BPY
- uid: Danmokou.SM.SMReflection.Scale*
  commentId: Overload:Danmokou.SM.SMReflection.Scale
  name: Scale
  nameWithType: SMReflection.Scale
  fullName: Danmokou.SM.SMReflection.Scale
- uid: Danmokou.SM.SMReflection.Slowdown*
  commentId: Overload:Danmokou.SM.SMReflection.Slowdown
  name: Slowdown
  nameWithType: SMReflection.Slowdown
  fullName: Danmokou.SM.SMReflection.Slowdown
- uid: Danmokou.SM.SMReflection.SlowdownFor*
  commentId: Overload:Danmokou.SM.SMReflection.SlowdownFor
  name: SlowdownFor
  nameWithType: SMReflection.SlowdownFor
  fullName: Danmokou.SM.SMReflection.SlowdownFor
- uid: Danmokou.SM.SMReflection.DangerBot*
  commentId: Overload:Danmokou.SM.SMReflection.DangerBot
  name: DangerBot
  nameWithType: SMReflection.DangerBot
  fullName: Danmokou.SM.SMReflection.DangerBot
- uid: Danmokou.SM.SMReflection.DangerTop*
  commentId: Overload:Danmokou.SM.SMReflection.DangerTop
  name: DangerTop
  nameWithType: SMReflection.DangerTop
  fullName: Danmokou.SM.SMReflection.DangerTop
- uid: Danmokou.SM.SMReflection.DangerLeft*
  commentId: Overload:Danmokou.SM.SMReflection.DangerLeft
  name: DangerLeft
  nameWithType: SMReflection.DangerLeft
  fullName: Danmokou.SM.SMReflection.DangerLeft
- uid: Danmokou.SM.SMReflection.DangerRight*
  commentId: Overload:Danmokou.SM.SMReflection.DangerRight
  name: DangerRight
  nameWithType: SMReflection.DangerRight
  fullName: Danmokou.SM.SMReflection.DangerRight
- uid: Danmokou.SM.SMReflection.DangerLeft2*
  commentId: Overload:Danmokou.SM.SMReflection.DangerLeft2
  name: DangerLeft2
  nameWithType: SMReflection.DangerLeft2
  fullName: Danmokou.SM.SMReflection.DangerLeft2
- uid: Danmokou.SM.SMReflection.DangerRight2*
  commentId: Overload:Danmokou.SM.SMReflection.DangerRight2
  name: DangerRight2
  nameWithType: SMReflection.DangerRight2
  fullName: Danmokou.SM.SMReflection.DangerRight2
- uid: Danmokou.SM.SMReflection.Fire*
  commentId: Overload:Danmokou.SM.SMReflection.Fire
  name: Fire
  nameWithType: SMReflection.Fire
  fullName: Danmokou.SM.SMReflection.Fire
- uid: Danmokou.SM.SMReflection.FireSame*
  commentId: Overload:Danmokou.SM.SMReflection.FireSame
  name: FireSame
  nameWithType: SMReflection.FireSame
  fullName: Danmokou.SM.SMReflection.FireSame
- uid: Danmokou.SM.SMReflection.AssertSimple*
  commentId: Overload:Danmokou.SM.SMReflection.AssertSimple
  name: AssertSimple
  nameWithType: SMReflection.AssertSimple
  fullName: Danmokou.SM.SMReflection.AssertSimple
- uid: Danmokou.SM.SMReflection.AssertComplex*
  commentId: Overload:Danmokou.SM.SMReflection.AssertComplex
  name: AssertComplex
  nameWithType: SMReflection.AssertComplex
  fullName: Danmokou.SM.SMReflection.AssertComplex
- uid: Danmokou.SM.SMReflection.Debug*
  commentId: Overload:Danmokou.SM.SMReflection.Debug
  name: Debug
  nameWithType: SMReflection.Debug
  fullName: Danmokou.SM.SMReflection.Debug
- uid: Danmokou.SM.SMReflection.Print*
  commentId: Overload:Danmokou.SM.SMReflection.Print
  name: Print
  nameWithType: SMReflection.Print
  fullName: Danmokou.SM.SMReflection.Print
- uid: Danmokou.SM.SMReflection.PlayerVariant*
  commentId: Overload:Danmokou.SM.SMReflection.PlayerVariant
  name: PlayerVariant
  nameWithType: SMReflection.PlayerVariant
  fullName: Danmokou.SM.SMReflection.PlayerVariant
- uid: System.ValueTuple{System.String,Danmokou.SM.StateMachine}[]
  isExternal: true
  name: (T1, T2)<String, StateMachine>[]
  nameWithType: (T1, T2)<String, StateMachine>[]
  fullName: System.ValueTuple<System.String, Danmokou.SM.StateMachine>[]
  nameWithType.vb: (T1, T2)(Of String, StateMachine)()
  fullName.vb: System.ValueTuple(Of System.String, Danmokou.SM.StateMachine)()
  name.vb: (T1, T2)(Of String, StateMachine)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.SM.SMReflection.LifeToScore*
  commentId: Overload:Danmokou.SM.SMReflection.LifeToScore
  name: LifeToScore
  nameWithType: SMReflection.LifeToScore
  fullName: Danmokou.SM.SMReflection.LifeToScore
