### YamlMime:ManagedReference
items:
- uid: Danmokou.DMath.GCXU`1
  commentId: T:Danmokou.DMath.GCXU`1
  id: GCXU`1
  parent: Danmokou.DMath
  children:
  - Danmokou.DMath.GCXU`1.#ctor(List{System.ValueTuple{System.Type,System.String}},System.Func{ConstructedType,`0})
  - Danmokou.DMath.GCXU`1.CompileDelegate
  - Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData)
  - Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData@)
  - Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData,ConstructedType)
  - Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData@,ConstructedType)
  langs:
  - csharp
  - vb
  name: GCXU<Fn>
  nameWithType: GCXU<Fn>
  fullName: Danmokou.DMath.GCXU<Fn>
  type: Class
  source:
    id: GCXU
    path: ''
    startLine: 7206
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nA wrapper type used to upload values from a GCX to private data hoisting before providing a delegate to a new object.\n<br />It is recommended to call <xref href=\"Danmokou.DMath.GCXU.CompileDelegate\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> immediately after construction, as this avoids compiling expressions or types during gameplay, and is also required for AOT support.\n"
  example: []
  syntax:
    content: 'public class GCXU<Fn> : GCXU, IEquatable<GCXU>, IEquatable<GCXU<Fn>>'
    typeParameters:
    - id: Fn
      description: Delegate type (eg. TP, BPY, Pred)
    content.vb: >-
      Public Class GCXU(Of Fn)
          Inherits GCXU
          Implements IEquatable(Of GCXU), IEquatable(Of GCXU(Of Fn))
  inheritance:
  - System.Object
  - Danmokou.DMath.GCXU
  implements:
  - System.IEquatable{Danmokou.DMath.GCXU}
  - System.IEquatable{Danmokou.DMath.GCXU`1}
  inheritedMembers:
  - Danmokou.DMath.GCXU.BoundAliases
  - Danmokou.DMath.GCXU.CustomDataType
  - Danmokou.DMath.GCXU.CompileCustomDataType
  - Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  - Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  - Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: GCXU(Of Fn)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Danmokou.DMath.GCXU(Of Fn)
  name.vb: GCXU(Of Fn)
- uid: Danmokou.DMath.GCXU`1.#ctor(List{System.ValueTuple{System.Type,System.String}},System.Func{ConstructedType,`0})
  commentId: M:Danmokou.DMath.GCXU`1.#ctor(List{System.ValueTuple{System.Type,System.String}},System.Func{ConstructedType,`0})
  id: '#ctor(List{System.ValueTuple{System.Type,System.String}},System.Func{ConstructedType,`0})'
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: GCXU(List<(Type, String)>, Func<ConstructedType, Fn>)
  nameWithType: GCXU<Fn>.GCXU(List<(Type, String)>, Func<ConstructedType, Fn>)
  fullName: Danmokou.DMath.GCXU<Fn>.GCXU(List<System.ValueTuple<System.Type, System.String>>, System.Func<ConstructedType, Fn>)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 7206
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  example: []
  syntax:
    content: public GCXU(List<(Type, string)> BoundAliases, Func<ConstructedType, Fn> LazyDelegate)
    parameters:
    - id: BoundAliases
      type: List{System.ValueTuple{System.Type,System.String}}
    - id: LazyDelegate
      type: System.Func{ConstructedType,{Fn}}
    content.vb: Public Sub New(BoundAliases As List(Of(Type, String)(Of Type , String)), LazyDelegate As Func(Of ConstructedType, Fn))
  overload: Danmokou.DMath.GCXU`1.#ctor*
  nameWithType.vb: GCXU(Of Fn).GCXU(List(Of (Type, String)(Of Type, String)), Func(Of ConstructedType, Fn))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).GCXU(List(Of System.ValueTuple(Of System.Type, System.String)), System.Func(Of ConstructedType, Fn))
  name.vb: GCXU(List(Of (Type, String)(Of Type, String)), Func(Of ConstructedType, Fn))
- uid: Danmokou.DMath.GCXU`1.CompileDelegate
  commentId: M:Danmokou.DMath.GCXU`1.CompileDelegate
  id: CompileDelegate
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: CompileDelegate()
  nameWithType: GCXU<Fn>.CompileDelegate()
  fullName: Danmokou.DMath.GCXU<Fn>.CompileDelegate()
  type: Method
  source:
    id: CompileDelegate
    path: ''
    startLine: 7215
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCompile the delegate for this GCXU, using the custom data type that is already set or automatically determining it\nvia <xref href=\"Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n<br />After this is called, the custom data type cannot be changed.\n"
  example: []
  syntax:
    content: public override void CompileDelegate()
    content.vb: Public Overrides Sub CompileDelegate
  overridden: Danmokou.DMath.GCXU.CompileDelegate
  overload: Danmokou.DMath.GCXU`1.CompileDelegate*
  nameWithType.vb: GCXU(Of Fn).CompileDelegate()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).CompileDelegate()
- uid: Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData)
  commentId: M:Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData)
  id: Execute(GenCtx,Danmokou.DMath.PICustomData)
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: Execute(GenCtx, PICustomData)
  nameWithType: GCXU<Fn>.Execute(GenCtx, PICustomData)
  fullName: Danmokou.DMath.GCXU<Fn>.Execute(GenCtx, Danmokou.DMath.PICustomData)
  type: Method
  source:
    id: Execute
    path: ''
    startLine: 7242
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nWhen a FiringCtx already exists, write bound values to it\nand then return the delegate.\n"
  example: []
  syntax:
    content: public Fn Execute(GenCtx gcx, PICustomData fctx)
    parameters:
    - id: gcx
      type: GenCtx
    - id: fctx
      type: Danmokou.DMath.PICustomData
    return:
      type: '{Fn}'
    content.vb: Public Function Execute(gcx As GenCtx, fctx As PICustomData) As Fn
  overload: Danmokou.DMath.GCXU`1.Execute*
  nameWithType.vb: GCXU(Of Fn).Execute(GenCtx, PICustomData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).Execute(GenCtx, Danmokou.DMath.PICustomData)
- uid: Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData@)
  commentId: M:Danmokou.DMath.GCXU`1.Execute(GenCtx,Danmokou.DMath.PICustomData@)
  id: Execute(GenCtx,Danmokou.DMath.PICustomData@)
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: Execute(GenCtx, out PICustomData)
  nameWithType: GCXU<Fn>.Execute(GenCtx, out PICustomData)
  fullName: Danmokou.DMath.GCXU<Fn>.Execute(GenCtx, out Danmokou.DMath.PICustomData)
  type: Method
  source:
    id: Execute
    path: ''
    startLine: 7252
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate a new FiringCtx, write bound values to it,\nand then return the delegate.\n"
  example: []
  syntax:
    content: public Fn Execute(GenCtx gcx, out PICustomData fctx)
    parameters:
    - id: gcx
      type: GenCtx
    - id: fctx
      type: Danmokou.DMath.PICustomData
    return:
      type: '{Fn}'
    content.vb: Public Function Execute(gcx As GenCtx, ByRef fctx As PICustomData) As Fn
  overload: Danmokou.DMath.GCXU`1.Execute*
  nameWithType.vb: GCXU(Of Fn).Execute(GenCtx, ByRef PICustomData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).Execute(GenCtx, ByRef Danmokou.DMath.PICustomData)
  name.vb: Execute(GenCtx, ByRef PICustomData)
- uid: Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData,ConstructedType)
  commentId: M:Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData,ConstructedType)
  id: ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData,ConstructedType)
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: ExecuteWithType(GenCtx, PICustomData, ConstructedType)
  nameWithType: GCXU<Fn>.ExecuteWithType(GenCtx, PICustomData, ConstructedType)
  fullName: Danmokou.DMath.GCXU<Fn>.ExecuteWithType(GenCtx, Danmokou.DMath.PICustomData, ConstructedType)
  type: Method
  source:
    id: ExecuteWithType
    path: ''
    startLine: 7263
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nWhen a FiringCtx already exists, write bound values to it\nand then return the delegate.\nAlso asserts that the custom data can be provided by the given\n<see cref=\"!:ConstructedType\"></see>.\n"
  example: []
  syntax:
    content: public Fn ExecuteWithType(GenCtx gcx, PICustomData fctx, ConstructedType ct)
    parameters:
    - id: gcx
      type: GenCtx
    - id: fctx
      type: Danmokou.DMath.PICustomData
    - id: ct
      type: ConstructedType
    return:
      type: '{Fn}'
    content.vb: Public Function ExecuteWithType(gcx As GenCtx, fctx As PICustomData, ct As ConstructedType) As Fn
  overload: Danmokou.DMath.GCXU`1.ExecuteWithType*
  nameWithType.vb: GCXU(Of Fn).ExecuteWithType(GenCtx, PICustomData, ConstructedType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).ExecuteWithType(GenCtx, Danmokou.DMath.PICustomData, ConstructedType)
- uid: Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData@,ConstructedType)
  commentId: M:Danmokou.DMath.GCXU`1.ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData@,ConstructedType)
  id: ExecuteWithType(GenCtx,Danmokou.DMath.PICustomData@,ConstructedType)
  parent: Danmokou.DMath.GCXU`1
  langs:
  - csharp
  - vb
  name: ExecuteWithType(GenCtx, out PICustomData, ConstructedType)
  nameWithType: GCXU<Fn>.ExecuteWithType(GenCtx, out PICustomData, ConstructedType)
  fullName: Danmokou.DMath.GCXU<Fn>.ExecuteWithType(GenCtx, out Danmokou.DMath.PICustomData, ConstructedType)
  type: Method
  source:
    id: ExecuteWithType
    path: ''
    startLine: 7273
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate a new FiringCtx with the given <see cref=\"!:ConstructedType\"></see>,\nwrite bound values to it, and then return the delegate.\nAlso asserts that the custom data can be provided by the given\n<see cref=\"!:ConstructedType\"></see>.\n"
  example: []
  syntax:
    content: public Fn ExecuteWithType(GenCtx gcx, out PICustomData fctx, ConstructedType ct)
    parameters:
    - id: gcx
      type: GenCtx
    - id: fctx
      type: Danmokou.DMath.PICustomData
    - id: ct
      type: ConstructedType
    return:
      type: '{Fn}'
    content.vb: Public Function ExecuteWithType(gcx As GenCtx, ByRef fctx As PICustomData, ct As ConstructedType) As Fn
  overload: Danmokou.DMath.GCXU`1.ExecuteWithType*
  nameWithType.vb: GCXU(Of Fn).ExecuteWithType(GenCtx, ByRef PICustomData, ConstructedType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).ExecuteWithType(GenCtx, ByRef Danmokou.DMath.PICustomData, ConstructedType)
  name.vb: ExecuteWithType(GenCtx, ByRef PICustomData, ConstructedType)
references:
- uid: Danmokou.DMath
  commentId: N:Danmokou.DMath
  name: Danmokou.DMath
  nameWithType: Danmokou.DMath
  fullName: Danmokou.DMath
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Danmokou.DMath.GCXU
  commentId: T:Danmokou.DMath.GCXU
  parent: Danmokou.DMath
  name: GCXU
  nameWithType: GCXU
  fullName: Danmokou.DMath.GCXU
- uid: System.IEquatable{Danmokou.DMath.GCXU}
  commentId: T:System.IEquatable{Danmokou.DMath.GCXU}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<GCXU>
  nameWithType: IEquatable<GCXU>
  fullName: System.IEquatable<Danmokou.DMath.GCXU>
  nameWithType.vb: IEquatable(Of GCXU)
  fullName.vb: System.IEquatable(Of Danmokou.DMath.GCXU)
  name.vb: IEquatable(Of GCXU)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Danmokou.DMath.GCXU`1}
  commentId: T:System.IEquatable{Danmokou.DMath.GCXU`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<GCXU<Fn>>
  nameWithType: IEquatable<GCXU<Fn>>
  fullName: System.IEquatable<Danmokou.DMath.GCXU<Fn>>
  nameWithType.vb: IEquatable(Of GCXU(Of Fn))
  fullName.vb: System.IEquatable(Of Danmokou.DMath.GCXU(Of Fn))
  name.vb: IEquatable(Of GCXU(Of Fn))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Danmokou.DMath.GCXU`1
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: <
    nameWithType: <
    fullName: <
  - name: Fn
    nameWithType: Fn
    fullName: Fn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Danmokou.DMath.GCXU`1
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: Fn
    nameWithType: Fn
    fullName: Fn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.BoundAliases
  commentId: P:Danmokou.DMath.GCXU.BoundAliases
  parent: Danmokou.DMath.GCXU
  name: BoundAliases
  nameWithType: GCXU.BoundAliases
  fullName: Danmokou.DMath.GCXU.BoundAliases
- uid: Danmokou.DMath.GCXU.CustomDataType
  commentId: P:Danmokou.DMath.GCXU.CustomDataType
  parent: Danmokou.DMath.GCXU
  name: CustomDataType
  nameWithType: GCXU.CustomDataType
  fullName: Danmokou.DMath.GCXU.CustomDataType
- uid: Danmokou.DMath.GCXU.CompileCustomDataType
  commentId: M:Danmokou.DMath.GCXU.CompileCustomDataType
  parent: Danmokou.DMath.GCXU
  name: CompileCustomDataType()
  nameWithType: GCXU.CompileCustomDataType()
  fullName: Danmokou.DMath.GCXU.CompileCustomDataType()
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.CompileCustomDataType
    name: CompileCustomDataType
    nameWithType: GCXU.CompileCustomDataType
    fullName: Danmokou.DMath.GCXU.CompileCustomDataType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.CompileCustomDataType
    name: CompileCustomDataType
    nameWithType: GCXU.CompileCustomDataType
    fullName: Danmokou.DMath.GCXU.CompileCustomDataType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  commentId: M:Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  parent: Danmokou.DMath.GCXU
  isExternal: true
  name: SetNewCustomDataType(ConstructedType)
  nameWithType: GCXU.SetNewCustomDataType(ConstructedType)
  fullName: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
    name: SetNewCustomDataType
    nameWithType: GCXU.SetNewCustomDataType
    fullName: Danmokou.DMath.GCXU.SetNewCustomDataType
  - name: (
    nameWithType: (
    fullName: (
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.SetNewCustomDataType(ConstructedType)
    name: SetNewCustomDataType
    nameWithType: GCXU.SetNewCustomDataType
    fullName: Danmokou.DMath.GCXU.SetNewCustomDataType
  - name: (
    nameWithType: (
    fullName: (
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  commentId: M:Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  parent: Danmokou.DMath.GCXU
  name: ShareType(GCXU[])
  nameWithType: GCXU.ShareType(GCXU[])
  fullName: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
  nameWithType.vb: GCXU.ShareType(GCXU())
  fullName.vb: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU())
  name.vb: ShareType(GCXU())
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
    name: ShareType
    nameWithType: GCXU.ShareType
    fullName: Danmokou.DMath.GCXU.ShareType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.ShareType(Danmokou.DMath.GCXU[])
    name: ShareType
    nameWithType: GCXU.ShareType
    fullName: Danmokou.DMath.GCXU.ShareType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  commentId: M:Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  parent: Danmokou.DMath.GCXU
  name: ShareTypeAndCompile(GCXU[])
  nameWithType: GCXU.ShareTypeAndCompile(GCXU[])
  fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
  nameWithType.vb: GCXU.ShareTypeAndCompile(GCXU())
  fullName.vb: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU())
  name.vb: ShareTypeAndCompile(GCXU())
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
    name: ShareTypeAndCompile
    nameWithType: GCXU.ShareTypeAndCompile
    fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.ShareTypeAndCompile(Danmokou.DMath.GCXU[])
    name: ShareTypeAndCompile
    nameWithType: GCXU.ShareTypeAndCompile
    fullName: Danmokou.DMath.GCXU.ShareTypeAndCompile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.DMath.GCXU
    name: GCXU
    nameWithType: GCXU
    fullName: Danmokou.DMath.GCXU
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU`1.#ctor*
  commentId: Overload:Danmokou.DMath.GCXU`1.#ctor
  name: GCXU
  nameWithType: GCXU<Fn>.GCXU
  fullName: Danmokou.DMath.GCXU<Fn>.GCXU
  nameWithType.vb: GCXU(Of Fn).GCXU
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).GCXU
- uid: List{System.ValueTuple{System.Type,System.String}}
  commentId: '!:List{System.ValueTuple{System.Type,System.String}}'
  definition: List`1
  name: List<(T1, T2)<Type, String>>
  nameWithType: List<(T1, T2)<Type, String>>
  fullName: List<System.ValueTuple<System.Type, System.String>>
  nameWithType.vb: List(Of (T1, T2)(Of Type, String))
  fullName.vb: List(Of System.ValueTuple(Of System.Type, System.String))
  name.vb: List(Of (T1, T2)(Of Type, String))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{ConstructedType,{Fn}}
  commentId: T:System.Func{ConstructedType,`0}
  parent: System
  definition: System.Func`2
  name: Func<ConstructedType, Fn>
  nameWithType: Func<ConstructedType, Fn>
  fullName: System.Func<ConstructedType, Fn>
  nameWithType.vb: Func(Of ConstructedType, Fn)
  fullName.vb: System.Func(Of ConstructedType, Fn)
  name.vb: Func(Of ConstructedType, Fn)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Fn
    nameWithType: Fn
    fullName: Fn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ConstructedType
    name: ConstructedType
    nameWithType: ConstructedType
    fullName: ConstructedType
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: Fn
    nameWithType: Fn
    fullName: Fn
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU.CompileDelegate
  commentId: M:Danmokou.DMath.GCXU.CompileDelegate
  parent: Danmokou.DMath.GCXU
  name: CompileDelegate()
  nameWithType: GCXU.CompileDelegate()
  fullName: Danmokou.DMath.GCXU.CompileDelegate()
  spec.csharp:
  - uid: Danmokou.DMath.GCXU.CompileDelegate
    name: CompileDelegate
    nameWithType: GCXU.CompileDelegate
    fullName: Danmokou.DMath.GCXU.CompileDelegate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.DMath.GCXU.CompileDelegate
    name: CompileDelegate
    nameWithType: GCXU.CompileDelegate
    fullName: Danmokou.DMath.GCXU.CompileDelegate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.GCXU`1.CompileDelegate*
  commentId: Overload:Danmokou.DMath.GCXU`1.CompileDelegate
  name: CompileDelegate
  nameWithType: GCXU<Fn>.CompileDelegate
  fullName: Danmokou.DMath.GCXU<Fn>.CompileDelegate
  nameWithType.vb: GCXU(Of Fn).CompileDelegate
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).CompileDelegate
- uid: Danmokou.DMath.GCXU`1.Execute*
  commentId: Overload:Danmokou.DMath.GCXU`1.Execute
  name: Execute
  nameWithType: GCXU<Fn>.Execute
  fullName: Danmokou.DMath.GCXU<Fn>.Execute
  nameWithType.vb: GCXU(Of Fn).Execute
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).Execute
- uid: GenCtx
  isExternal: true
  name: GenCtx
  nameWithType: GenCtx
  fullName: GenCtx
- uid: Danmokou.DMath.PICustomData
  commentId: T:Danmokou.DMath.PICustomData
  parent: Danmokou.DMath
  name: PICustomData
  nameWithType: PICustomData
  fullName: Danmokou.DMath.PICustomData
- uid: '{Fn}'
  commentId: '!:Fn'
  definition: Fn
  name: Fn
  nameWithType: Fn
  fullName: Fn
- uid: Fn
  name: Fn
  nameWithType: Fn
  fullName: Fn
- uid: Danmokou.DMath.GCXU`1.ExecuteWithType*
  commentId: Overload:Danmokou.DMath.GCXU`1.ExecuteWithType
  name: ExecuteWithType
  nameWithType: GCXU<Fn>.ExecuteWithType
  fullName: Danmokou.DMath.GCXU<Fn>.ExecuteWithType
  nameWithType.vb: GCXU(Of Fn).ExecuteWithType
  fullName.vb: Danmokou.DMath.GCXU(Of Fn).ExecuteWithType
- uid: ConstructedType
  isExternal: true
  name: ConstructedType
  nameWithType: ConstructedType
  fullName: ConstructedType
