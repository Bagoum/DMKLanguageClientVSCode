### YamlMime:ManagedReference
items:
- uid: Danmokou.DMath.PIData
  commentId: T:Danmokou.DMath.PIData
  id: PIData
  parent: Danmokou.DMath
  children:
  - Danmokou.DMath.PIData.Allocated
  - Danmokou.DMath.PIData.boundFloats
  - Danmokou.DMath.PIData.boundInts
  - Danmokou.DMath.PIData.boundRV2s
  - Danmokou.DMath.PIData.boundV2s
  - Danmokou.DMath.PIData.boundV3s
  - Danmokou.DMath.PIData.bullet
  - Danmokou.DMath.PIData.Bullet
  - Danmokou.DMath.PIData.Cleared
  - Danmokou.DMath.PIData.Clone_NoAlloc
  - Danmokou.DMath.PIData.ContainsDynamic(TExArgCtx,System.Type,System.String)
  - Danmokou.DMath.PIData.ContainsDynamic``1(TExArgCtx,System.String)
  - Danmokou.DMath.PIData.Copied
  - Danmokou.DMath.PIData.CopyInto(Danmokou.DMath.PIData)
  - Danmokou.DMath.PIData.culledBulletTime
  - Danmokou.DMath.PIData.Dispose
  - Danmokou.DMath.PIData.Empty
  - Danmokou.DMath.PIData.envFrame
  - Danmokou.DMath.PIData.firer
  - Danmokou.DMath.PIData.Firer
  - Danmokou.DMath.PIData.GetDict(Expression,System.Type)
  - Danmokou.DMath.PIData.GetDynamicKey(System.Type,System.String)
  - Danmokou.DMath.PIData.GetIfDefined``1(TExArgCtx,System.String,System.Nullable{Ex})
  - Danmokou.DMath.PIData.GetValueDynamic``1(TExArgCtx,System.String,System.Nullable{TEx{``0}})
  - Danmokou.DMath.PIData.Laser
  - Danmokou.DMath.PIData.laserController
  - Danmokou.DMath.PIData.New(System.Nullable{System.ValueTuple{LexicalScope,GenCtx}})
  - Danmokou.DMath.PIData.NewUnscoped(System.Nullable{GenCtx})
  - Danmokou.DMath.PIData.OptionFirer
  - Danmokou.DMath.PIData.playerBullet
  - Danmokou.DMath.PIData.playerController
  - Danmokou.DMath.PIData.PlayerController
  - Danmokou.DMath.PIData.Popped
  - Danmokou.DMath.PIData.Recached
  - Danmokou.DMath.PIData.RevertToGCX(LexicalScope,BehaviorEntity)
  - Danmokou.DMath.PIData.SetValue(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  - Danmokou.DMath.PIData.SetValueDynamic(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  - Danmokou.DMath.PIData.SetValueDynamic``1(TExArgCtx,System.String,Expression)
  - Danmokou.DMath.PIData.UpdateFirer(System.Nullable{GenCtx})
  langs:
  - csharp
  - vb
  name: PIData
  nameWithType: PIData
  fullName: Danmokou.DMath.PIData
  type: Class
  source:
    id: PIData
    path: ''
    startLine: 7183
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nA class storing state information for bullets and other entities.\n<br />Contains a link to the environment frame where the bullet was created, which contains most relevant data.\n"
  example: []
  syntax:
    content: public class PIData
    content.vb: Public Class PIData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Danmokou.DMath.PIData.Empty
  commentId: F:Danmokou.DMath.PIData.Empty
  id: Empty
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: PIData.Empty
  fullName: Danmokou.DMath.PIData.Empty
  type: Field
  source:
    id: Empty
    path: ''
    startLine: 7184
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static readonly PIData Empty
    return:
      type: Danmokou.DMath.PIData
    content.vb: Public Shared ReadOnly Empty As PIData
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.GetDynamicKey(System.Type,System.String)
  commentId: M:Danmokou.DMath.PIData.GetDynamicKey(System.Type,System.String)
  id: GetDynamicKey(System.Type,System.String)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: GetDynamicKey(Type, String)
  nameWithType: PIData.GetDynamicKey(Type, String)
  fullName: Danmokou.DMath.PIData.GetDynamicKey(System.Type, System.String)
  type: Method
  source:
    id: GetDynamicKey
    path: ''
    startLine: 7191
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int GetDynamicKey(Type t, string name)
    parameters:
    - id: t
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function GetDynamicKey(t As Type, name As String) As Integer
  overload: Danmokou.DMath.PIData.GetDynamicKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.PIData.Allocated
  commentId: P:Danmokou.DMath.PIData.Allocated
  id: Allocated
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Allocated
  nameWithType: PIData.Allocated
  fullName: Danmokou.DMath.PIData.Allocated
  type: Property
  source:
    id: Allocated
    path: ''
    startLine: 7196
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int Allocated { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Allocated As Integer
  overload: Danmokou.DMath.PIData.Allocated*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.Popped
  commentId: P:Danmokou.DMath.PIData.Popped
  id: Popped
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Popped
  nameWithType: PIData.Popped
  fullName: Danmokou.DMath.PIData.Popped
  type: Property
  source:
    id: Popped
    path: ''
    startLine: 7197
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int Popped { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Popped As Integer
  overload: Danmokou.DMath.PIData.Popped*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.Recached
  commentId: P:Danmokou.DMath.PIData.Recached
  id: Recached
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Recached
  nameWithType: PIData.Recached
  fullName: Danmokou.DMath.PIData.Recached
  type: Property
  source:
    id: Recached
    path: ''
    startLine: 7198
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int Recached { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Recached As Integer
  overload: Danmokou.DMath.PIData.Recached*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.Copied
  commentId: P:Danmokou.DMath.PIData.Copied
  id: Copied
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Copied
  nameWithType: PIData.Copied
  fullName: Danmokou.DMath.PIData.Copied
  type: Property
  source:
    id: Copied
    path: ''
    startLine: 7199
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int Copied { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Copied As Integer
  overload: Danmokou.DMath.PIData.Copied*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.Cleared
  commentId: P:Danmokou.DMath.PIData.Cleared
  id: Cleared
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Cleared
  nameWithType: PIData.Cleared
  fullName: Danmokou.DMath.PIData.Cleared
  type: Property
  source:
    id: Cleared
    path: ''
    startLine: 7200
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static int Cleared { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Cleared As Integer
  overload: Danmokou.DMath.PIData.Cleared*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.PIData.culledBulletTime
  commentId: F:Danmokou.DMath.PIData.culledBulletTime
  id: culledBulletTime
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: culledBulletTime
  nameWithType: PIData.culledBulletTime
  fullName: Danmokou.DMath.PIData.culledBulletTime
  type: Field
  source:
    id: culledBulletTime
    path: ''
    startLine: 7204
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public float culledBulletTime
    return:
      type: System.Single
    content.vb: Public culledBulletTime As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.envFrame
  commentId: F:Danmokou.DMath.PIData.envFrame
  id: envFrame
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: envFrame
  nameWithType: PIData.envFrame
  fullName: Danmokou.DMath.PIData.envFrame
  type: Field
  source:
    id: envFrame
    path: ''
    startLine: 7208
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public EnvFrame envFrame
    return:
      type: EnvFrame
    content.vb: Public envFrame As EnvFrame
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.boundInts
  commentId: F:Danmokou.DMath.PIData.boundInts
  id: boundInts
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: boundInts
  nameWithType: PIData.boundInts
  fullName: Danmokou.DMath.PIData.boundInts
  type: Field
  source:
    id: boundInts
    path: ''
    startLine: 7211
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public readonly Dictionary<int, int> boundInts
    return:
      type: Dictionary{System.Int32,System.Int32}
    content.vb: Public ReadOnly boundInts As Dictionary(Of Integer, Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.boundFloats
  commentId: F:Danmokou.DMath.PIData.boundFloats
  id: boundFloats
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: boundFloats
  nameWithType: PIData.boundFloats
  fullName: Danmokou.DMath.PIData.boundFloats
  type: Field
  source:
    id: boundFloats
    path: ''
    startLine: 7212
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public readonly Dictionary<int, float> boundFloats
    return:
      type: Dictionary{System.Int32,System.Single}
    content.vb: Public ReadOnly boundFloats As Dictionary(Of Integer, Single)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.boundV2s
  commentId: F:Danmokou.DMath.PIData.boundV2s
  id: boundV2s
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: boundV2s
  nameWithType: PIData.boundV2s
  fullName: Danmokou.DMath.PIData.boundV2s
  type: Field
  source:
    id: boundV2s
    path: ''
    startLine: 7213
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public readonly Dictionary<int, Vector2> boundV2s
    return:
      type: Dictionary{System.Int32,Vector2}
    content.vb: Public ReadOnly boundV2s As Dictionary(Of Integer, Vector2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.boundV3s
  commentId: F:Danmokou.DMath.PIData.boundV3s
  id: boundV3s
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: boundV3s
  nameWithType: PIData.boundV3s
  fullName: Danmokou.DMath.PIData.boundV3s
  type: Field
  source:
    id: boundV3s
    path: ''
    startLine: 7214
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public readonly Dictionary<int, Vector3> boundV3s
    return:
      type: Dictionary{System.Int32,Vector3}
    content.vb: Public ReadOnly boundV3s As Dictionary(Of Integer, Vector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.boundRV2s
  commentId: F:Danmokou.DMath.PIData.boundRV2s
  id: boundRV2s
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: boundRV2s
  nameWithType: PIData.boundRV2s
  fullName: Danmokou.DMath.PIData.boundRV2s
  type: Field
  source:
    id: boundRV2s
    path: ''
    startLine: 7215
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public readonly Dictionary<int, V2RV2> boundRV2s
    return:
      type: Dictionary{System.Int32,V2RV2}
    content.vb: Public ReadOnly boundRV2s As Dictionary(Of Integer, V2RV2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.firer
  commentId: F:Danmokou.DMath.PIData.firer
  id: firer
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: firer
  nameWithType: PIData.firer
  fullName: Danmokou.DMath.PIData.firer
  type: Field
  source:
    id: firer
    path: ''
    startLine: 7217
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public BehaviorEntity? firer
    return:
      type: System.Nullable{BehaviorEntity}
    content.vb: Public firer As BehaviorEntity?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.Firer
  commentId: P:Danmokou.DMath.PIData.Firer
  id: Firer
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Firer
  nameWithType: PIData.Firer
  fullName: Danmokou.DMath.PIData.Firer
  type: Property
  source:
    id: Firer
    path: ''
    startLine: 7219
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public BehaviorEntity Firer { get; }
    parameters: []
    return:
      type: BehaviorEntity
    content.vb: Public ReadOnly Property Firer As BehaviorEntity
  overload: Danmokou.DMath.PIData.Firer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.playerController
  commentId: F:Danmokou.DMath.PIData.playerController
  id: playerController
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: playerController
  nameWithType: PIData.playerController
  fullName: Danmokou.DMath.PIData.playerController
  type: Field
  source:
    id: playerController
    path: ''
    startLine: 7225
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public PlayerController? playerController
    return:
      type: System.Nullable{PlayerController}
    content.vb: Public playerController As PlayerController?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.PlayerController
  commentId: P:Danmokou.DMath.PIData.PlayerController
  id: PlayerController
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: PlayerController
  nameWithType: PIData.PlayerController
  fullName: Danmokou.DMath.PIData.PlayerController
  type: Property
  source:
    id: PlayerController
    path: ''
    startLine: 7226
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public PlayerController PlayerController { get; }
    parameters: []
    return:
      type: PlayerController
    content.vb: Public ReadOnly Property PlayerController As PlayerController
  overload: Danmokou.DMath.PIData.PlayerController*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.OptionFirer
  commentId: P:Danmokou.DMath.PIData.OptionFirer
  id: OptionFirer
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: OptionFirer
  nameWithType: PIData.OptionFirer
  fullName: Danmokou.DMath.PIData.OptionFirer
  type: Property
  source:
    id: OptionFirer
    path: ''
    startLine: 7233
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public FireOption OptionFirer { get; }
    parameters: []
    return:
      type: FireOption
    content.vb: Public ReadOnly Property OptionFirer As FireOption
  overload: Danmokou.DMath.PIData.OptionFirer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.bullet
  commentId: F:Danmokou.DMath.PIData.bullet
  id: bullet
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: bullet
  nameWithType: PIData.bullet
  fullName: Danmokou.DMath.PIData.bullet
  type: Field
  source:
    id: bullet
    path: ''
    startLine: 7237
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public Bullet? bullet
    return:
      type: System.Nullable{Bullet}
    content.vb: Public bullet As Bullet?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.Bullet
  commentId: P:Danmokou.DMath.PIData.Bullet
  id: Bullet
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Bullet
  nameWithType: PIData.Bullet
  fullName: Danmokou.DMath.PIData.Bullet
  type: Property
  source:
    id: Bullet
    path: ''
    startLine: 7241
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nIf this data struct is being used for a Bullet GameObject (such as pathers or lasers), then this points to the bullet.\n"
  example: []
  syntax:
    content: public Bullet Bullet { get; }
    parameters: []
    return:
      type: Bullet
    content.vb: Public ReadOnly Property Bullet As Bullet
  overload: Danmokou.DMath.PIData.Bullet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.laserController
  commentId: F:Danmokou.DMath.PIData.laserController
  id: laserController
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: laserController
  nameWithType: PIData.laserController
  fullName: Danmokou.DMath.PIData.laserController
  type: Field
  source:
    id: laserController
    path: ''
    startLine: 7245
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public CurvedTileRenderLaser? laserController
    return:
      type: System.Nullable{CurvedTileRenderLaser}
    content.vb: Public laserController As CurvedTileRenderLaser?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.Laser
  commentId: P:Danmokou.DMath.PIData.Laser
  id: Laser
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Laser
  nameWithType: PIData.Laser
  fullName: Danmokou.DMath.PIData.Laser
  type: Property
  source:
    id: Laser
    path: ''
    startLine: 7249
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nIf this data struct is being used for a Laser, then this points to the laser.\n"
  example: []
  syntax:
    content: public CurvedTileRenderLaser Laser { get; }
    parameters: []
    return:
      type: CurvedTileRenderLaser
    content.vb: Public ReadOnly Property Laser As CurvedTileRenderLaser
  overload: Danmokou.DMath.PIData.Laser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.DMath.PIData.playerBullet
  commentId: F:Danmokou.DMath.PIData.playerBullet
  id: playerBullet
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: playerBullet
  nameWithType: PIData.playerBullet
  fullName: Danmokou.DMath.PIData.playerBullet
  type: Field
  source:
    id: playerBullet
    path: ''
    startLine: 7251
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public PlayerBullet? playerBullet
    return:
      type: System.Nullable{PlayerBullet}
    content.vb: Public playerBullet As PlayerBullet?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.CopyInto(Danmokou.DMath.PIData)
  commentId: M:Danmokou.DMath.PIData.CopyInto(Danmokou.DMath.PIData)
  id: CopyInto(Danmokou.DMath.PIData)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: CopyInto(PIData)
  nameWithType: PIData.CopyInto(PIData)
  fullName: Danmokou.DMath.PIData.CopyInto(Danmokou.DMath.PIData)
  type: Method
  source:
    id: CopyInto
    path: ''
    startLine: 7257
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCopy this object&apos;s variables into another object of the same type.\n<br />Not virtual, so only this class&apos; variables are copied.\n"
  example: []
  syntax:
    content: public PIData CopyInto(PIData copyee)
    parameters:
    - id: copyee
      type: Danmokou.DMath.PIData
    return:
      type: Danmokou.DMath.PIData
    content.vb: Public Function CopyInto(copyee As PIData) As PIData
  overload: Danmokou.DMath.PIData.CopyInto*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.Clone_NoAlloc
  commentId: M:Danmokou.DMath.PIData.Clone_NoAlloc
  id: Clone_NoAlloc
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Clone_NoAlloc()
  nameWithType: PIData.Clone_NoAlloc()
  fullName: Danmokou.DMath.PIData.Clone_NoAlloc()
  type: Method
  source:
    id: Clone_NoAlloc
    path: ''
    startLine: 7276
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nClone this object. The data type is pooled, so this method has amortized O(0) allocations.\n"
  example: []
  syntax:
    content: public PIData Clone_NoAlloc()
    return:
      type: Danmokou.DMath.PIData
    content.vb: Public Function Clone_NoAlloc As PIData
  overload: Danmokou.DMath.PIData.Clone_NoAlloc*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.RevertToGCX(LexicalScope,BehaviorEntity)
  commentId: M:Danmokou.DMath.PIData.RevertToGCX(LexicalScope,BehaviorEntity)
  id: RevertToGCX(LexicalScope,BehaviorEntity)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: RevertToGCX(LexicalScope, BehaviorEntity)
  nameWithType: PIData.RevertToGCX(LexicalScope, BehaviorEntity)
  fullName: Danmokou.DMath.PIData.RevertToGCX(LexicalScope, BehaviorEntity)
  type: Method
  source:
    id: RevertToGCX
    path: ''
    startLine: 7283
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nONLY CALL THIS FROM FUNCTIONS WITH <see cref=\"!:CreatesInternalScopeAttribute\"></see> WITH DYNAMIC=TRUE\n"
  example: []
  syntax:
    content: public GenCtx RevertToGCX(LexicalScope dynamicScope, BehaviorEntity exec)
    parameters:
    - id: dynamicScope
      type: LexicalScope
    - id: exec
      type: BehaviorEntity
    return:
      type: GenCtx
    content.vb: Public Function RevertToGCX(dynamicScope As LexicalScope, exec As BehaviorEntity) As GenCtx
  overload: Danmokou.DMath.PIData.RevertToGCX*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.Dispose
  commentId: M:Danmokou.DMath.PIData.Dispose
  id: Dispose
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PIData.Dispose()
  fullName: Danmokou.DMath.PIData.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 7292
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Danmokou.DMath.PIData.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.DMath.PIData.GetIfDefined``1(TExArgCtx,System.String,System.Nullable{Ex})
  commentId: M:Danmokou.DMath.PIData.GetIfDefined``1(TExArgCtx,System.String,System.Nullable{Ex})
  id: GetIfDefined``1(TExArgCtx,System.String,System.Nullable{Ex})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: GetIfDefined<T>(TExArgCtx, String, Nullable<Ex>)
  nameWithType: PIData.GetIfDefined<T>(TExArgCtx, String, Nullable<Ex>)
  fullName: Danmokou.DMath.PIData.GetIfDefined<T>(TExArgCtx, System.String, System.Nullable<Ex>)
  type: Method
  source:
    id: GetIfDefined
    path: ''
    startLine: 7316
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate an expression that retrieves a field with name <see cref=\"!:name\"></see> and type <see cref=\"!:T\"></see>\nif it exists. If it doesn&apos;t exist, returns <see cref=\"!:deflt\"></see> or throws an exception.\n"
  example: []
  syntax:
    content: public static Ex GetIfDefined<T>(TExArgCtx tac, string name, Ex? deflt)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: name
      type: System.String
    - id: deflt
      type: System.Nullable{Ex}
    typeParameters:
    - id: T
    return:
      type: Ex
    content.vb: Public Shared Function GetIfDefined(Of T)(tac As TExArgCtx, name As String, deflt As Ex?) As Ex
  overload: Danmokou.DMath.PIData.GetIfDefined*
  nameWithType.vb: PIData.GetIfDefined(Of T)(TExArgCtx, String, Nullable(Of Ex))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.GetIfDefined(Of T)(TExArgCtx, System.String, System.Nullable(Of Ex))
  name.vb: GetIfDefined(Of T)(TExArgCtx, String, Nullable(Of Ex))
- uid: Danmokou.DMath.PIData.SetValue(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  commentId: M:Danmokou.DMath.PIData.SetValue(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  id: SetValue(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: SetValue(TExArgCtx, Type, String, Func<TExArgCtx, TEx>)
  nameWithType: PIData.SetValue(TExArgCtx, Type, String, Func<TExArgCtx, TEx>)
  fullName: Danmokou.DMath.PIData.SetValue(TExArgCtx, System.Type, System.String, System.Func<TExArgCtx, TEx>)
  type: Method
  source:
    id: SetValue
    path: ''
    startLine: 7326
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate an expression that sets the value of a field with name <see cref=\"!:name\"></see>.\n<br />If the subclass of <xref href=\"Danmokou.DMath.PIData\" data-throw-if-not-resolved=\"false\"></xref> is known, then does this by direct field access,\notherwise uses the WriteT jumptable lookup.\n"
  example: []
  syntax:
    content: public static Ex SetValue(TExArgCtx tac, Type t, string name, Func<TExArgCtx, TEx> val)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: t
      type: System.Type
    - id: name
      type: System.String
    - id: val
      type: System.Func{TExArgCtx,TEx}
    return:
      type: Ex
    content.vb: Public Shared Function SetValue(tac As TExArgCtx, t As Type, name As String, val As Func(Of TExArgCtx, TEx)) As Ex
  overload: Danmokou.DMath.PIData.SetValue*
  nameWithType.vb: PIData.SetValue(TExArgCtx, Type, String, Func(Of TExArgCtx, TEx))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.SetValue(TExArgCtx, System.Type, System.String, System.Func(Of TExArgCtx, TEx))
  name.vb: SetValue(TExArgCtx, Type, String, Func(Of TExArgCtx, TEx))
- uid: Danmokou.DMath.PIData.SetValueDynamic(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  commentId: M:Danmokou.DMath.PIData.SetValueDynamic(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  id: SetValueDynamic(TExArgCtx,System.Type,System.String,System.Func{TExArgCtx,TEx})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: SetValueDynamic(TExArgCtx, Type, String, Func<TExArgCtx, TEx>)
  nameWithType: PIData.SetValueDynamic(TExArgCtx, Type, String, Func<TExArgCtx, TEx>)
  fullName: Danmokou.DMath.PIData.SetValueDynamic(TExArgCtx, System.Type, System.String, System.Func<TExArgCtx, TEx>)
  type: Method
  source:
    id: SetValueDynamic
    path: ''
    startLine: 7331
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static Ex SetValueDynamic(TExArgCtx tac, Type t, string name, Func<TExArgCtx, TEx> val)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: t
      type: System.Type
    - id: name
      type: System.String
    - id: val
      type: System.Func{TExArgCtx,TEx}
    return:
      type: Ex
    content.vb: Public Shared Function SetValueDynamic(tac As TExArgCtx, t As Type, name As String, val As Func(Of TExArgCtx, TEx)) As Ex
  overload: Danmokou.DMath.PIData.SetValueDynamic*
  nameWithType.vb: PIData.SetValueDynamic(TExArgCtx, Type, String, Func(Of TExArgCtx, TEx))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.SetValueDynamic(TExArgCtx, System.Type, System.String, System.Func(Of TExArgCtx, TEx))
  name.vb: SetValueDynamic(TExArgCtx, Type, String, Func(Of TExArgCtx, TEx))
- uid: Danmokou.DMath.PIData.ContainsDynamic(TExArgCtx,System.Type,System.String)
  commentId: M:Danmokou.DMath.PIData.ContainsDynamic(TExArgCtx,System.Type,System.String)
  id: ContainsDynamic(TExArgCtx,System.Type,System.String)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: ContainsDynamic(TExArgCtx, Type, String)
  nameWithType: PIData.ContainsDynamic(TExArgCtx, Type, String)
  fullName: Danmokou.DMath.PIData.ContainsDynamic(TExArgCtx, System.Type, System.String)
  type: Method
  source:
    id: ContainsDynamic
    path: ''
    startLine: 7357
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static TEx ContainsDynamic(TExArgCtx tac, Type typ, string name)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: typ
      type: System.Type
    - id: name
      type: System.String
    return:
      type: TEx
    content.vb: Public Shared Function ContainsDynamic(tac As TExArgCtx, typ As Type, name As String) As TEx
  overload: Danmokou.DMath.PIData.ContainsDynamic*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.PIData.ContainsDynamic``1(TExArgCtx,System.String)
  commentId: M:Danmokou.DMath.PIData.ContainsDynamic``1(TExArgCtx,System.String)
  id: ContainsDynamic``1(TExArgCtx,System.String)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: ContainsDynamic<T>(TExArgCtx, String)
  nameWithType: PIData.ContainsDynamic<T>(TExArgCtx, String)
  fullName: Danmokou.DMath.PIData.ContainsDynamic<T>(TExArgCtx, System.String)
  type: Method
  source:
    id: ContainsDynamic
    path: ''
    startLine: 7360
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static Expression ContainsDynamic<T>(TExArgCtx tac, string name)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: name
      type: System.String
    typeParameters:
    - id: T
    return:
      type: Expression
    content.vb: Public Shared Function ContainsDynamic(Of T)(tac As TExArgCtx, name As String) As Expression
  overload: Danmokou.DMath.PIData.ContainsDynamic*
  nameWithType.vb: PIData.ContainsDynamic(Of T)(TExArgCtx, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.ContainsDynamic(Of T)(TExArgCtx, System.String)
  name.vb: ContainsDynamic(Of T)(TExArgCtx, String)
- uid: Danmokou.DMath.PIData.GetValueDynamic``1(TExArgCtx,System.String,System.Nullable{TEx{``0}})
  commentId: M:Danmokou.DMath.PIData.GetValueDynamic``1(TExArgCtx,System.String,System.Nullable{TEx{``0}})
  id: GetValueDynamic``1(TExArgCtx,System.String,System.Nullable{TEx{``0}})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: GetValueDynamic<T>(TExArgCtx, String, Nullable<TEx<T>>)
  nameWithType: PIData.GetValueDynamic<T>(TExArgCtx, String, Nullable<TEx<T>>)
  fullName: Danmokou.DMath.PIData.GetValueDynamic<T>(TExArgCtx, System.String, System.Nullable<TEx<T>>)
  type: Method
  source:
    id: GetValueDynamic
    path: ''
    startLine: 7362
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static Expression GetValueDynamic<T>(TExArgCtx tac, string name, TEx<T>? deflt = null)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: name
      type: System.String
    - id: deflt
      type: System.Nullable{TEx{{T}}}
    typeParameters:
    - id: T
    return:
      type: Expression
    content.vb: Public Shared Function GetValueDynamic(Of T)(tac As TExArgCtx, name As String, deflt As TEx(Of T)? = Nothing) As Expression
  overload: Danmokou.DMath.PIData.GetValueDynamic*
  nameWithType.vb: PIData.GetValueDynamic(Of T)(TExArgCtx, String, Nullable(Of TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.GetValueDynamic(Of T)(TExArgCtx, System.String, System.Nullable(Of TEx(Of T)))
  name.vb: GetValueDynamic(Of T)(TExArgCtx, String, Nullable(Of TEx(Of T)))
- uid: Danmokou.DMath.PIData.SetValueDynamic``1(TExArgCtx,System.String,Expression)
  commentId: M:Danmokou.DMath.PIData.SetValueDynamic``1(TExArgCtx,System.String,Expression)
  id: SetValueDynamic``1(TExArgCtx,System.String,Expression)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: SetValueDynamic<T>(TExArgCtx, String, Expression)
  nameWithType: PIData.SetValueDynamic<T>(TExArgCtx, String, Expression)
  fullName: Danmokou.DMath.PIData.SetValueDynamic<T>(TExArgCtx, System.String, Expression)
  type: Method
  source:
    id: SetValueDynamic
    path: ''
    startLine: 7366
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static Expression SetValueDynamic<T>(TExArgCtx tac, string name, Expression val)
    parameters:
    - id: tac
      type: TExArgCtx
    - id: name
      type: System.String
    - id: val
      type: Expression
    typeParameters:
    - id: T
    return:
      type: Expression
    content.vb: Public Shared Function SetValueDynamic(Of T)(tac As TExArgCtx, name As String, val As Expression) As Expression
  overload: Danmokou.DMath.PIData.SetValueDynamic*
  nameWithType.vb: PIData.SetValueDynamic(Of T)(TExArgCtx, String, Expression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.SetValueDynamic(Of T)(TExArgCtx, System.String, Expression)
  name.vb: SetValueDynamic(Of T)(TExArgCtx, String, Expression)
- uid: Danmokou.DMath.PIData.GetDict(Expression,System.Type)
  commentId: M:Danmokou.DMath.PIData.GetDict(Expression,System.Type)
  id: GetDict(Expression,System.Type)
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: GetDict(Expression, Type)
  nameWithType: PIData.GetDict(Expression, Type)
  fullName: Danmokou.DMath.PIData.GetDict(Expression, System.Type)
  type: Method
  source:
    id: GetDict
    path: ''
    startLine: 7369
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static Expression GetDict(Expression fctx, Type typ)
    parameters:
    - id: fctx
      type: Expression
    - id: typ
      type: System.Type
    return:
      type: Expression
    content.vb: Public Shared Function GetDict(fctx As Expression, typ As Type) As Expression
  overload: Danmokou.DMath.PIData.GetDict*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.PIData.New(System.Nullable{System.ValueTuple{LexicalScope,GenCtx}})
  commentId: M:Danmokou.DMath.PIData.New(System.Nullable{System.ValueTuple{LexicalScope,GenCtx}})
  id: New(System.Nullable{System.ValueTuple{LexicalScope,GenCtx}})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: New(Nullable<(LexicalScope scope, GenCtx gcx)>)
  nameWithType: PIData.New(Nullable<(LexicalScope scope, GenCtx gcx)>)
  fullName: Danmokou.DMath.PIData.New(System.Nullable<System.ValueTuple<LexicalScope, GenCtx>>)
  type: Method
  source:
    id: New
    path: ''
    startLine: 7383
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public static PIData New((LexicalScope scope, GenCtx gcx)? parent = null)
    parameters:
    - id: parent
      type: System.Nullable{System.ValueTuple{LexicalScope,GenCtx}}
    return:
      type: Danmokou.DMath.PIData
    content.vb: Public Shared Function New(parent As(scope As LexicalScope, gcx As GenCtx)(Of LexicalScope , GenCtx) ?  = Nothing) As PIData
  overload: Danmokou.DMath.PIData.New*
  nameWithType.vb: PIData.New(Nullable(Of (scope As LexicalScope, gcx As GenCtx)(Of LexicalScope, GenCtx)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.New(System.Nullable(Of System.ValueTuple(Of LexicalScope, GenCtx)))
  name.vb: New(Nullable(Of (scope As LexicalScope, gcx As GenCtx)(Of LexicalScope, GenCtx)))
- uid: Danmokou.DMath.PIData.UpdateFirer(System.Nullable{GenCtx})
  commentId: M:Danmokou.DMath.PIData.UpdateFirer(System.Nullable{GenCtx})
  id: UpdateFirer(System.Nullable{GenCtx})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: UpdateFirer(Nullable<GenCtx>)
  nameWithType: PIData.UpdateFirer(Nullable<GenCtx>)
  fullName: Danmokou.DMath.PIData.UpdateFirer(System.Nullable<GenCtx>)
  type: Method
  source:
    id: UpdateFirer
    path: ''
    startLine: 7400
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  syntax:
    content: public void UpdateFirer(GenCtx? gcx)
    parameters:
    - id: gcx
      type: System.Nullable{GenCtx}
    content.vb: Public Sub UpdateFirer(gcx As GenCtx?)
  overload: Danmokou.DMath.PIData.UpdateFirer*
  nameWithType.vb: PIData.UpdateFirer(Nullable(Of GenCtx))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.DMath.PIData.UpdateFirer(System.Nullable(Of GenCtx))
  name.vb: UpdateFirer(Nullable(Of GenCtx))
- uid: Danmokou.DMath.PIData.NewUnscoped(System.Nullable{GenCtx})
  commentId: M:Danmokou.DMath.PIData.NewUnscoped(System.Nullable{GenCtx})
  id: NewUnscoped(System.Nullable{GenCtx})
  parent: Danmokou.DMath.PIData
  langs:
  - csharp
  - vb
  name: NewUnscoped(Nullable<GenCtx>)
  nameWithType: PIData.NewUnscoped(Nullable<GenCtx>)
  fullName: Danmokou.DMath.PIData.NewUnscoped(System.Nullable<GenCtx>)
  type: Method
  source:
    id: NewUnscoped
    path: ''
    startLine: 7416
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath
  summary: "\nCreate a new instance of the base <xref href=\"Danmokou.DMath.PIData\" data-throw-if-not-resolved=\"false\"></xref> class.\nOnly use this if you don&apos;t need to store any bound variables.\n"
  example: []
  syntax:
    content: public static PIData NewUnscoped(GenCtx? gcx = null)
    parameters:
    - id: gcx
      type: System.Nullable{GenCtx}
    return:
      type: Danmokou.DMath.PIData
    content.vb: Public Shared Function NewUnscoped(gcx As GenCtx? = Nothing) As PIData
  overload: Danmokou.DMath.PIData.NewUnscoped*
  nameWithType.vb: PIData.NewUnscoped(Nullable(Of GenCtx))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.PIData.NewUnscoped(System.Nullable(Of GenCtx))
  name.vb: NewUnscoped(Nullable(Of GenCtx))
references:
- uid: Danmokou.DMath
  commentId: N:Danmokou.DMath
  name: Danmokou.DMath
  nameWithType: Danmokou.DMath
  fullName: Danmokou.DMath
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.DMath.PIData
  commentId: T:Danmokou.DMath.PIData
  parent: Danmokou.DMath
  name: PIData
  nameWithType: PIData
  fullName: Danmokou.DMath.PIData
- uid: Danmokou.DMath.PIData.GetDynamicKey*
  commentId: Overload:Danmokou.DMath.PIData.GetDynamicKey
  name: GetDynamicKey
  nameWithType: PIData.GetDynamicKey
  fullName: Danmokou.DMath.PIData.GetDynamicKey
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Danmokou.DMath.PIData.Allocated*
  commentId: Overload:Danmokou.DMath.PIData.Allocated
  name: Allocated
  nameWithType: PIData.Allocated
  fullName: Danmokou.DMath.PIData.Allocated
- uid: Danmokou.DMath.PIData.Popped*
  commentId: Overload:Danmokou.DMath.PIData.Popped
  name: Popped
  nameWithType: PIData.Popped
  fullName: Danmokou.DMath.PIData.Popped
- uid: Danmokou.DMath.PIData.Recached*
  commentId: Overload:Danmokou.DMath.PIData.Recached
  name: Recached
  nameWithType: PIData.Recached
  fullName: Danmokou.DMath.PIData.Recached
- uid: Danmokou.DMath.PIData.Copied*
  commentId: Overload:Danmokou.DMath.PIData.Copied
  name: Copied
  nameWithType: PIData.Copied
  fullName: Danmokou.DMath.PIData.Copied
- uid: Danmokou.DMath.PIData.Cleared*
  commentId: Overload:Danmokou.DMath.PIData.Cleared
  name: Cleared
  nameWithType: PIData.Cleared
  fullName: Danmokou.DMath.PIData.Cleared
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: EnvFrame
  commentId: '!:EnvFrame'
  isExternal: true
  name: EnvFrame
  nameWithType: EnvFrame
  fullName: EnvFrame
- uid: Dictionary{System.Int32,System.Int32}
  commentId: '!:Dictionary{System.Int32,System.Int32}'
  definition: Dictionary`2
  name: Dictionary<Int32, Int32>
  nameWithType: Dictionary<Int32, Int32>
  fullName: Dictionary<System.Int32, System.Int32>
  nameWithType.vb: Dictionary(Of Int32, Int32)
  fullName.vb: Dictionary(Of System.Int32, System.Int32)
  name.vb: Dictionary(Of Int32, Int32)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.Int32,System.Single}
  commentId: '!:Dictionary{System.Int32,System.Single}'
  definition: Dictionary`2
  name: Dictionary<Int32, Single>
  nameWithType: Dictionary<Int32, Single>
  fullName: Dictionary<System.Int32, System.Single>
  nameWithType.vb: Dictionary(Of Int32, Single)
  fullName.vb: Dictionary(Of System.Int32, System.Single)
  name.vb: Dictionary(Of Int32, Single)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.Int32,Vector2}
  commentId: '!:Dictionary{System.Int32,Vector2}'
  definition: Dictionary`2
  name: Dictionary<Int32, Vector2>
  nameWithType: Dictionary<Int32, Vector2>
  fullName: Dictionary<System.Int32, Vector2>
  nameWithType.vb: Dictionary(Of Int32, Vector2)
  fullName.vb: Dictionary(Of System.Int32, Vector2)
  name.vb: Dictionary(Of Int32, Vector2)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.Int32,Vector3}
  commentId: '!:Dictionary{System.Int32,Vector3}'
  definition: Dictionary`2
  name: Dictionary<Int32, Vector3>
  nameWithType: Dictionary<Int32, Vector3>
  fullName: Dictionary<System.Int32, Vector3>
  nameWithType.vb: Dictionary(Of Int32, Vector3)
  fullName.vb: Dictionary(Of System.Int32, Vector3)
  name.vb: Dictionary(Of Int32, Vector3)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vector3
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vector3
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.Int32,V2RV2}
  commentId: '!:Dictionary{System.Int32,V2RV2}'
  definition: Dictionary`2
  name: Dictionary<Int32, V2RV2>
  nameWithType: Dictionary<Int32, V2RV2>
  fullName: Dictionary<System.Int32, V2RV2>
  nameWithType.vb: Dictionary(Of Int32, V2RV2)
  fullName.vb: Dictionary(Of System.Int32, V2RV2)
  name.vb: Dictionary(Of Int32, V2RV2)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: V2RV2
    name: V2RV2
    nameWithType: V2RV2
    fullName: V2RV2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: V2RV2
    name: V2RV2
    nameWithType: V2RV2
    fullName: V2RV2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{BehaviorEntity}
  commentId: T:System.Nullable{BehaviorEntity}
  parent: System
  definition: System.Nullable`1
  name: Nullable<BehaviorEntity>
  nameWithType: Nullable<BehaviorEntity>
  fullName: System.Nullable<BehaviorEntity>
  nameWithType.vb: Nullable(Of BehaviorEntity)
  fullName.vb: System.Nullable(Of BehaviorEntity)
  name.vb: Nullable(Of BehaviorEntity)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.Firer*
  commentId: Overload:Danmokou.DMath.PIData.Firer
  name: Firer
  nameWithType: PIData.Firer
  fullName: Danmokou.DMath.PIData.Firer
- uid: BehaviorEntity
  isExternal: true
  name: BehaviorEntity
  nameWithType: BehaviorEntity
  fullName: BehaviorEntity
- uid: System.Nullable{PlayerController}
  commentId: T:System.Nullable{PlayerController}
  parent: System
  definition: System.Nullable`1
  name: Nullable<PlayerController>
  nameWithType: Nullable<PlayerController>
  fullName: System.Nullable<PlayerController>
  nameWithType.vb: Nullable(Of PlayerController)
  fullName.vb: System.Nullable(Of PlayerController)
  name.vb: Nullable(Of PlayerController)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PlayerController
    name: PlayerController
    nameWithType: PlayerController
    fullName: PlayerController
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PlayerController
    name: PlayerController
    nameWithType: PlayerController
    fullName: PlayerController
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.PlayerController*
  commentId: Overload:Danmokou.DMath.PIData.PlayerController
  name: PlayerController
  nameWithType: PIData.PlayerController
  fullName: Danmokou.DMath.PIData.PlayerController
- uid: PlayerController
  commentId: '!:PlayerController'
  isExternal: true
  name: PlayerController
  nameWithType: PlayerController
  fullName: PlayerController
- uid: Danmokou.DMath.PIData.OptionFirer*
  commentId: Overload:Danmokou.DMath.PIData.OptionFirer
  name: OptionFirer
  nameWithType: PIData.OptionFirer
  fullName: Danmokou.DMath.PIData.OptionFirer
- uid: FireOption
  commentId: '!:FireOption'
  isExternal: true
  name: FireOption
  nameWithType: FireOption
  fullName: FireOption
- uid: System.Nullable{Bullet}
  commentId: T:System.Nullable{Bullet}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Bullet>
  nameWithType: Nullable<Bullet>
  fullName: System.Nullable<Bullet>
  nameWithType.vb: Nullable(Of Bullet)
  fullName.vb: System.Nullable(Of Bullet)
  name.vb: Nullable(Of Bullet)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Bullet
    name: Bullet
    nameWithType: Bullet
    fullName: Bullet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Bullet
    name: Bullet
    nameWithType: Bullet
    fullName: Bullet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.Bullet*
  commentId: Overload:Danmokou.DMath.PIData.Bullet
  name: Bullet
  nameWithType: PIData.Bullet
  fullName: Danmokou.DMath.PIData.Bullet
- uid: Bullet
  commentId: '!:Bullet'
  isExternal: true
  name: Bullet
  nameWithType: Bullet
  fullName: Bullet
- uid: System.Nullable{CurvedTileRenderLaser}
  commentId: T:System.Nullable{CurvedTileRenderLaser}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CurvedTileRenderLaser>
  nameWithType: Nullable<CurvedTileRenderLaser>
  fullName: System.Nullable<CurvedTileRenderLaser>
  nameWithType.vb: Nullable(Of CurvedTileRenderLaser)
  fullName.vb: System.Nullable(Of CurvedTileRenderLaser)
  name.vb: Nullable(Of CurvedTileRenderLaser)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CurvedTileRenderLaser
    name: CurvedTileRenderLaser
    nameWithType: CurvedTileRenderLaser
    fullName: CurvedTileRenderLaser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CurvedTileRenderLaser
    name: CurvedTileRenderLaser
    nameWithType: CurvedTileRenderLaser
    fullName: CurvedTileRenderLaser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.Laser*
  commentId: Overload:Danmokou.DMath.PIData.Laser
  name: Laser
  nameWithType: PIData.Laser
  fullName: Danmokou.DMath.PIData.Laser
- uid: CurvedTileRenderLaser
  commentId: '!:CurvedTileRenderLaser'
  isExternal: true
  name: CurvedTileRenderLaser
  nameWithType: CurvedTileRenderLaser
  fullName: CurvedTileRenderLaser
- uid: System.Nullable{PlayerBullet}
  commentId: T:System.Nullable{PlayerBullet}
  parent: System
  definition: System.Nullable`1
  name: Nullable<PlayerBullet>
  nameWithType: Nullable<PlayerBullet>
  fullName: System.Nullable<PlayerBullet>
  nameWithType.vb: Nullable(Of PlayerBullet)
  fullName.vb: System.Nullable(Of PlayerBullet)
  name.vb: Nullable(Of PlayerBullet)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PlayerBullet
    name: PlayerBullet
    nameWithType: PlayerBullet
    fullName: PlayerBullet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PlayerBullet
    name: PlayerBullet
    nameWithType: PlayerBullet
    fullName: PlayerBullet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.CopyInto*
  commentId: Overload:Danmokou.DMath.PIData.CopyInto
  name: CopyInto
  nameWithType: PIData.CopyInto
  fullName: Danmokou.DMath.PIData.CopyInto
- uid: Danmokou.DMath.PIData.Clone_NoAlloc*
  commentId: Overload:Danmokou.DMath.PIData.Clone_NoAlloc
  name: Clone_NoAlloc
  nameWithType: PIData.Clone_NoAlloc
  fullName: Danmokou.DMath.PIData.Clone_NoAlloc
- uid: Danmokou.DMath.PIData.RevertToGCX*
  commentId: Overload:Danmokou.DMath.PIData.RevertToGCX
  name: RevertToGCX
  nameWithType: PIData.RevertToGCX
  fullName: Danmokou.DMath.PIData.RevertToGCX
- uid: LexicalScope
  isExternal: true
  name: LexicalScope
  nameWithType: LexicalScope
  fullName: LexicalScope
- uid: GenCtx
  isExternal: true
  name: GenCtx
  nameWithType: GenCtx
  fullName: GenCtx
- uid: Danmokou.DMath.PIData.Dispose*
  commentId: Overload:Danmokou.DMath.PIData.Dispose
  name: Dispose
  nameWithType: PIData.Dispose
  fullName: Danmokou.DMath.PIData.Dispose
- uid: Danmokou.DMath.PIData.GetIfDefined*
  commentId: Overload:Danmokou.DMath.PIData.GetIfDefined
  name: GetIfDefined
  nameWithType: PIData.GetIfDefined
  fullName: Danmokou.DMath.PIData.GetIfDefined
- uid: TExArgCtx
  isExternal: true
  name: TExArgCtx
  nameWithType: TExArgCtx
  fullName: TExArgCtx
- uid: System.Nullable{Ex}
  commentId: T:System.Nullable{Ex}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Ex>
  nameWithType: Nullable<Ex>
  fullName: System.Nullable<Ex>
  nameWithType.vb: Nullable(Of Ex)
  fullName.vb: System.Nullable(Of Ex)
  name.vb: Nullable(Of Ex)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Ex
    name: Ex
    nameWithType: Ex
    fullName: Ex
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Ex
    name: Ex
    nameWithType: Ex
    fullName: Ex
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ex
  isExternal: true
  name: Ex
  nameWithType: Ex
  fullName: Ex
- uid: Danmokou.DMath.PIData.SetValue*
  commentId: Overload:Danmokou.DMath.PIData.SetValue
  name: SetValue
  nameWithType: PIData.SetValue
  fullName: Danmokou.DMath.PIData.SetValue
- uid: System.Func{TExArgCtx,TEx}
  commentId: T:System.Func{TExArgCtx,TEx}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx>
  nameWithType: Func<TExArgCtx, TEx>
  fullName: System.Func<TExArgCtx, TEx>
  nameWithType.vb: Func(Of TExArgCtx, TEx)
  fullName.vb: System.Func(Of TExArgCtx, TEx)
  name.vb: Func(Of TExArgCtx, TEx)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.SetValueDynamic*
  commentId: Overload:Danmokou.DMath.PIData.SetValueDynamic
  name: SetValueDynamic
  nameWithType: PIData.SetValueDynamic
  fullName: Danmokou.DMath.PIData.SetValueDynamic
- uid: Danmokou.DMath.PIData.ContainsDynamic*
  commentId: Overload:Danmokou.DMath.PIData.ContainsDynamic
  name: ContainsDynamic
  nameWithType: PIData.ContainsDynamic
  fullName: Danmokou.DMath.PIData.ContainsDynamic
- uid: TEx
  commentId: '!:TEx'
  isExternal: true
  name: TEx
  nameWithType: TEx
  fullName: TEx
- uid: Expression
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: Expression
- uid: Danmokou.DMath.PIData.GetValueDynamic*
  commentId: Overload:Danmokou.DMath.PIData.GetValueDynamic
  name: GetValueDynamic
  nameWithType: PIData.GetValueDynamic
  fullName: Danmokou.DMath.PIData.GetValueDynamic
- uid: System.Nullable{TEx{{T}}}
  commentId: T:System.Nullable{TEx{``0}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TEx<T>>
  nameWithType: Nullable<TEx<T>>
  fullName: System.Nullable<TEx<T>>
  nameWithType.vb: Nullable(Of TEx(Of T))
  fullName.vb: System.Nullable(Of TEx(Of T))
  name.vb: Nullable(Of TEx(Of T))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.GetDict*
  commentId: Overload:Danmokou.DMath.PIData.GetDict
  name: GetDict
  nameWithType: PIData.GetDict
  fullName: Danmokou.DMath.PIData.GetDict
- uid: Danmokou.DMath.PIData.New*
  commentId: Overload:Danmokou.DMath.PIData.New
  name: New
  nameWithType: PIData.New
  fullName: Danmokou.DMath.PIData.New
- uid: System.Nullable{System.ValueTuple{LexicalScope,GenCtx}}
  commentId: T:System.Nullable{System.ValueTuple{LexicalScope,GenCtx}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<(T1, T2)<LexicalScope, GenCtx>>
  nameWithType: Nullable<(T1, T2)<LexicalScope, GenCtx>>
  fullName: System.Nullable<System.ValueTuple<LexicalScope, GenCtx>>
  nameWithType.vb: Nullable(Of (T1, T2)(Of LexicalScope, GenCtx))
  fullName.vb: System.Nullable(Of System.ValueTuple(Of LexicalScope, GenCtx))
  name.vb: Nullable(Of (T1, T2)(Of LexicalScope, GenCtx))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LexicalScope
    name: LexicalScope
    nameWithType: LexicalScope
    fullName: LexicalScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GenCtx
    name: GenCtx
    nameWithType: GenCtx
    fullName: GenCtx
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LexicalScope
    name: LexicalScope
    nameWithType: LexicalScope
    fullName: LexicalScope
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GenCtx
    name: GenCtx
    nameWithType: GenCtx
    fullName: GenCtx
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.UpdateFirer*
  commentId: Overload:Danmokou.DMath.PIData.UpdateFirer
  name: UpdateFirer
  nameWithType: PIData.UpdateFirer
  fullName: Danmokou.DMath.PIData.UpdateFirer
- uid: System.Nullable{GenCtx}
  commentId: T:System.Nullable{GenCtx}
  parent: System
  definition: System.Nullable`1
  name: Nullable<GenCtx>
  nameWithType: Nullable<GenCtx>
  fullName: System.Nullable<GenCtx>
  nameWithType.vb: Nullable(Of GenCtx)
  fullName.vb: System.Nullable(Of GenCtx)
  name.vb: Nullable(Of GenCtx)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GenCtx
    name: GenCtx
    nameWithType: GenCtx
    fullName: GenCtx
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GenCtx
    name: GenCtx
    nameWithType: GenCtx
    fullName: GenCtx
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.PIData.NewUnscoped*
  commentId: Overload:Danmokou.DMath.PIData.NewUnscoped
  name: NewUnscoped
  nameWithType: PIData.NewUnscoped
  fullName: Danmokou.DMath.PIData.NewUnscoped
