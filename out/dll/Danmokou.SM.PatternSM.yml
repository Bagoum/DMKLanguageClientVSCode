### YamlMime:ManagedReference
items:
- uid: Danmokou.SM.PatternSM
  commentId: T:Danmokou.SM.PatternSM
  id: PatternSM
  parent: Danmokou.SM
  children:
  - Danmokou.SM.PatternSM.#ctor(Danmokou.SM.PatternProperties,Danmokou.SM.StateMachine[])
  - Danmokou.SM.PatternSM.EnvFrame
  - Danmokou.SM.PatternSM.Phases
  - Danmokou.SM.PatternSM.Props
  - Danmokou.SM.PatternSM.Start(Danmokou.SM.SMHandoff)
  langs:
  - csharp
  - vb
  name: PatternSM
  nameWithType: PatternSM
  fullName: Danmokou.SM.PatternSM
  type: Class
  source:
    id: PatternSM
    path: ''
    startLine: 14044
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\n`pattern`: Top-level controller for SMs involving danmaku or level control.\nDoes not encompass text control (<xref href=\"Danmokou.SM.ScriptTSM\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: 'public class PatternSM : SequentialSM'
    content.vb: >-
      Public Class PatternSM
          Inherits SequentialSM
  inheritance:
  - System.Object
  - Danmokou.SM.StateMachine
  - Danmokou.SM.SequentialSM
  implements:
  - EnvFrameAttacher
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Danmokou.SM.PatternSM.Props
  commentId: P:Danmokou.SM.PatternSM.Props
  id: Props
  parent: Danmokou.SM.PatternSM
  langs:
  - csharp
  - vb
  name: Props
  nameWithType: PatternSM.Props
  fullName: Danmokou.SM.PatternSM.Props
  type: Property
  source:
    id: Props
    path: ''
    startLine: 14045
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public PatternProperties Props { get; }
    parameters: []
    return:
      type: Danmokou.SM.PatternProperties
    content.vb: Public ReadOnly Property Props As PatternProperties
  overload: Danmokou.SM.PatternSM.Props*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.SM.PatternSM.Phases
  commentId: P:Danmokou.SM.PatternSM.Phases
  id: Phases
  parent: Danmokou.SM.PatternSM
  langs:
  - csharp
  - vb
  name: Phases
  nameWithType: PatternSM.Phases
  fullName: Danmokou.SM.PatternSM.Phases
  type: Property
  source:
    id: Phases
    path: ''
    startLine: 14046
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public PhaseSM[] Phases { get; }
    parameters: []
    return:
      type: Danmokou.SM.PhaseSM[]
    content.vb: Public ReadOnly Property Phases As PhaseSM()
  overload: Danmokou.SM.PatternSM.Phases*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.SM.PatternSM.EnvFrame
  commentId: P:Danmokou.SM.PatternSM.EnvFrame
  id: EnvFrame
  parent: Danmokou.SM.PatternSM
  langs:
  - csharp
  - vb
  name: EnvFrame
  nameWithType: PatternSM.EnvFrame
  fullName: Danmokou.SM.PatternSM.EnvFrame
  type: Property
  source:
    id: EnvFrame
    path: ''
    startLine: 14047
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public EnvFrame? EnvFrame { get; set; }
    parameters: []
    return:
      type: System.Nullable{EnvFrame}
    content.vb: Public Property EnvFrame As EnvFrame?
  overload: Danmokou.SM.PatternSM.EnvFrame*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Danmokou.SM.PatternSM.#ctor(Danmokou.SM.PatternProperties,Danmokou.SM.StateMachine[])
  commentId: M:Danmokou.SM.PatternSM.#ctor(Danmokou.SM.PatternProperties,Danmokou.SM.StateMachine[])
  id: '#ctor(Danmokou.SM.PatternProperties,Danmokou.SM.StateMachine[])'
  parent: Danmokou.SM.PatternSM
  langs:
  - csharp
  - vb
  name: PatternSM(PatternProperties, StateMachine[])
  nameWithType: PatternSM.PatternSM(PatternProperties, StateMachine[])
  fullName: Danmokou.SM.PatternSM.PatternSM(Danmokou.SM.PatternProperties, Danmokou.SM.StateMachine[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 14049
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public PatternSM(PatternProperties props, StateMachine[] states)
    parameters:
    - id: props
      type: Danmokou.SM.PatternProperties
    - id: states
      type: Danmokou.SM.StateMachine[]
    content.vb: Public Sub New(props As PatternProperties, states As StateMachine())
  overload: Danmokou.SM.PatternSM.#ctor*
  nameWithType.vb: PatternSM.PatternSM(PatternProperties, StateMachine())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.SM.PatternSM.PatternSM(Danmokou.SM.PatternProperties, Danmokou.SM.StateMachine())
  name.vb: PatternSM(PatternProperties, StateMachine())
- uid: Danmokou.SM.PatternSM.Start(Danmokou.SM.SMHandoff)
  commentId: M:Danmokou.SM.PatternSM.Start(Danmokou.SM.SMHandoff)
  id: Start(Danmokou.SM.SMHandoff)
  parent: Danmokou.SM.PatternSM
  langs:
  - csharp
  - vb
  name: Start(SMHandoff)
  nameWithType: PatternSM.Start(SMHandoff)
  fullName: Danmokou.SM.PatternSM.Start(Danmokou.SM.SMHandoff)
  type: Method
  source:
    id: Start
    path: ''
    startLine: 14104
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public override async Task Start(SMHandoff smh)
    parameters:
    - id: smh
      type: Danmokou.SM.SMHandoff
    return:
      type: Task
    content.vb: Public Overrides Function Start(smh As SMHandoff) As Task
  overridden: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  overload: Danmokou.SM.PatternSM.Start*
  modifiers.csharp:
  - public
  - override
  - async
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Danmokou.SM.ScriptTSM
  commentId: T:Danmokou.SM.ScriptTSM
  name: ScriptTSM
  nameWithType: ScriptTSM
  fullName: Danmokou.SM.ScriptTSM
- uid: Danmokou.SM
  commentId: N:Danmokou.SM
  name: Danmokou.SM
  nameWithType: Danmokou.SM
  fullName: Danmokou.SM
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Danmokou.SM.StateMachine
  commentId: T:Danmokou.SM.StateMachine
  parent: Danmokou.SM
  name: StateMachine
  nameWithType: StateMachine
  fullName: Danmokou.SM.StateMachine
- uid: Danmokou.SM.SequentialSM
  commentId: T:Danmokou.SM.SequentialSM
  parent: Danmokou.SM
  name: SequentialSM
  nameWithType: SequentialSM
  fullName: Danmokou.SM.SequentialSM
- uid: EnvFrameAttacher
  commentId: '!:EnvFrameAttacher'
  isExternal: true
  name: EnvFrameAttacher
  nameWithType: EnvFrameAttacher
  fullName: EnvFrameAttacher
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.SM.PatternSM.Props*
  commentId: Overload:Danmokou.SM.PatternSM.Props
  name: Props
  nameWithType: PatternSM.Props
  fullName: Danmokou.SM.PatternSM.Props
- uid: Danmokou.SM.PatternProperties
  commentId: T:Danmokou.SM.PatternProperties
  parent: Danmokou.SM
  name: PatternProperties
  nameWithType: PatternProperties
  fullName: Danmokou.SM.PatternProperties
- uid: Danmokou.SM.PatternSM.Phases*
  commentId: Overload:Danmokou.SM.PatternSM.Phases
  name: Phases
  nameWithType: PatternSM.Phases
  fullName: Danmokou.SM.PatternSM.Phases
- uid: Danmokou.SM.PhaseSM[]
  isExternal: true
  name: PhaseSM[]
  nameWithType: PhaseSM[]
  fullName: Danmokou.SM.PhaseSM[]
  nameWithType.vb: PhaseSM()
  fullName.vb: Danmokou.SM.PhaseSM()
  name.vb: PhaseSM()
  spec.csharp:
  - uid: Danmokou.SM.PhaseSM
    name: PhaseSM
    nameWithType: PhaseSM
    fullName: Danmokou.SM.PhaseSM
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Danmokou.SM.PhaseSM
    name: PhaseSM
    nameWithType: PhaseSM
    fullName: Danmokou.SM.PhaseSM
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.SM.PatternSM.EnvFrame*
  commentId: Overload:Danmokou.SM.PatternSM.EnvFrame
  name: EnvFrame
  nameWithType: PatternSM.EnvFrame
  fullName: Danmokou.SM.PatternSM.EnvFrame
- uid: System.Nullable{EnvFrame}
  commentId: T:System.Nullable{EnvFrame}
  parent: System
  definition: System.Nullable`1
  name: Nullable<EnvFrame>
  nameWithType: Nullable<EnvFrame>
  fullName: System.Nullable<EnvFrame>
  nameWithType.vb: Nullable(Of EnvFrame)
  fullName.vb: System.Nullable(Of EnvFrame)
  name.vb: Nullable(Of EnvFrame)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EnvFrame
    name: EnvFrame
    nameWithType: EnvFrame
    fullName: EnvFrame
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EnvFrame
    name: EnvFrame
    nameWithType: EnvFrame
    fullName: EnvFrame
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.PatternSM.#ctor*
  commentId: Overload:Danmokou.SM.PatternSM.#ctor
  name: PatternSM
  nameWithType: PatternSM.PatternSM
  fullName: Danmokou.SM.PatternSM.PatternSM
- uid: Danmokou.SM.StateMachine[]
  isExternal: true
  name: StateMachine[]
  nameWithType: StateMachine[]
  fullName: Danmokou.SM.StateMachine[]
  nameWithType.vb: StateMachine()
  fullName.vb: Danmokou.SM.StateMachine()
  name.vb: StateMachine()
  spec.csharp:
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  commentId: M:Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  parent: Danmokou.SM.SequentialSM
  name: Start(SMHandoff)
  nameWithType: SequentialSM.Start(SMHandoff)
  fullName: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  spec.csharp:
  - uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
    name: Start
    nameWithType: SequentialSM.Start
    fullName: Danmokou.SM.SequentialSM.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.SM.SMHandoff
    name: SMHandoff
    nameWithType: SMHandoff
    fullName: Danmokou.SM.SMHandoff
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
    name: Start
    nameWithType: SequentialSM.Start
    fullName: Danmokou.SM.SequentialSM.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.SM.SMHandoff
    name: SMHandoff
    nameWithType: SMHandoff
    fullName: Danmokou.SM.SMHandoff
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.PatternSM.Start*
  commentId: Overload:Danmokou.SM.PatternSM.Start
  name: Start
  nameWithType: PatternSM.Start
  fullName: Danmokou.SM.PatternSM.Start
- uid: Danmokou.SM.SMHandoff
  commentId: T:Danmokou.SM.SMHandoff
  parent: Danmokou.SM
  name: SMHandoff
  nameWithType: SMHandoff
  fullName: Danmokou.SM.SMHandoff
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
