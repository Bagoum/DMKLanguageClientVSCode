### YamlMime:ManagedReference
items:
- uid: Danmokou.DMath.Functions.ExM
  commentId: T:Danmokou.DMath.Functions.ExM
  id: ExM
  parent: Danmokou.DMath.Functions
  children:
  - Danmokou.DMath.Functions.ExM.__Combine(System.Int32,System.Int32,System.Int32)
  - Danmokou.DMath.Functions.ExM._constNamedTimer(System.String)
  - Danmokou.DMath.Functions.ExM.Abs(tfloat)
  - Danmokou.DMath.Functions.ExM.ACos(tfloat)
  - Danmokou.DMath.Functions.ExM.ACosR(tfloat)
  - Danmokou.DMath.Functions.ExM.Add``1(TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExM.AddA(trv2,tfloat)
  - Danmokou.DMath.Functions.ExM.AddNV(trv2,tv2)
  - Danmokou.DMath.Functions.ExM.AddNVA(trv2,tv2,tfloat)
  - Danmokou.DMath.Functions.ExM.AddRV(trv2,tv2)
  - Danmokou.DMath.Functions.ExM.AddRVA(trv2,tv3)
  - Danmokou.DMath.Functions.ExM.ArrayIndex``1(TEx{``0[]},TEx{System.Int32})
  - Danmokou.DMath.Functions.ExM.ATan(tv2)
  - Danmokou.DMath.Functions.ExM.ATan2(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.ATanR(tv2)
  - Danmokou.DMath.Functions.ExM.ATanR2(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.BlockFloor(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.BlockRound(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.BounceX(tfloat,tv2,tv2)
  - Danmokou.DMath.Functions.ExM.BounceY(tfloat,tv2,tv2)
  - Danmokou.DMath.Functions.ExM.Ceil(tfloat)
  - Danmokou.DMath.Functions.ExM.CFeature``1
  - Danmokou.DMath.Functions.ExM.Clamp(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Clamp01(tfloat)
  - Danmokou.DMath.Functions.ExM.Colliding(System.Func{TExArgCtx,TEx{Bullet}})
  - Danmokou.DMath.Functions.ExM.CollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  - Danmokou.DMath.Functions.ExM.Complement(tfloat)
  - Danmokou.DMath.Functions.ExM.Cos(tfloat)
  - Danmokou.DMath.Functions.ExM.CosDeg(tfloat)
  - Danmokou.DMath.Functions.ExM.Cosine(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.CosSin(tfloat)
  - Danmokou.DMath.Functions.ExM.CosSinDeg(tfloat)
  - Danmokou.DMath.Functions.ExM.DCosine(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Decrement(tfloat)
  - Danmokou.DMath.Functions.ExM.DecrementSubtract(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.DegDiff(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.DegIntoRange(tfloat)
  - Danmokou.DMath.Functions.ExM.DegRad(tfloat)
  - Danmokou.DMath.Functions.ExM.dFloor(Ex)
  - Danmokou.DMath.Functions.ExM.Diff(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Dist(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.DistToWall(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.Div``1(TEx{``0},tfloat)
  - Danmokou.DMath.Functions.ExM.DivInv(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.DSine(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Exp(tfloat)
  - Danmokou.DMath.Functions.ExM.exP1M(Ex,Ex)
  - Danmokou.DMath.Functions.ExM.exP2M(Ex,Ex)
  - Danmokou.DMath.Functions.ExM.exPM(Ex,Ex,Ex)
  - Danmokou.DMath.Functions.ExM.FDiv(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Floor(tfloat)
  - Danmokou.DMath.Functions.ExM.FrameNumber
  - Danmokou.DMath.Functions.ExM.FromID(System.String)
  - Danmokou.DMath.Functions.ExM.Height(tfloat,tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.HighCut(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.HighPass(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.HPi
  - Danmokou.DMath.Functions.ExM.HPRatio(TEx{BehaviorEntity})
  - Danmokou.DMath.Functions.ExM.IfPowerGTP``1(System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.Increment(tfloat)
  - Danmokou.DMath.Functions.ExM.inst
  - Danmokou.DMath.Functions.ExM.Instance
  - Danmokou.DMath.Functions.ExM.Is1CC
  - Danmokou.DMath.Functions.ExM.LaserLastActiveT(System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}})
  - Danmokou.DMath.Functions.ExM.LBEH(TEx{BehaviorEntity})
  - Danmokou.DMath.Functions.ExM.Let``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.LetBDSL2``2(System.ValueTuple{System.String,UncompiledCode{``1}}[],System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.LetFloats``1(System.ValueTuple{System.String,ExBPY}[],System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.LetV2s``1(System.ValueTuple{System.String,ExTP}[],System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.Limit(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Linear(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Ln(tfloat)
  - Danmokou.DMath.Functions.ExM.Logsum(ExBPY,UncompiledCode{System.Single}[])
  - Danmokou.DMath.Functions.ExM.LPlayer
  - Danmokou.DMath.Functions.ExM.LPlayerTrue
  - Danmokou.DMath.Functions.ExM.Mag(tv2)
  - Danmokou.DMath.Functions.ExM.Mag2(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Max(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.MaxA(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Min(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.MinA(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.MIndex``1(TEx{``0[]},TEx{System.Single})
  - Danmokou.DMath.Functions.ExM.Mine``1
  - Danmokou.DMath.Functions.ExM.Mul``1(tfloat,TEx{``0})
  - Danmokou.DMath.Functions.ExM.MulComplement(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.MulInt(TEx{System.Int32},TEx{System.Int32})
  - Danmokou.DMath.Functions.ExM.MulRev``1(TEx{``0},tfloat)
  - Danmokou.DMath.Functions.ExM.Neg(tfloat)
  - Danmokou.DMath.Functions.ExM.Negate``1(TEx{``0})
  - Danmokou.DMath.Functions.ExM.Norm(tv2)
  - Danmokou.DMath.Functions.ExM.Norm3(tv3)
  - Danmokou.DMath.Functions.ExM.NPow(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Opacity(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.OptionAngle(System.Func{TExArgCtx,TEx{FireOption}})
  - Danmokou.DMath.Functions.ExM.OptionLocation(System.Func{TExArgCtx,TEx{FireOption}})
  - Danmokou.DMath.Functions.ExM.P1(Ex)
  - Danmokou.DMath.Functions.ExM.P1M(System.Int32,Ex)
  - Danmokou.DMath.Functions.ExM.P2(Ex)
  - Danmokou.DMath.Functions.ExM.P2M(System.Int32,Ex)
  - Danmokou.DMath.Functions.ExM.PhotosTaken(TEx{BehaviorEntity})
  - Danmokou.DMath.Functions.ExM.Pi
  - Danmokou.DMath.Functions.ExM.PlayerFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerID(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  - Danmokou.DMath.Functions.ExM.PlayerMarisaADir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  - Danmokou.DMath.Functions.ExM.PlayerMarisaAPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  - Danmokou.DMath.Functions.ExM.PlayerPastDir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  - Danmokou.DMath.Functions.ExM.PlayerPastPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  - Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PlayerUnFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  - Danmokou.DMath.Functions.ExM.PM(System.Int32,System.Int32,Ex)
  - Danmokou.DMath.Functions.ExM.Pow``1(TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExM.Power
  - Danmokou.DMath.Functions.ExM.PowerF
  - Danmokou.DMath.Functions.ExM.PowerIndex
  - Danmokou.DMath.Functions.ExM.PowSub(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RadDeg(tfloat)
  - Danmokou.DMath.Functions.ExM.RadDiff(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.RadDiffCCW(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.RadDiffCW(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.RadIntoRange(tfloat)
  - Danmokou.DMath.Functions.ExM.RadToNeg(tfloat)
  - Danmokou.DMath.Functions.ExM.RadToPos(tfloat)
  - Danmokou.DMath.Functions.ExM.Rand(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Randpm1
  - Danmokou.DMath.Functions.ExM.Reference``1(System.String)
  - Danmokou.DMath.Functions.ExM.ReferenceLet``1(System.String)
  - Danmokou.DMath.Functions.ExM.ReferenceSafe``1(System.String,System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.Reg2Star(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Reg2StarR(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RegPoly(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RegPolyR(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RegSoftStar(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RegSoftStarR(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.RetrieveHoisted``1(ReflectEx.Hoist{``0},System.Func{TExArgCtx,TEx{System.Single}})
  - Danmokou.DMath.Functions.ExM.RetrieveHoisted0``1(ReflectEx.Hoist{``0})
  - Danmokou.DMath.Functions.ExM.Round(tfloat)
  - Danmokou.DMath.Functions.ExM.RV2A(trv2)
  - Danmokou.DMath.Functions.ExM.RV2NX(trv2)
  - Danmokou.DMath.Functions.ExM.RV2NY(trv2)
  - Danmokou.DMath.Functions.ExM.RV2RX(trv2)
  - Danmokou.DMath.Functions.ExM.RV2RY(trv2)
  - Danmokou.DMath.Functions.ExM.Set``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  - Danmokou.DMath.Functions.ExM.Sign(tfloat)
  - Danmokou.DMath.Functions.ExM.Sin(tfloat)
  - Danmokou.DMath.Functions.ExM.SinDeg(tfloat)
  - Danmokou.DMath.Functions.ExM.Sine(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Softmax(ExBPY,UncompiledCode{System.Single}[])
  - Danmokou.DMath.Functions.ExM.Sqr(tfloat)
  - Danmokou.DMath.Functions.ExM.SqrDist(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.SqrMag(tv2)
  - Danmokou.DMath.Functions.ExM.SqrMag2(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.SqrMag3(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Sqrt(tfloat)
  - Danmokou.DMath.Functions.ExM.SRand(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.SRand01(tfloat)
  - Danmokou.DMath.Functions.ExM.SRandpm1(tfloat)
  - Danmokou.DMath.Functions.ExM.Sub``1(TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExM.SubMax0(tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Superpose``1(tfloat,TEx{``0},tfloat,TEx{``0})
  - Danmokou.DMath.Functions.ExM.SuperposeC``1(tfloat,TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExM.SWing(tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.SWing2(tfloat,tfloat,tfloat,tfloat,tfloat,tfloat)
  - Danmokou.DMath.Functions.ExM.Tan(tfloat)
  - Danmokou.DMath.Functions.ExM.Tau
  - Danmokou.DMath.Functions.ExM.Timer(TEx{ETime.Timer})
  - Danmokou.DMath.Functions.ExM.TimerSec(TEx{ETime.Timer})
  - Danmokou.DMath.Functions.ExM.ToWall(tv2,tv2)
  - Danmokou.DMath.Functions.ExM.Twau
  - Danmokou.DMath.Functions.ExM.UnCollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  - Danmokou.DMath.Functions.ExM.V2X(tv2)
  - Danmokou.DMath.Functions.ExM.V2Y(tv2)
  - Danmokou.DMath.Functions.ExM.v3Mag(tv3)
  - Danmokou.DMath.Functions.ExM.v3SqrMag(tv3)
  - Danmokou.DMath.Functions.ExM.XMax
  - Danmokou.DMath.Functions.ExM.XMaxPlus1
  - Danmokou.DMath.Functions.ExM.XMin
  - Danmokou.DMath.Functions.ExM.XMinMinus1
  - Danmokou.DMath.Functions.ExM.XWidth
  - Danmokou.DMath.Functions.ExM.YHeight
  - Danmokou.DMath.Functions.ExM.YMax
  - Danmokou.DMath.Functions.ExM.YMaxPlus1
  - Danmokou.DMath.Functions.ExM.YMin
  - Danmokou.DMath.Functions.ExM.YMinMinus1
  langs:
  - csharp
  - vb
  name: ExM
  nameWithType: ExM
  fullName: Danmokou.DMath.Functions.ExM
  type: Class
  source:
    id: ExM
    path: ''
    startLine: 11439
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nA repository for generic expression mathematics.\n<br />Most of the math library is implemented in the DMath classes beginning with ExM.\n"
  example: []
  syntax:
    content: public static class ExM
    content.vb: Public Module ExM
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Danmokou.DMath.Functions.ExM.YMin
  commentId: M:Danmokou.DMath.Functions.ExM.YMin
  id: YMin
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: YMin()
  nameWithType: ExM.YMin()
  fullName: Danmokou.DMath.Functions.ExM.YMin()
  type: Method
  source:
    id: YMin
    path: ''
    startLine: 8944
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nY-coordinate of the lowest section of the playing field. (Default value: -4.5)\n"
  example: []
  syntax:
    content: public static TEx<float> YMin()
    return:
      type: TEx{System.Single}
      description: ''
    content.vb: Public Shared Function YMin As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.YMin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.YMax
  commentId: M:Danmokou.DMath.Functions.ExM.YMax
  id: YMax
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: YMax()
  nameWithType: ExM.YMax()
  fullName: Danmokou.DMath.Functions.ExM.YMax()
  type: Method
  source:
    id: YMax
    path: ''
    startLine: 8949
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nY-coordinate of the highest section of the playing field. (Default value: 4.1)\n"
  example: []
  syntax:
    content: public static TEx<float> YMax()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function YMax As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.YMax*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.XMin
  commentId: M:Danmokou.DMath.Functions.ExM.XMin
  id: XMin
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: XMin()
  nameWithType: ExM.XMin()
  fullName: Danmokou.DMath.Functions.ExM.XMin()
  type: Method
  source:
    id: XMin
    path: ''
    startLine: 8955
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nX-coordinate of the leftmost section of the playing field. (Default value: -3.6)\n"
  example: []
  syntax:
    content: public static TEx<float> XMin()
    return:
      type: TEx{System.Single}
      description: ''
    content.vb: Public Shared Function XMin As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.XMin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.XMax
  commentId: M:Danmokou.DMath.Functions.ExM.XMax
  id: XMax
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: XMax()
  nameWithType: ExM.XMax()
  fullName: Danmokou.DMath.Functions.ExM.XMax()
  type: Method
  source:
    id: XMax
    path: ''
    startLine: 8960
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nX-coordinate of the rightmost section of the playing field. (Default value: 3.6)\n"
  example: []
  syntax:
    content: public static TEx<float> XMax()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function XMax As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.XMax*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.YMinMinus1
  commentId: M:Danmokou.DMath.Functions.ExM.YMinMinus1
  id: YMinMinus1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: YMinMinus1()
  nameWithType: ExM.YMinMinus1()
  fullName: Danmokou.DMath.Functions.ExM.YMinMinus1()
  type: Method
  source:
    id: YMinMinus1
    path: ''
    startLine: 8966
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nYMin - 1\n"
  example: []
  syntax:
    content: public static TEx<float> YMinMinus1()
    return:
      type: TEx{System.Single}
      description: ''
    content.vb: Public Shared Function YMinMinus1 As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.YMinMinus1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.YMaxPlus1
  commentId: M:Danmokou.DMath.Functions.ExM.YMaxPlus1
  id: YMaxPlus1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: YMaxPlus1()
  nameWithType: ExM.YMaxPlus1()
  fullName: Danmokou.DMath.Functions.ExM.YMaxPlus1()
  type: Method
  source:
    id: YMaxPlus1
    path: ''
    startLine: 8972
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nYMax + 1\n"
  example: []
  syntax:
    content: public static TEx<float> YMaxPlus1()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function YMaxPlus1 As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.YMaxPlus1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.XMinMinus1
  commentId: M:Danmokou.DMath.Functions.ExM.XMinMinus1
  id: XMinMinus1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: XMinMinus1()
  nameWithType: ExM.XMinMinus1()
  fullName: Danmokou.DMath.Functions.ExM.XMinMinus1()
  type: Method
  source:
    id: XMinMinus1
    path: ''
    startLine: 8978
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nXMin - 1\n"
  example: []
  syntax:
    content: public static TEx<float> XMinMinus1()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function XMinMinus1 As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.XMinMinus1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.XMaxPlus1
  commentId: M:Danmokou.DMath.Functions.ExM.XMaxPlus1
  id: XMaxPlus1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: XMaxPlus1()
  nameWithType: ExM.XMaxPlus1()
  fullName: Danmokou.DMath.Functions.ExM.XMaxPlus1()
  type: Method
  source:
    id: XMaxPlus1
    path: ''
    startLine: 8985
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nXMax + 1\n"
  example: []
  syntax:
    content: public static TEx<float> XMaxPlus1()
    return:
      type: TEx{System.Single}
      description: ''
    content.vb: Public Shared Function XMaxPlus1 As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.XMaxPlus1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.XWidth
  commentId: M:Danmokou.DMath.Functions.ExM.XWidth
  id: XWidth
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: XWidth()
  nameWithType: ExM.XWidth()
  fullName: Danmokou.DMath.Functions.ExM.XWidth()
  type: Method
  source:
    id: XWidth
    path: ''
    startLine: 8991
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWidth of the playing field (XMax - XMin)\n"
  example: []
  syntax:
    content: public static TEx<float> XWidth()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function XWidth As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.XWidth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.YHeight
  commentId: M:Danmokou.DMath.Functions.ExM.YHeight
  id: YHeight
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: YHeight()
  nameWithType: ExM.YHeight()
  fullName: Danmokou.DMath.Functions.ExM.YHeight()
  type: Method
  source:
    id: YHeight
    path: ''
    startLine: 8996
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nHeight of the playing field (YMax - YMin)\n"
  example: []
  syntax:
    content: public static TEx<float> YHeight()
    return:
      type: TEx{System.Single}
    content.vb: Public Shared Function YHeight As TEx(Of Single)
  overload: Danmokou.DMath.Functions.ExM.YHeight*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.LPlayer
  commentId: M:Danmokou.DMath.Functions.ExM.LPlayer
  id: LPlayer
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LPlayer()
  nameWithType: ExM.LPlayer()
  fullName: Danmokou.DMath.Functions.ExM.LPlayer()
  type: Method
  source:
    id: LPlayer
    path: ''
    startLine: 9002
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the location of the player as visible to enemies.\n"
  example: []
  syntax:
    content: public static TEx<Vector2> LPlayer()
    return:
      type: TEx{Vector2}
      description: ''
    content.vb: Public Shared Function LPlayer As TEx(Of Vector2)
  overload: Danmokou.DMath.Functions.ExM.LPlayer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.LPlayerTrue
  commentId: M:Danmokou.DMath.Functions.ExM.LPlayerTrue
  id: LPlayerTrue
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LPlayerTrue()
  nameWithType: ExM.LPlayerTrue()
  fullName: Danmokou.DMath.Functions.ExM.LPlayerTrue()
  type: Method
  source:
    id: LPlayerTrue
    path: ''
    startLine: 9009
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the true location of the player. Use this for positioning player shots.\n"
  example: []
  syntax:
    content: public static TEx<Vector2> LPlayerTrue()
    return:
      type: TEx{Vector2}
      description: ''
    content.vb: Public Shared Function LPlayerTrue As TEx(Of Vector2)
  overload: Danmokou.DMath.Functions.ExM.LPlayerTrue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.LBEH(TEx{BehaviorEntity})
  commentId: M:Danmokou.DMath.Functions.ExM.LBEH(TEx{BehaviorEntity})
  id: LBEH(TEx{BehaviorEntity})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LBEH(TEx<BehaviorEntity>)
  nameWithType: ExM.LBEH(TEx<BehaviorEntity>)
  fullName: Danmokou.DMath.Functions.ExM.LBEH(TEx<BehaviorEntity>)
  type: Method
  source:
    id: LBEH
    path: ''
    startLine: 9015
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the location of the BehaviorEntity.\n"
  example: []
  syntax:
    content: public static TEx<Vector2> LBEH(TEx<BehaviorEntity> beh)
    parameters:
    - id: beh
      type: TEx{BehaviorEntity}
    return:
      type: TEx{Vector2}
    content.vb: Public Shared Function LBEH(beh As TEx(Of BehaviorEntity)) As TEx(Of Vector2)
  overload: Danmokou.DMath.Functions.ExM.LBEH*
  nameWithType.vb: ExM.LBEH(TEx(Of BehaviorEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.LBEH(TEx(Of BehaviorEntity))
  name.vb: LBEH(TEx(Of BehaviorEntity))
- uid: Danmokou.DMath.Functions.ExM.DistToWall(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.DistToWall(tv2,tv2)
  id: DistToWall(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DistToWall(tv2, tv2)
  nameWithType: ExM.DistToWall(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.DistToWall(tv2, tv2)
  type: Method
  source:
    id: DistToWall
    path: ''
    startLine: 9022
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static tfloat DistToWall(tv2 from, tv2 dir)
    parameters:
    - id: from
      type: tv2
    - id: dir
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function DistToWall(from As tv2, dir As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DistToWall*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ToWall(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.ToWall(tv2,tv2)
  id: ToWall(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ToWall(tv2, tv2)
  nameWithType: ExM.ToWall(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.ToWall(tv2, tv2)
  type: Method
  source:
    id: ToWall
    path: ''
    startLine: 9023
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static tv2 ToWall(tv2 from, tv2 dir)
    parameters:
    - id: from
      type: tv2
    - id: dir
      type: tv2
    return:
      type: tv2
    content.vb: Public Shared Function ToWall(from As tv2, dir As tv2) As tv2
  overload: Danmokou.DMath.Functions.ExM.ToWall*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Reference``1(System.String)
  commentId: M:Danmokou.DMath.Functions.ExM.Reference``1(System.String)
  id: Reference``1(System.String)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Reference<T>(String)
  nameWithType: ExM.Reference<T>(String)
  fullName: Danmokou.DMath.Functions.ExM.Reference<T>(System.String)
  type: Method
  source:
    id: Reference
    path: ''
    startLine: 10650
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReference a value defined in a let function, or bound within a GCX, or bound within bullet data,\nor saved within bullet data.\n<br />&amp;x = &amp; x = reference(x)\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> Reference<T>(string alias)
    parameters:
    - id: alias
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: ''
    content.vb: Public Shared Function Reference(Of T)(alias As String) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.Reference*
  nameWithType.vb: ExM.Reference(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Reference(Of T)(System.String)
  name.vb: Reference(Of T)(String)
- uid: Danmokou.DMath.Functions.ExM.ReferenceLet``1(System.String)
  commentId: M:Danmokou.DMath.Functions.ExM.ReferenceLet``1(System.String)
  id: ReferenceLet``1(System.String)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ReferenceLet<T>(String)
  nameWithType: ExM.ReferenceLet<T>(String)
  fullName: Danmokou.DMath.Functions.ExM.ReferenceLet<T>(System.String)
  type: Method
  source:
    id: ReferenceLet
    path: ''
    startLine: 10657
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReference a value defined in a let function.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> ReferenceLet<T>(string alias)
    parameters:
    - id: alias
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function ReferenceLet(Of T)(alias As String) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.ReferenceLet*
  nameWithType.vb: ExM.ReferenceLet(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.ReferenceLet(Of T)(System.String)
  name.vb: ReferenceLet(Of T)(String)
- uid: Danmokou.DMath.Functions.ExM.ReferenceSafe``1(System.String,System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.ReferenceSafe``1(System.String,System.Func{TExArgCtx,TEx{``0}})
  id: ReferenceSafe``1(System.String,System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ReferenceSafe<T>(String, Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.ReferenceSafe<T>(String, Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.ReferenceSafe<T>(System.String, System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: ReferenceSafe
    path: ''
    startLine: 10666
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReference a value saved within bullet data, or return a default value if it does not exist.\n<br />You only need to use this for bullet controls, as scoped variable usage (within movement functions) will ensure that the variable exists.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> ReferenceSafe<T>(string alias, Func<TExArgCtx, TEx<T>> deflt)
    parameters:
    - id: alias
      type: System.String
    - id: deflt
      type: System.Func{TExArgCtx,TEx{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function ReferenceSafe(Of T)(alias As String, deflt As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.ReferenceSafe*
  nameWithType.vb: ExM.ReferenceSafe(Of T)(String, Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.ReferenceSafe(Of T)(System.String, System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: ReferenceSafe(Of T)(String, Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.RetrieveHoisted``1(ReflectEx.Hoist{``0},System.Func{TExArgCtx,TEx{System.Single}})
  commentId: M:Danmokou.DMath.Functions.ExM.RetrieveHoisted``1(ReflectEx.Hoist{``0},System.Func{TExArgCtx,TEx{System.Single}})
  id: RetrieveHoisted``1(ReflectEx.Hoist{``0},System.Func{TExArgCtx,TEx{System.Single}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RetrieveHoisted<T>(ReflectEx.Hoist<T>, Func<TExArgCtx, TEx<Single>>)
  nameWithType: ExM.RetrieveHoisted<T>(ReflectEx.Hoist<T>, Func<TExArgCtx, TEx<Single>>)
  fullName: Danmokou.DMath.Functions.ExM.RetrieveHoisted<T>(ReflectEx.Hoist<T>, System.Func<TExArgCtx, TEx<System.Single>>)
  type: Method
  source:
    id: RetrieveHoisted
    path: ''
    startLine: 10676
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nRetrieve a publicly-shared hoisted variable at the given (name, index) pair.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> RetrieveHoisted<T>(ReflectEx.Hoist<T> hoist, Func<TExArgCtx, TEx<float>> indexer)
    parameters:
    - id: hoist
      type: ReflectEx.Hoist{{T}}
      description: Hoisted variable name
    - id: indexer
      type: System.Func{TExArgCtx,TEx{System.Single}}
      description: Indexer
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function RetrieveHoisted(Of T)(hoist As ReflectEx.Hoist(Of T), indexer As Func(Of TExArgCtx, TEx(Of Single))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.RetrieveHoisted*
  nameWithType.vb: ExM.RetrieveHoisted(Of T)(ReflectEx.Hoist(Of T), Func(Of TExArgCtx, TEx(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.RetrieveHoisted(Of T)(ReflectEx.Hoist(Of T), System.Func(Of TExArgCtx, TEx(Of System.Single)))
  name.vb: RetrieveHoisted(Of T)(ReflectEx.Hoist(Of T), Func(Of TExArgCtx, TEx(Of Single)))
- uid: Danmokou.DMath.Functions.ExM.RetrieveHoisted0``1(ReflectEx.Hoist{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.RetrieveHoisted0``1(ReflectEx.Hoist{``0})
  id: RetrieveHoisted0``1(ReflectEx.Hoist{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RetrieveHoisted0<T>(ReflectEx.Hoist<T>)
  nameWithType: ExM.RetrieveHoisted0<T>(ReflectEx.Hoist<T>)
  fullName: Danmokou.DMath.Functions.ExM.RetrieveHoisted0<T>(ReflectEx.Hoist<T>)
  type: Method
  source:
    id: RetrieveHoisted0
    path: ''
    startLine: 10685
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nRetrieve a publicly-shared hoisted variable with the indexer set to 0.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> RetrieveHoisted0<T>(ReflectEx.Hoist<T> hoist)
    parameters:
    - id: hoist
      type: ReflectEx.Hoist{{T}}
      description: Hoisted variable name
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function RetrieveHoisted0(Of T)(hoist As ReflectEx.Hoist(Of T)) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.RetrieveHoisted0*
  nameWithType.vb: ExM.RetrieveHoisted0(Of T)(ReflectEx.Hoist(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.RetrieveHoisted0(Of T)(ReflectEx.Hoist(Of T))
  name.vb: RetrieveHoisted0(Of T)(ReflectEx.Hoist(Of T))
- uid: Danmokou.DMath.Functions.ExM.LetBDSL2``2(System.ValueTuple{System.String,UncompiledCode{``1}}[],System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.LetBDSL2``2(System.ValueTuple{System.String,UncompiledCode{``1}}[],System.Func{TExArgCtx,TEx{``0}})
  id: LetBDSL2``2(System.ValueTuple{System.String,UncompiledCode{``1}}[],System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LetBDSL2<T, V>((String, UncompiledCode<V>)[], Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.LetBDSL2<T, V>((String, UncompiledCode<V>)[], Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.LetBDSL2<T, V>(System.ValueTuple<System.String, UncompiledCode<V>>[], System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: LetBDSL2
    path: ''
    startLine: 10696
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAssign local variables that can be repeatedly used without reexecution via the ReferenceLet (rflet) function.\n<br />Note: this is only for backwards compatibility and is superseded by block variable assignment.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> LetBDSL2<T, V>((string, UncompiledCode<V>)[] aliases, Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: aliases
      type: System.ValueTuple{System.String,UncompiledCode{{V}}}[]
      description: List of each variable and its assigned vector value
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: Code to execute within the scope of the variables
    typeParameters:
    - id: T
    - id: V
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function LetBDSL2(Of T, V)(aliases As(String, UncompiledCode(Of V))(Of String , UncompiledCode(Of V))(), inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.LetBDSL2*
  nameWithType.vb: ExM.LetBDSL2(Of T, V)((String, UncompiledCode(Of V))(Of String, UncompiledCode(Of V))(), Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.LetBDSL2(Of T, V)(System.ValueTuple(Of System.String, UncompiledCode(Of V))(), System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: LetBDSL2(Of T, V)((String, UncompiledCode(Of V))(Of String, UncompiledCode(Of V))(), Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.LetFloats``1(System.ValueTuple{System.String,ExBPY}[],System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.LetFloats``1(System.ValueTuple{System.String,ExBPY}[],System.Func{TExArgCtx,TEx{``0}})
  id: LetFloats``1(System.ValueTuple{System.String,ExBPY}[],System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LetFloats<T>((String, ExBPY)[], Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.LetFloats<T>((String, ExBPY)[], Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.LetFloats<T>(System.ValueTuple<System.String, ExBPY>[], System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: LetFloats
    path: ''
    startLine: 10706
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAssign local variables that can be repeatedly used without reexecution via the Reference (&amp;) function.\nShortcut: ::\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> LetFloats<T>((string, ExBPY)[] aliases, Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: aliases
      type: System.ValueTuple{System.String,ExBPY}[]
      description: List of each variable and its assigned vector value
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: Code to execute within the scope of the variables
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function LetFloats(Of T)(aliases As(String, ExBPY)(Of String , ExBPY)(), inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.LetFloats*
  nameWithType.vb: ExM.LetFloats(Of T)((String, ExBPY)(Of String, ExBPY)(), Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.LetFloats(Of T)(System.ValueTuple(Of System.String, ExBPY)(), System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: LetFloats(Of T)((String, ExBPY)(Of String, ExBPY)(), Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.LetV2s``1(System.ValueTuple{System.String,ExTP}[],System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.LetV2s``1(System.ValueTuple{System.String,ExTP}[],System.Func{TExArgCtx,TEx{``0}})
  id: LetV2s``1(System.ValueTuple{System.String,ExTP}[],System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LetV2s<T>((String, ExTP)[], Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.LetV2s<T>((String, ExTP)[], Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.LetV2s<T>(System.ValueTuple<System.String, ExTP>[], System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: LetV2s
    path: ''
    startLine: 10716
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAssign local variables that can be repeatedly used without reexecution via the Reference (&amp;) function.\nShortcut: ::v2\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> LetV2s<T>((string, ExTP)[] aliases, Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: aliases
      type: System.ValueTuple{System.String,ExTP}[]
      description: List of each variable and its assigned vector value
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: Code to execute within the scope of the variables
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function LetV2s(Of T)(aliases As(String, ExTP)(Of String , ExTP)(), inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.LetV2s*
  nameWithType.vb: ExM.LetV2s(Of T)((String, ExTP)(Of String, ExTP)(), Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.LetV2s(Of T)(System.ValueTuple(Of System.String, ExTP)(), System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: LetV2s(Of T)((String, ExTP)(Of String, ExTP)(), Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.Let``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.Let``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  id: Let``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Let<T>(ReflectEx.Alias[], Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.Let<T>(ReflectEx.Alias[], Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.Let<T>(ReflectEx.Alias[], System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: Let
    path: ''
    startLine: 10725
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAssign local variables that can be repeatedly used without reexecution via the Reference (&amp;) function.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> Let<T>(ReflectEx.Alias[] aliases, Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: aliases
      type: ReflectEx.Alias[]
      description: List of each variable&apos;s type, name, and assigned value (eg. f myFloat 5 + t)
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: Code to execute within the scope of the variables
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function Let(Of T)(aliases As ReflectEx.Alias(), inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.Let*
  nameWithType.vb: ExM.Let(Of T)(ReflectEx.Alias(), Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Let(Of T)(ReflectEx.Alias(), System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: Let(Of T)(ReflectEx.Alias(), Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.Set``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.Set``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  id: Set``1(ReflectEx.Alias[],System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Set<T>(ReflectEx.Alias[], Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.Set<T>(ReflectEx.Alias[], Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.Set<T>(ReflectEx.Alias[], System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 10734
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAssign values to the BPI firing data. The values must already exist in the <xref href=\"Danmokou.DMath.PIData\" data-throw-if-not-resolved=\"false\"></xref> context.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> Set<T>(ReflectEx.Alias[] aliases, Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: aliases
      type: ReflectEx.Alias[]
      description: List of each variable&apos;s type, name, and assigned value (eg. f myFloat 5 + t)
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: Code to execute after values are set
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function Set(Of T)(aliases As ReflectEx.Alias(), inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.Set*
  nameWithType.vb: ExM.Set(Of T)(ReflectEx.Alias(), Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Set(Of T)(ReflectEx.Alias(), System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: Set(Of T)(ReflectEx.Alias(), Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.V2X(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.V2X(tv2)
  id: V2X(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: V2X(tv2)
  nameWithType: ExM.V2X(tv2)
  fullName: Danmokou.DMath.Functions.ExM.V2X(tv2)
  type: Method
  source:
    id: V2X
    path: ''
    startLine: 10746
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the x-component of a Vector2.\n"
  example: []
  syntax:
    content: public static tfloat V2X(tv2 tp)
    parameters:
    - id: tp
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function V2X(tp As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.V2X*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.V2Y(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.V2Y(tv2)
  id: V2Y(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: V2Y(tv2)
  nameWithType: ExM.V2Y(tv2)
  fullName: Danmokou.DMath.Functions.ExM.V2Y(tv2)
  type: Method
  source:
    id: V2Y
    path: ''
    startLine: 10751
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the y-component of a Vector2.\n"
  example: []
  syntax:
    content: public static tfloat V2Y(tv2 tp)
    parameters:
    - id: tp
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function V2Y(tp As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.V2Y*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RV2NX(trv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RV2NX(trv2)
  id: RV2NX(trv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RV2NX(trv2)
  nameWithType: ExM.RV2NX(trv2)
  fullName: Danmokou.DMath.Functions.ExM.RV2NX(trv2)
  type: Method
  source:
    id: RV2NX
    path: ''
    startLine: 10759
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the nonrotational X-component of an RV2.\n"
  example: []
  syntax:
    content: public static tfloat RV2NX(trv2 rv2)
    parameters:
    - id: rv2
      type: trv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RV2NX(rv2 As trv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RV2NX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RV2NY(trv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RV2NY(trv2)
  id: RV2NY(trv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RV2NY(trv2)
  nameWithType: ExM.RV2NY(trv2)
  fullName: Danmokou.DMath.Functions.ExM.RV2NY(trv2)
  type: Method
  source:
    id: RV2NY
    path: ''
    startLine: 10765
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the nonrotational Y-component of an RV2.\n"
  example: []
  syntax:
    content: public static tfloat RV2NY(trv2 rv2)
    parameters:
    - id: rv2
      type: trv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RV2NY(rv2 As trv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RV2NY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RV2RX(trv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RV2RX(trv2)
  id: RV2RX(trv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RV2RX(trv2)
  nameWithType: ExM.RV2RX(trv2)
  fullName: Danmokou.DMath.Functions.ExM.RV2RX(trv2)
  type: Method
  source:
    id: RV2RX
    path: ''
    startLine: 10771
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotational X-component of an RV2.\n"
  example: []
  syntax:
    content: public static tfloat RV2RX(trv2 rv2)
    parameters:
    - id: rv2
      type: trv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RV2RX(rv2 As trv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RV2RX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RV2RY(trv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RV2RY(trv2)
  id: RV2RY(trv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RV2RY(trv2)
  nameWithType: ExM.RV2RY(trv2)
  fullName: Danmokou.DMath.Functions.ExM.RV2RY(trv2)
  type: Method
  source:
    id: RV2RY
    path: ''
    startLine: 10777
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotational Y-component of an RV2.\n"
  example: []
  syntax:
    content: public static tfloat RV2RY(trv2 rv2)
    parameters:
    - id: rv2
      type: trv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RV2RY(rv2 As trv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RV2RY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RV2A(trv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RV2A(trv2)
  id: RV2A(trv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RV2A(trv2)
  nameWithType: ExM.RV2A(trv2)
  fullName: Danmokou.DMath.Functions.ExM.RV2A(trv2)
  type: Method
  source:
    id: RV2A
    path: ''
    startLine: 10783
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotational angle of an RV2.\n"
  example: []
  syntax:
    content: public static tfloat RV2A(trv2 rv2)
    parameters:
    - id: rv2
      type: trv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RV2A(rv2 As trv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RV2A*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.P1(Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.P1(Ex)
  id: P1(Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: P1(Ex)
  nameWithType: ExM.P1(Ex)
  fullName: Danmokou.DMath.Functions.ExM.P1(Ex)
  type: Method
  source:
    id: P1
    path: ''
    startLine: 10795
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWhen two firing indices have been combined via additive parametrization (see <xref href=\"Danmokou.Core.Parametrization\" data-throw-if-not-resolved=\"false\"></xref>), this retrieves the parent firing index.\n"
  example: []
  syntax:
    content: public static Ex P1(Ex t)
    parameters:
    - id: t
      type: Ex
    return:
      type: Ex
      description: ''
    content.vb: Public Shared Function P1(t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.P1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.P1M(System.Int32,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.P1M(System.Int32,Ex)
  id: P1M(System.Int32,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: P1M(Int32, Ex)
  nameWithType: ExM.P1M(Int32, Ex)
  fullName: Danmokou.DMath.Functions.ExM.P1M(System.Int32, Ex)
  type: Method
  source:
    id: P1M
    path: ''
    startLine: 10801
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWhen two firing indices have been combined via modular parametrization (see <xref href=\"Danmokou.Core.Parametrization\" data-throw-if-not-resolved=\"false\"></xref>), this retrieves the parent firing index.\n"
  example: []
  syntax:
    content: public static Ex P1M(int mod, Ex t)
    parameters:
    - id: mod
      type: System.Int32
    - id: t
      type: Ex
    return:
      type: Ex
      description: ''
    content.vb: Public Shared Function P1M(mod As Integer, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.P1M*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.exP1M(Ex,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.exP1M(Ex,Ex)
  id: exP1M(Ex,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: exP1M(Ex, Ex)
  nameWithType: ExM.exP1M(Ex, Ex)
  fullName: Danmokou.DMath.Functions.ExM.exP1M(Ex, Ex)
  type: Method
  source:
    id: exP1M
    path: ''
    startLine: 10805
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Ex exP1M(Ex mod, Ex t)
    parameters:
    - id: mod
      type: Ex
    - id: t
      type: Ex
    return:
      type: Ex
    content.vb: Public Shared Function exP1M(mod As Ex, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.exP1M*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.P2(Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.P2(Ex)
  id: P2(Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: P2(Ex)
  nameWithType: ExM.P2(Ex)
  fullName: Danmokou.DMath.Functions.ExM.P2(Ex)
  type: Method
  source:
    id: P2
    path: ''
    startLine: 10814
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWhen two firing indices have been combined via additive parametrization (see <xref href=\"Danmokou.Core.Parametrization\" data-throw-if-not-resolved=\"false\"></xref>), this retrieves the child firing index.\n"
  example: []
  syntax:
    content: public static Ex P2(Ex t)
    parameters:
    - id: t
      type: Ex
    return:
      type: Ex
      description: ''
    content.vb: Public Shared Function P2(t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.P2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.P2M(System.Int32,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.P2M(System.Int32,Ex)
  id: P2M(System.Int32,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: P2M(Int32, Ex)
  nameWithType: ExM.P2M(Int32, Ex)
  fullName: Danmokou.DMath.Functions.ExM.P2M(System.Int32, Ex)
  type: Method
  source:
    id: P2M
    path: ''
    startLine: 10820
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWhen two firing indices have been combined via modular parametrization (see <xref href=\"Danmokou.Core.Parametrization\" data-throw-if-not-resolved=\"false\"></xref>), this retrieves the child firing index.\n"
  example: []
  syntax:
    content: public static Ex P2M(int mod, Ex t)
    parameters:
    - id: mod
      type: System.Int32
    - id: t
      type: Ex
    return:
      type: Ex
      description: ''
    content.vb: Public Shared Function P2M(mod As Integer, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.P2M*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.exP2M(Ex,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.exP2M(Ex,Ex)
  id: exP2M(Ex,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: exP2M(Ex, Ex)
  nameWithType: ExM.exP2M(Ex, Ex)
  fullName: Danmokou.DMath.Functions.ExM.exP2M(Ex, Ex)
  type: Method
  source:
    id: exP2M
    path: ''
    startLine: 10825
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Ex exP2M(Ex mod, Ex t)
    parameters:
    - id: mod
      type: Ex
    - id: t
      type: Ex
    return:
      type: Ex
    content.vb: Public Shared Function exP2M(mod As Ex, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.exP2M*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.PM(System.Int32,System.Int32,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.PM(System.Int32,System.Int32,Ex)
  id: PM(System.Int32,System.Int32,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PM(Int32, Int32, Ex)
  nameWithType: ExM.PM(Int32, Int32, Ex)
  fullName: Danmokou.DMath.Functions.ExM.PM(System.Int32, System.Int32, Ex)
  type: Method
  source:
    id: PM
    path: ''
    startLine: 10837
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nWhen two firing indices have been combined via modular or additive parametrization (see <xref href=\"Danmokou.Core.Parametrization\" data-throw-if-not-resolved=\"false\"></xref>), this retrieves the firing index of any point in the chain.\nRoughly equivalent to mod SELF p1m CHILDREN.\n"
  example: []
  syntax:
    content: public static Ex PM(int self, int children, Ex t)
    parameters:
    - id: self
      type: System.Int32
      description: Mod size of the target point. Set to 0 to get the effect of additive parametrization.
    - id: children
      type: System.Int32
      description: Product of the mod sizes of all children. Set to 1 if this is the final point.
    - id: t
      type: Ex
      description: Index
    return:
      type: Ex
      description: ''
    content.vb: Public Shared Function PM(self As Integer, children As Integer, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.PM*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.exPM(Ex,Ex,Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.exPM(Ex,Ex,Ex)
  id: exPM(Ex,Ex,Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: exPM(Ex, Ex, Ex)
  nameWithType: ExM.exPM(Ex, Ex, Ex)
  fullName: Danmokou.DMath.Functions.ExM.exPM(Ex, Ex, Ex)
  type: Method
  source:
    id: exPM
    path: ''
    startLine: 10843
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Ex exPM(Ex self, Ex children, Ex t)
    parameters:
    - id: self
      type: Ex
    - id: children
      type: Ex
    - id: t
      type: Ex
    return:
      type: Ex
    content.vb: Public Shared Function exPM(self As Ex, children As Ex, t As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.exPM*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.__Combine(System.Int32,System.Int32,System.Int32)
  commentId: M:Danmokou.DMath.Functions.ExM.__Combine(System.Int32,System.Int32,System.Int32)
  id: __Combine(System.Int32,System.Int32,System.Int32)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: __Combine(Int32, Int32, Int32)
  nameWithType: ExM.__Combine(Int32, Int32, Int32)
  fullName: Danmokou.DMath.Functions.ExM.__Combine(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    id: __Combine
    path: ''
    startLine: 10849
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static int __Combine(int x, int y, int mod = 1024)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: mod
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function __Combine(x As Integer, y As Integer, mod As Integer = 1024) As Integer
  overload: Danmokou.DMath.Functions.ExM.__Combine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Rand(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Rand(tfloat,tfloat)
  id: Rand(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Rand(tfloat, tfloat)
  nameWithType: ExM.Rand(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Rand(tfloat, tfloat)
  type: Method
  source:
    id: Rand
    path: ''
    startLine: 10866
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns a random number.\nThis will return a random number every time it is called. It is unseeded. Do not use for movement functions.\n"
  example: []
  syntax:
    content: public static tfloat Rand(tfloat from, tfloat to)
    parameters:
    - id: from
      type: tfloat
      description: Minimum
    - id: to
      type: tfloat
      description: Maximum
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Rand(from As tfloat, to As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Rand*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Randpm1
  commentId: M:Danmokou.DMath.Functions.ExM.Randpm1
  id: Randpm1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Randpm1()
  nameWithType: ExM.Randpm1()
  fullName: Danmokou.DMath.Functions.ExM.Randpm1()
  type: Method
  source:
    id: Randpm1
    path: ''
    startLine: 10871
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nRandomly returns either -1 or 1.\n"
  example: []
  syntax:
    content: public static tfloat Randpm1()
    return:
      type: tfloat
    content.vb: Public Shared Function Randpm1 As tfloat
  overload: Danmokou.DMath.Functions.ExM.Randpm1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SRand(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SRand(tfloat,tfloat,tfloat)
  id: SRand(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SRand(tfloat, tfloat, tfloat)
  nameWithType: ExM.SRand(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SRand(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: SRand
    path: ''
    startLine: 10881
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns a pseudorandom value based on the seed function.\nThe seed function only has integer discrimination.\n"
  example: []
  syntax:
    content: public static tfloat SRand(tfloat from, tfloat to, tfloat seed)
    parameters:
    - id: from
      type: tfloat
      description: Minimum
    - id: to
      type: tfloat
      description: Maximum
    - id: seed
      type: tfloat
      description: Seed function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SRand(from As tfloat, to As tfloat, seed As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SRand*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SRand01(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SRand01(tfloat)
  id: SRand01(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SRand01(tfloat)
  nameWithType: ExM.SRand01(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SRand01(tfloat)
  type: Method
  source:
    id: SRand01
    path: ''
    startLine: 10888
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns either 0 or 1 based on the seed function.\nThe seed function only has integer discrimination.\n"
  example: []
  syntax:
    content: public static tfloat SRand01(tfloat seed)
    parameters:
    - id: seed
      type: tfloat
      description: Seed function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SRand01(seed As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SRand01*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SRandpm1(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SRandpm1(tfloat)
  id: SRandpm1(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SRandpm1(tfloat)
  nameWithType: ExM.SRandpm1(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SRandpm1(tfloat)
  type: Method
  source:
    id: SRandpm1
    path: ''
    startLine: 10895
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns either -1 or 1 based on the seed function.\nThe seed function only has integer discrimination.\n"
  example: []
  syntax:
    content: public static tfloat SRandpm1(tfloat seed)
    parameters:
    - id: seed
      type: tfloat
      description: Seed function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SRandpm1(seed As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SRandpm1*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Superpose``1(tfloat,TEx{``0},tfloat,TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Superpose``1(tfloat,TEx{``0},tfloat,TEx{``0})
  id: Superpose``1(tfloat,TEx{``0},tfloat,TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Superpose<T>(tfloat, TEx<T>, tfloat, TEx<T>)
  nameWithType: ExM.Superpose<T>(tfloat, TEx<T>, tfloat, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Superpose<T>(tfloat, TEx<T>, tfloat, TEx<T>)
  type: Method
  source:
    id: Superpose
    path: ''
    startLine: 10905
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns `c1*x1 + c2*x2`.\n"
  example: []
  syntax:
    content: public static TEx<T> Superpose<T>(tfloat c1, TEx<T> x1, tfloat c2, TEx<T> x2)
    parameters:
    - id: c1
      type: tfloat
    - id: x1
      type: TEx{{T}}
    - id: c2
      type: tfloat
    - id: x2
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
      description: ''
    content.vb: Public Shared Function Superpose(Of T)(c1 As tfloat, x1 As TEx(Of T), c2 As tfloat, x2 As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Superpose*
  nameWithType.vb: ExM.Superpose(Of T)(tfloat, TEx(Of T), tfloat, TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Superpose(Of T)(tfloat, TEx(Of T), tfloat, TEx(Of T))
  name.vb: Superpose(Of T)(tfloat, TEx(Of T), tfloat, TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.SuperposeC``1(tfloat,TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.SuperposeC``1(tfloat,TEx{``0},TEx{``0})
  id: SuperposeC``1(tfloat,TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SuperposeC<T>(tfloat, TEx<T>, TEx<T>)
  nameWithType: ExM.SuperposeC<T>(tfloat, TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.SuperposeC<T>(tfloat, TEx<T>, TEx<T>)
  type: Method
  source:
    id: SuperposeC
    path: ''
    startLine: 10910
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns `c*x1 + (1-c)*x2`.\n"
  example: []
  syntax:
    content: public static TEx<T> SuperposeC<T>(tfloat c, TEx<T> x1, TEx<T> x2)
    parameters:
    - id: c
      type: tfloat
    - id: x1
      type: TEx{{T}}
    - id: x2
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function SuperposeC(Of T)(c As tfloat, x1 As TEx(Of T), x2 As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.SuperposeC*
  nameWithType.vb: ExM.SuperposeC(Of T)(tfloat, TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.SuperposeC(Of T)(tfloat, TEx(Of T), TEx(Of T))
  name.vb: SuperposeC(Of T)(tfloat, TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.Opacity(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Opacity(tfloat,tfloat)
  id: Opacity(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Opacity(tfloat, tfloat)
  nameWithType: ExM.Opacity(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Opacity(tfloat, tfloat)
  type: Method
  source:
    id: Opacity
    path: ''
    startLine: 10916
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns `1-opacity + opacity*x`.\n"
  example: []
  syntax:
    content: public static tfloat Opacity(tfloat opacity, tfloat x)
    parameters:
    - id: opacity
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Opacity(opacity As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Opacity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Softmax(ExBPY,UncompiledCode{System.Single}[])
  commentId: M:Danmokou.DMath.Functions.ExM.Softmax(ExBPY,UncompiledCode{System.Single}[])
  id: Softmax(ExBPY,UncompiledCode{System.Single}[])
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Softmax(ExBPY, UncompiledCode<Single>[])
  nameWithType: ExM.Softmax(ExBPY, UncompiledCode<Single>[])
  fullName: Danmokou.DMath.Functions.ExM.Softmax(ExBPY, UncompiledCode<System.Single>[])
  type: Method
  source:
    id: Softmax
    path: ''
    startLine: 10928
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nCalculate the softmax of several values ( (Sum xe^ax) / (Sum e^ax) )\n"
  example: []
  syntax:
    content: public static ExBPY Softmax(ExBPY sharpness, UncompiledCode<float>[] against)
    parameters:
    - id: sharpness
      type: ExBPY
      description: >-
        The higher the absolute value of this, the more quickly the result will converge.

        Set negative for softmin.
    - id: against
      type: UncompiledCode{System.Single}[]
      description: Values
    return:
      type: ExBPY
      description: ''
    content.vb: Public Shared Function Softmax(sharpness As ExBPY, against As UncompiledCode(Of Single)()) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.Softmax*
  nameWithType.vb: ExM.Softmax(ExBPY, UncompiledCode(Of Single)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Softmax(ExBPY, UncompiledCode(Of System.Single)())
  name.vb: Softmax(ExBPY, UncompiledCode(Of Single)())
- uid: Danmokou.DMath.Functions.ExM.Logsum(ExBPY,UncompiledCode{System.Single}[])
  commentId: M:Danmokou.DMath.Functions.ExM.Logsum(ExBPY,UncompiledCode{System.Single}[])
  id: Logsum(ExBPY,UncompiledCode{System.Single}[])
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Logsum(ExBPY, UncompiledCode<Single>[])
  nameWithType: ExM.Logsum(ExBPY, UncompiledCode<Single>[])
  fullName: Danmokou.DMath.Functions.ExM.Logsum(ExBPY, UncompiledCode<System.Single>[])
  type: Method
  source:
    id: Logsum
    path: ''
    startLine: 10950
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nCalculate the logsum of several values ( (ln Sum e^ax) / a ), which is approximately equal to the largest number (smallest if sharpness is negative).\n"
  example: []
  syntax:
    content: public static ExBPY Logsum(ExBPY sharpness, UncompiledCode<float>[] against)
    parameters:
    - id: sharpness
      type: ExBPY
      description: The higher the absolute value of this, the more quickly the result will converge.
    - id: against
      type: UncompiledCode{System.Single}[]
      description: Values
    return:
      type: ExBPY
      description: ''
    content.vb: Public Shared Function Logsum(sharpness As ExBPY, against As UncompiledCode(Of Single)()) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.Logsum*
  nameWithType.vb: ExM.Logsum(ExBPY, UncompiledCode(Of Single)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Logsum(ExBPY, UncompiledCode(Of System.Single)())
  name.vb: Logsum(ExBPY, UncompiledCode(Of Single)())
- uid: Danmokou.DMath.Functions.ExM.SWing(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SWing(tfloat,tfloat,tfloat)
  id: SWing(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SWing(tfloat, tfloat, tfloat)
  nameWithType: ExM.SWing(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SWing(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: SWing
    path: ''
    startLine: 10975
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nA sine-like function (phase is that of cos) that quickly moves downwards\non its falling sections, meant to simulate the slow flapping of wings.\n"
  remarks: "\nSee https://www.desmos.com/calculator/jeo6rrqzsd\n"
  example: []
  syntax:
    content: public static tfloat SWing(tfloat period, tfloat peakHeight, tfloat x)
    parameters:
    - id: period
      type: tfloat
      description: Period
    - id: peakHeight
      type: tfloat
      description: Peak height
    - id: x
      type: tfloat
      description: Time
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SWing(period As tfloat, peakHeight As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SWing*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SWing2(tfloat,tfloat,tfloat,tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SWing2(tfloat,tfloat,tfloat,tfloat,tfloat,tfloat)
  id: SWing2(tfloat,tfloat,tfloat,tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SWing2(tfloat, tfloat, tfloat, tfloat, tfloat, tfloat)
  nameWithType: ExM.SWing2(tfloat, tfloat, tfloat, tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SWing2(tfloat, tfloat, tfloat, tfloat, tfloat, tfloat)
  type: Method
  source:
    id: SWing2
    path: ''
    startLine: 11000
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nA better sine-like swing function (also cosine phase).\n<br />See https://www.desmos.com/calculator/uwwfsslxrj\n"
  example: []
  syntax:
    content: public static tfloat SWing2(tfloat halfwayRatio, tfloat period, tfloat min, tfloat max, tfloat overshoot, tfloat time)
    parameters:
    - id: halfwayRatio
      type: tfloat
      description: Ratio of the period that the function is going from max to min.
    - id: period
      type: tfloat
      description: Period of swing.
    - id: min
      type: tfloat
      description: Minimum value.
    - id: max
      type: tfloat
      description: Value at the beginning of the period (not actually the maximum value)
    - id: overshoot
      type: tfloat
      description: The actual maximum value. The function rises from min to overshoot, then slowly returns to max.
    - id: time
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SWing2(halfwayRatio As tfloat, period As tfloat, min As tfloat, max As tfloat, overshoot As tfloat, time As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SWing2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM._constNamedTimer(System.String)
  commentId: M:Danmokou.DMath.Functions.ExM._constNamedTimer(System.String)
  id: _constNamedTimer(System.String)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: _constNamedTimer(String)
  nameWithType: ExM._constNamedTimer(String)
  fullName: Danmokou.DMath.Functions.ExM._constNamedTimer(System.String)
  type: Method
  source:
    id: _constNamedTimer
    path: ''
    startLine: 11031
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Func<TExArgCtx, TEx<ETime.Timer>> _constNamedTimer(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Func{TExArgCtx,TEx{ETime.Timer}}
    content.vb: Public Shared Function _constNamedTimer(name As String) As Func(Of TExArgCtx, TEx(Of ETime.Timer))
  overload: Danmokou.DMath.Functions.ExM._constNamedTimer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Timer(TEx{ETime.Timer})
  commentId: M:Danmokou.DMath.Functions.ExM.Timer(TEx{ETime.Timer})
  id: Timer(TEx{ETime.Timer})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Timer(TEx<ETime.Timer>)
  nameWithType: ExM.Timer(TEx<ETime.Timer>)
  fullName: Danmokou.DMath.Functions.ExM.Timer(TEx<ETime.Timer>)
  type: Method
  source:
    id: Timer
    path: ''
    startLine: 11038
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the time (in frames) of the given timer.\n"
  example: []
  syntax:
    content: public static tfloat Timer(TEx<ETime.Timer> timer)
    parameters:
    - id: timer
      type: TEx{ETime.Timer}
    return:
      type: tfloat
    content.vb: Public Shared Function Timer(timer As TEx(Of ETime.Timer)) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Timer*
  nameWithType.vb: ExM.Timer(TEx(Of ETime.Timer))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Timer(TEx(Of ETime.Timer))
  name.vb: Timer(TEx(Of ETime.Timer))
- uid: Danmokou.DMath.Functions.ExM.TimerSec(TEx{ETime.Timer})
  commentId: M:Danmokou.DMath.Functions.ExM.TimerSec(TEx{ETime.Timer})
  id: TimerSec(TEx{ETime.Timer})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: TimerSec(TEx<ETime.Timer>)
  nameWithType: ExM.TimerSec(TEx<ETime.Timer>)
  fullName: Danmokou.DMath.Functions.ExM.TimerSec(TEx<ETime.Timer>)
  type: Method
  source:
    id: TimerSec
    path: ''
    startLine: 11044
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the time (in seconds) of the given timer.\n"
  example: []
  syntax:
    content: public static tfloat TimerSec(TEx<ETime.Timer> timer)
    parameters:
    - id: timer
      type: TEx{ETime.Timer}
    return:
      type: tfloat
    content.vb: Public Shared Function TimerSec(timer As TEx(Of ETime.Timer)) As tfloat
  overload: Danmokou.DMath.Functions.ExM.TimerSec*
  nameWithType.vb: ExM.TimerSec(TEx(Of ETime.Timer))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.TimerSec(TEx(Of ETime.Timer))
  name.vb: TimerSec(TEx(Of ETime.Timer))
- uid: Danmokou.DMath.Functions.ExM.Height(tfloat,tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Height(tfloat,tfloat,tfloat,tfloat)
  id: Height(tfloat,tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Height(tfloat, tfloat, tfloat, tfloat)
  nameWithType: ExM.Height(tfloat, tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Height(tfloat, tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Height
    path: ''
    startLine: 11054
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the acceleration displacement function `h0 + v0*t + 0.5*g*t^2`.\n"
  example: []
  syntax:
    content: public static tfloat Height(tfloat h0, tfloat v0, tfloat g, tfloat time)
    parameters:
    - id: h0
      type: tfloat
    - id: v0
      type: tfloat
    - id: g
      type: tfloat
    - id: time
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Height(h0 As tfloat, v0 As tfloat, g As tfloat, time As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Height*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RegPolyR(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RegPolyR(tfloat,tfloat,tfloat)
  id: RegPolyR(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RegPolyR(tfloat, tfloat, tfloat)
  nameWithType: ExM.RegPolyR(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RegPolyR(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: RegPolyR
    path: ''
    startLine: 11064
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nFind the radius of a regular polygon at a given ratio relative to one of its vertices (max radius).\n"
  example: []
  syntax:
    content: public static tfloat RegPolyR(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
      description: Max radius
    - id: n
      type: tfloat
      description: Number of sides
    - id: theta
      type: tfloat
      description: Angle, radians (0-2pi)
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RegPolyR(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RegPolyR*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RegPoly(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RegPoly(tfloat,tfloat,tfloat)
  id: RegPoly(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RegPoly(tfloat, tfloat, tfloat)
  nameWithType: ExM.RegPoly(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RegPoly(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: RegPoly
    path: ''
    startLine: 11076
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nSame as RegPolyR, with theta in degrees (0-360).\n"
  example: []
  syntax:
    content: public static tfloat RegPoly(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
    - id: n
      type: tfloat
    - id: theta
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function RegPoly(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RegPoly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Reg2StarR(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Reg2StarR(tfloat,tfloat,tfloat)
  id: Reg2StarR(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Reg2StarR(tfloat, tfloat, tfloat)
  nameWithType: ExM.Reg2StarR(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Reg2StarR(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Reg2StarR
    path: ''
    startLine: 11088
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nFind the radius of a regular star at a given ratio relative to one of its vertices (max radius).\nIe. a polygram with n/2 &quot;sides&quot;.\nOnly works well for odd n.\nDraws the star by drawing straight lines between points, ie. there are line overlaps.\n"
  example: []
  syntax:
    content: public static tfloat Reg2StarR(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
      description: Max radius
    - id: n
      type: tfloat
      description: Number of points
    - id: theta
      type: tfloat
      description: Angle (0-4pi) (2*2pi, this 2star requires two iterations)
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Reg2StarR(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Reg2StarR*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Reg2Star(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Reg2Star(tfloat,tfloat,tfloat)
  id: Reg2Star(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Reg2Star(tfloat, tfloat, tfloat)
  nameWithType: ExM.Reg2Star(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Reg2Star(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Reg2Star
    path: ''
    startLine: 11094
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nSame as Reg2StarR, with theta in degrees (0-720).\n"
  example: []
  syntax:
    content: public static tfloat Reg2Star(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
    - id: n
      type: tfloat
    - id: theta
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Reg2Star(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Reg2Star*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RegSoftStarR(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RegSoftStarR(tfloat,tfloat,tfloat)
  id: RegSoftStarR(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RegSoftStarR(tfloat, tfloat, tfloat)
  nameWithType: ExM.RegSoftStarR(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RegSoftStarR(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: RegSoftStarR
    path: ''
    startLine: 11106
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nFind the radius of a regular star at a given ratio relative to one of its vertices (max radius).\nIe. a polygram with n/2 &quot;sides&quot;.\nOnly works well for odd n.\nDraws the star by drawing an outline, ie. there are no line overlaps.\n"
  example: []
  syntax:
    content: public static tfloat RegSoftStarR(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
      description: Max radius
    - id: n
      type: tfloat
      description: Number of points
    - id: theta
      type: tfloat
      description: Angle (0-2pi)
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RegSoftStarR(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RegSoftStarR*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RegSoftStar(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RegSoftStar(tfloat,tfloat,tfloat)
  id: RegSoftStar(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RegSoftStar(tfloat, tfloat, tfloat)
  nameWithType: ExM.RegSoftStar(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RegSoftStar(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: RegSoftStar
    path: ''
    startLine: 11112
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nSame as RegSoftStarR, with theta in degrees (0-360).\n"
  example: []
  syntax:
    content: public static tfloat RegSoftStar(tfloat R, tfloat n, tfloat theta)
    parameters:
    - id: R
      type: tfloat
    - id: n
      type: tfloat
    - id: theta
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function RegSoftStar(R As tfloat, n As tfloat, theta As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RegSoftStar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.BounceX(tfloat,tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.BounceX(tfloat,tv2,tv2)
  id: BounceX(tfloat,tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: BounceX(tfloat, tv2, tv2)
  nameWithType: ExM.BounceX(tfloat, tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.BounceX(tfloat, tv2, tv2)
  type: Method
  source:
    id: BounceX
    path: ''
    startLine: 11121
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nFind the angle of fire such that a ray fired from the source bouncing off the wall X=W would hit the target.\n"
  example: []
  syntax:
    content: public static tfloat BounceX(tfloat w, tv2 source, tv2 target)
    parameters:
    - id: w
      type: tfloat
    - id: source
      type: tv2
    - id: target
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function BounceX(w As tfloat, source As tv2, target As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.BounceX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.BounceY(tfloat,tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.BounceY(tfloat,tv2,tv2)
  id: BounceY(tfloat,tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: BounceY(tfloat, tv2, tv2)
  nameWithType: ExM.BounceY(tfloat, tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.BounceY(tfloat, tv2, tv2)
  type: Method
  source:
    id: BounceY
    path: ''
    startLine: 11126
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nFind the angle of fire such that a ray fired from the source bouncing off the wall Y=W would hit the target.\n"
  example: []
  syntax:
    content: public static tfloat BounceY(tfloat w, tv2 source, tv2 target)
    parameters:
    - id: w
      type: tfloat
    - id: source
      type: tv2
    - id: target
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function BounceY(w As tfloat, source As tv2, target As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.BounceY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.FrameNumber
  commentId: P:Danmokou.DMath.Functions.ExM.FrameNumber
  id: FrameNumber
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: FrameNumber
  nameWithType: ExM.FrameNumber
  fullName: Danmokou.DMath.Functions.ExM.FrameNumber
  type: Property
  source:
    id: FrameNumber
    path: ''
    startLine: 11133
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<int> FrameNumber { get; }
    parameters: []
    return:
      type: TEx{System.Int32}
    content.vb: Public Shared ReadOnly Property FrameNumber As TEx(Of Integer)
  overload: Danmokou.DMath.Functions.ExM.FrameNumber*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.Functions.ExM.HPRatio(TEx{BehaviorEntity})
  commentId: M:Danmokou.DMath.Functions.ExM.HPRatio(TEx{BehaviorEntity})
  id: HPRatio(TEx{BehaviorEntity})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: HPRatio(TEx<BehaviorEntity>)
  nameWithType: ExM.HPRatio(TEx<BehaviorEntity>)
  fullName: Danmokou.DMath.Functions.ExM.HPRatio(TEx<BehaviorEntity>)
  type: Method
  source:
    id: HPRatio
    path: ''
    startLine: 11141
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the HP ratio (0-1) of the BehaviorEntity.\n<br />The BEH must be an enemy, or this will cause errors.\n"
  example: []
  syntax:
    content: public static tfloat HPRatio(TEx<BehaviorEntity> beh)
    parameters:
    - id: beh
      type: TEx{BehaviorEntity}
    return:
      type: tfloat
    content.vb: Public Shared Function HPRatio(beh As TEx(Of BehaviorEntity)) As tfloat
  overload: Danmokou.DMath.Functions.ExM.HPRatio*
  nameWithType.vb: ExM.HPRatio(TEx(Of BehaviorEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.HPRatio(TEx(Of BehaviorEntity))
  name.vb: HPRatio(TEx(Of BehaviorEntity))
- uid: Danmokou.DMath.Functions.ExM.PhotosTaken(TEx{BehaviorEntity})
  commentId: M:Danmokou.DMath.Functions.ExM.PhotosTaken(TEx{BehaviorEntity})
  id: PhotosTaken(TEx{BehaviorEntity})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PhotosTaken(TEx<BehaviorEntity>)
  nameWithType: ExM.PhotosTaken(TEx<BehaviorEntity>)
  fullName: Danmokou.DMath.Functions.ExM.PhotosTaken(TEx<BehaviorEntity>)
  type: Method
  source:
    id: PhotosTaken
    path: ''
    startLine: 11149
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the number of photos taken of the given boss.\n<br />The BEH must be an enemy, or this will cause errors.\n<br />This number resets every card.\n"
  example: []
  syntax:
    content: public static tfloat PhotosTaken(TEx<BehaviorEntity> beh)
    parameters:
    - id: beh
      type: TEx{BehaviorEntity}
    return:
      type: tfloat
    content.vb: Public Shared Function PhotosTaken(beh As TEx(Of BehaviorEntity)) As tfloat
  overload: Danmokou.DMath.Functions.ExM.PhotosTaken*
  nameWithType.vb: ExM.PhotosTaken(TEx(Of BehaviorEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PhotosTaken(TEx(Of BehaviorEntity))
  name.vb: PhotosTaken(TEx(Of BehaviorEntity))
- uid: Danmokou.DMath.Functions.ExM.Is1CC
  commentId: M:Danmokou.DMath.Functions.ExM.Is1CC
  id: Is1CC
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Is1CC()
  nameWithType: ExM.Is1CC()
  fullName: Danmokou.DMath.Functions.ExM.Is1CC()
  type: Method
  source:
    id: Is1CC
    path: ''
    startLine: 11155
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns true if the instance has not continued.\n"
  example: []
  syntax:
    content: public static tbool Is1CC()
    return:
      type: tbool
    content.vb: Public Shared Function Is1CC As tbool
  overload: Danmokou.DMath.Functions.ExM.Is1CC*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.inst
  commentId: P:Danmokou.DMath.Functions.ExM.inst
  id: inst
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: inst
  nameWithType: ExM.inst
  fullName: Danmokou.DMath.Functions.ExM.inst
  type: Property
  source:
    id: inst
    path: ''
    startLine: 11157
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Ex inst { get; }
    parameters: []
    return:
      type: Ex
    content.vb: Public Shared ReadOnly Property inst As Ex
  overload: Danmokou.DMath.Functions.ExM.inst*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Danmokou.DMath.Functions.ExM.Instance
  commentId: M:Danmokou.DMath.Functions.ExM.Instance
  id: Instance
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Instance()
  nameWithType: ExM.Instance()
  fullName: Danmokou.DMath.Functions.ExM.Instance()
  type: Method
  source:
    id: Instance
    path: ''
    startLine: 11158
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<InstanceData> Instance()
    return:
      type: TEx{InstanceData}
    content.vb: Public Shared Function Instance As TEx(Of InstanceData)
  overload: Danmokou.DMath.Functions.ExM.Instance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.CFeature``1
  commentId: M:Danmokou.DMath.Functions.ExM.CFeature``1
  id: CFeature``1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: CFeature<T>()
  nameWithType: ExM.CFeature<T>()
  fullName: Danmokou.DMath.Functions.ExM.CFeature<T>()
  type: Method
  source:
    id: CFeature
    path: ''
    startLine: 11164
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the custom feature of type T from the instance data.\n"
  example: []
  syntax:
    content: public static TEx<T> CFeature<T>()
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function CFeature(Of T) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.CFeature*
  nameWithType.vb: ExM.CFeature(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.CFeature(Of T)()
  name.vb: CFeature(Of T)()
- uid: Danmokou.DMath.Functions.ExM.PlayerFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerFreeT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerFreeT
    path: ''
    startLine: 11170
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has *not* been focusing.\nResets to zero while the player is focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerFreeT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerFreeT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerFreeT*
  nameWithType.vb: ExM.PlayerFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerFreeT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerFocusT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerFocusT
    path: ''
    startLine: 11177
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has been focusing.\nResets to zero while the player is not focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerFocusT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerFocusT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerFocusT*
  nameWithType.vb: ExM.PlayerFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerFocusT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerFiringT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerFiringT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerFiringT
    path: ''
    startLine: 11184
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has been firing.\nResets to zero while the player is not firing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerFiringT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerFiringT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerFiringT*
  nameWithType.vb: ExM.PlayerFiringT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerFiringT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerFiringT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerFiringFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerFiringFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerFiringFreeT
    path: ''
    startLine: 11191
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has been firing while *not* focusing.\nResets to zero while the player is not firing or is focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerFiringFreeT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerFiringFreeT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT*
  nameWithType.vb: ExM.PlayerFiringFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerFiringFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerFiringFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerFiringFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerFiringFocusT
    path: ''
    startLine: 11198
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has been firing while focusing.\nResets to zero while the player is not firing or is not focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerFiringFocusT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerFiringFocusT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT*
  nameWithType.vb: ExM.PlayerFiringFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerFiringFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerUnFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerUnFiringT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerUnFiringT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerUnFiringT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerUnFiringT
    path: ''
    startLine: 11205
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has *not* been firing.\nResets to zero while the player is firing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerUnFiringT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerUnFiringT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerUnFiringT*
  nameWithType.vb: ExM.PlayerUnFiringT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerUnFiringT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerUnFiringT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerUnFiringFreeT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerUnFiringFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerUnFiringFreeT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerUnFiringFreeT
    path: ''
    startLine: 11212
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has *not* been firing or been focusing.\nResets to zero while the player is firing AND *not* focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerUnFiringFreeT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerUnFiringFreeT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT*
  nameWithType.vb: ExM.PlayerUnFiringFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerUnFiringFreeT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerUnFiringFocusT(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerUnFiringFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerUnFiringFocusT(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerUnFiringFocusT
    path: ''
    startLine: 11219
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the amount of time for which the player has *not* been firing or *not* been focusing.\nResets to zero while the player is firing AND focusing.\n"
  example: []
  syntax:
    content: public static ExBPY PlayerUnFiringFocusT(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerUnFiringFocusT(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT*
  nameWithType.vb: ExM.PlayerUnFiringFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerUnFiringFocusT(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerID(System.Func{TExArgCtx,TEx{PlayerController}})
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerID(System.Func{TExArgCtx,TEx{PlayerController}})
  id: PlayerID(System.Func{TExArgCtx,TEx{PlayerController}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerID(Func<TExArgCtx, TEx<PlayerController>>)
  nameWithType: ExM.PlayerID(Func<TExArgCtx, TEx<PlayerController>>)
  fullName: Danmokou.DMath.Functions.ExM.PlayerID(System.Func<TExArgCtx, TEx<PlayerController>>)
  type: Method
  source:
    id: PlayerID
    path: ''
    startLine: 11222
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExBPY PlayerID(Func<TExArgCtx, TEx<PlayerController>> p)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerID(p As Func(Of TExArgCtx, TEx(Of PlayerController))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerID*
  nameWithType.vb: ExM.PlayerID(Func(Of TExArgCtx, TEx(Of PlayerController)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerID(System.Func(Of TExArgCtx, TEx(Of PlayerController)))
  name.vb: PlayerID(Func(Of TExArgCtx, TEx(Of PlayerController)))
- uid: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  id: PlayerLerpFreeToFocus(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerLerpFreeToFocus(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  nameWithType: ExM.PlayerLerpFreeToFocus(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  fullName: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus(System.Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  type: Method
  source:
    id: PlayerLerpFreeToFocus
    path: ''
    startLine: 11225
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExBPY PlayerLerpFreeToFocus(Func<TExArgCtx, TEx<PlayerController>> p, ExBPY over)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    - id: over
      type: ExBPY
    return:
      type: ExBPY
    content.vb: Public Shared Function PlayerLerpFreeToFocus(p As Func(Of TExArgCtx, TEx(Of PlayerController)), over As ExBPY) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus*
  nameWithType.vb: ExM.PlayerLerpFreeToFocus(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus(System.Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  name.vb: PlayerLerpFreeToFocus(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
- uid: Danmokou.DMath.Functions.ExM.PlayerPastPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerPastPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  id: PlayerPastPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerPastPos(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  nameWithType: ExM.PlayerPastPos(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  fullName: Danmokou.DMath.Functions.ExM.PlayerPastPos(System.Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  type: Method
  source:
    id: PlayerPastPos
    path: ''
    startLine: 11227
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExTP PlayerPastPos(Func<TExArgCtx, TEx<PlayerController>> p, ExBPY ago)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    - id: ago
      type: ExBPY
    return:
      type: ExTP
    content.vb: Public Shared Function PlayerPastPos(p As Func(Of TExArgCtx, TEx(Of PlayerController)), ago As ExBPY) As ExTP
  overload: Danmokou.DMath.Functions.ExM.PlayerPastPos*
  nameWithType.vb: ExM.PlayerPastPos(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerPastPos(System.Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  name.vb: PlayerPastPos(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
- uid: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerMarisaAPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  id: PlayerMarisaAPos(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerMarisaAPos(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  nameWithType: ExM.PlayerMarisaAPos(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  fullName: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos(System.Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  type: Method
  source:
    id: PlayerMarisaAPos
    path: ''
    startLine: 11229
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExTP PlayerMarisaAPos(Func<TExArgCtx, TEx<PlayerController>> p, ExBPY ago)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    - id: ago
      type: ExBPY
    return:
      type: ExTP
    content.vb: Public Shared Function PlayerMarisaAPos(p As Func(Of TExArgCtx, TEx(Of PlayerController)), ago As ExBPY) As ExTP
  overload: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos*
  nameWithType.vb: ExM.PlayerMarisaAPos(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos(System.Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  name.vb: PlayerMarisaAPos(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
- uid: Danmokou.DMath.Functions.ExM.PlayerPastDir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerPastDir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  id: PlayerPastDir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerPastDir(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  nameWithType: ExM.PlayerPastDir(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  fullName: Danmokou.DMath.Functions.ExM.PlayerPastDir(System.Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  type: Method
  source:
    id: PlayerPastDir
    path: ''
    startLine: 11231
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExTP PlayerPastDir(Func<TExArgCtx, TEx<PlayerController>> p, ExBPY ago)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    - id: ago
      type: ExBPY
    return:
      type: ExTP
    content.vb: Public Shared Function PlayerPastDir(p As Func(Of TExArgCtx, TEx(Of PlayerController)), ago As ExBPY) As ExTP
  overload: Danmokou.DMath.Functions.ExM.PlayerPastDir*
  nameWithType.vb: ExM.PlayerPastDir(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerPastDir(System.Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  name.vb: PlayerPastDir(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
- uid: Danmokou.DMath.Functions.ExM.PlayerMarisaADir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  commentId: M:Danmokou.DMath.Functions.ExM.PlayerMarisaADir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  id: PlayerMarisaADir(System.Func{TExArgCtx,TEx{PlayerController}},ExBPY)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PlayerMarisaADir(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  nameWithType: ExM.PlayerMarisaADir(Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  fullName: Danmokou.DMath.Functions.ExM.PlayerMarisaADir(System.Func<TExArgCtx, TEx<PlayerController>>, ExBPY)
  type: Method
  source:
    id: PlayerMarisaADir
    path: ''
    startLine: 11233
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static ExTP PlayerMarisaADir(Func<TExArgCtx, TEx<PlayerController>> p, ExBPY ago)
    parameters:
    - id: p
      type: System.Func{TExArgCtx,TEx{PlayerController}}
    - id: ago
      type: ExBPY
    return:
      type: ExTP
    content.vb: Public Shared Function PlayerMarisaADir(p As Func(Of TExArgCtx, TEx(Of PlayerController)), ago As ExBPY) As ExTP
  overload: Danmokou.DMath.Functions.ExM.PlayerMarisaADir*
  nameWithType.vb: ExM.PlayerMarisaADir(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.PlayerMarisaADir(System.Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
  name.vb: PlayerMarisaADir(Func(Of TExArgCtx, TEx(Of PlayerController)), ExBPY)
- uid: Danmokou.DMath.Functions.ExM.Colliding(System.Func{TExArgCtx,TEx{Bullet}})
  commentId: M:Danmokou.DMath.Functions.ExM.Colliding(System.Func{TExArgCtx,TEx{Bullet}})
  id: Colliding(System.Func{TExArgCtx,TEx{Bullet}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Colliding(Func<TExArgCtx, TEx<Bullet>>)
  nameWithType: ExM.Colliding(Func<TExArgCtx, TEx<Bullet>>)
  fullName: Danmokou.DMath.Functions.ExM.Colliding(System.Func<TExArgCtx, TEx<Bullet>>)
  type: Method
  source:
    id: Colliding
    path: ''
    startLine: 11241
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nOn a complex bullet, returns true if the bullet is colliding.\n"
  example: []
  syntax:
    content: public static ExPred Colliding(Func<TExArgCtx, TEx<Bullet>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{Bullet}}
    return:
      type: ExPred
    content.vb: Public Shared Function Colliding(ctr As Func(Of TExArgCtx, TEx(Of Bullet))) As ExPred
  overload: Danmokou.DMath.Functions.ExM.Colliding*
  nameWithType.vb: ExM.Colliding(Func(Of TExArgCtx, TEx(Of Bullet)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Colliding(System.Func(Of TExArgCtx, TEx(Of Bullet)))
  name.vb: Colliding(Func(Of TExArgCtx, TEx(Of Bullet)))
- uid: Danmokou.DMath.Functions.ExM.CollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  commentId: M:Danmokou.DMath.Functions.ExM.CollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  id: CollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: CollidingT(Func<TExArgCtx, TEx<Bullet>>)
  nameWithType: ExM.CollidingT(Func<TExArgCtx, TEx<Bullet>>)
  fullName: Danmokou.DMath.Functions.ExM.CollidingT(System.Func<TExArgCtx, TEx<Bullet>>)
  type: Method
  source:
    id: CollidingT
    path: ''
    startLine: 11247
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nOn a complex bullet, returns the amount of time that the bullet has been continuously colliding for.\n"
  example: []
  syntax:
    content: public static ExBPY CollidingT(Func<TExArgCtx, TEx<Bullet>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{Bullet}}
    return:
      type: ExBPY
    content.vb: Public Shared Function CollidingT(ctr As Func(Of TExArgCtx, TEx(Of Bullet))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.CollidingT*
  nameWithType.vb: ExM.CollidingT(Func(Of TExArgCtx, TEx(Of Bullet)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.CollidingT(System.Func(Of TExArgCtx, TEx(Of Bullet)))
  name.vb: CollidingT(Func(Of TExArgCtx, TEx(Of Bullet)))
- uid: Danmokou.DMath.Functions.ExM.UnCollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  commentId: M:Danmokou.DMath.Functions.ExM.UnCollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  id: UnCollidingT(System.Func{TExArgCtx,TEx{Bullet}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: UnCollidingT(Func<TExArgCtx, TEx<Bullet>>)
  nameWithType: ExM.UnCollidingT(Func<TExArgCtx, TEx<Bullet>>)
  fullName: Danmokou.DMath.Functions.ExM.UnCollidingT(System.Func<TExArgCtx, TEx<Bullet>>)
  type: Method
  source:
    id: UnCollidingT
    path: ''
    startLine: 11253
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nOn a complex bullet, returns the amount of time that the bullet has been continuously *not* colliding for.\n"
  example: []
  syntax:
    content: public static ExBPY UnCollidingT(Func<TExArgCtx, TEx<Bullet>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{Bullet}}
    return:
      type: ExBPY
    content.vb: Public Shared Function UnCollidingT(ctr As Func(Of TExArgCtx, TEx(Of Bullet))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.UnCollidingT*
  nameWithType.vb: ExM.UnCollidingT(Func(Of TExArgCtx, TEx(Of Bullet)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.UnCollidingT(System.Func(Of TExArgCtx, TEx(Of Bullet)))
  name.vb: UnCollidingT(Func(Of TExArgCtx, TEx(Of Bullet)))
- uid: Danmokou.DMath.Functions.ExM.LaserLastActiveT(System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}})
  commentId: M:Danmokou.DMath.Functions.ExM.LaserLastActiveT(System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}})
  id: LaserLastActiveT(System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: LaserLastActiveT(Func<TExArgCtx, TEx<CurvedTileRenderLaser>>)
  nameWithType: ExM.LaserLastActiveT(Func<TExArgCtx, TEx<CurvedTileRenderLaser>>)
  fullName: Danmokou.DMath.Functions.ExM.LaserLastActiveT(System.Func<TExArgCtx, TEx<CurvedTileRenderLaser>>)
  type: Method
  source:
    id: LaserLastActiveT
    path: ''
    startLine: 11261
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the last active time of the laser. This is the first time at which the &quot;deactivate&quot; option\non the laser returns true. If the deactivate option does not exist or has not yet returned true,\nthis returns &quot;effectively infinity&quot;.\n"
  example: []
  syntax:
    content: public static ExBPY LaserLastActiveT(Func<TExArgCtx, TEx<CurvedTileRenderLaser>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}}
    return:
      type: ExBPY
    content.vb: Public Shared Function LaserLastActiveT(ctr As Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.LaserLastActiveT*
  nameWithType.vb: ExM.LaserLastActiveT(Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.LaserLastActiveT(System.Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser)))
  name.vb: LaserLastActiveT(Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser)))
- uid: Danmokou.DMath.Functions.ExM.OptionLocation(System.Func{TExArgCtx,TEx{FireOption}})
  commentId: M:Danmokou.DMath.Functions.ExM.OptionLocation(System.Func{TExArgCtx,TEx{FireOption}})
  id: OptionLocation(System.Func{TExArgCtx,TEx{FireOption}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: OptionLocation(Func<TExArgCtx, TEx<FireOption>>)
  nameWithType: ExM.OptionLocation(Func<TExArgCtx, TEx<FireOption>>)
  fullName: Danmokou.DMath.Functions.ExM.OptionLocation(System.Func<TExArgCtx, TEx<FireOption>>)
  type: Method
  source:
    id: OptionLocation
    path: ''
    startLine: 11268
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the location of the FireOption. Primarily used for player lasers.\n"
  example: []
  syntax:
    content: public static ExTP OptionLocation(Func<TExArgCtx, TEx<FireOption>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{FireOption}}
    return:
      type: ExTP
    content.vb: Public Shared Function OptionLocation(ctr As Func(Of TExArgCtx, TEx(Of FireOption))) As ExTP
  overload: Danmokou.DMath.Functions.ExM.OptionLocation*
  nameWithType.vb: ExM.OptionLocation(Func(Of TExArgCtx, TEx(Of FireOption)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.OptionLocation(System.Func(Of TExArgCtx, TEx(Of FireOption)))
  name.vb: OptionLocation(Func(Of TExArgCtx, TEx(Of FireOption)))
- uid: Danmokou.DMath.Functions.ExM.OptionAngle(System.Func{TExArgCtx,TEx{FireOption}})
  commentId: M:Danmokou.DMath.Functions.ExM.OptionAngle(System.Func{TExArgCtx,TEx{FireOption}})
  id: OptionAngle(System.Func{TExArgCtx,TEx{FireOption}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: OptionAngle(Func<TExArgCtx, TEx<FireOption>>)
  nameWithType: ExM.OptionAngle(Func<TExArgCtx, TEx<FireOption>>)
  fullName: Danmokou.DMath.Functions.ExM.OptionAngle(System.Func<TExArgCtx, TEx<FireOption>>)
  type: Method
  source:
    id: OptionAngle
    path: ''
    startLine: 11274
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the direction of the FireOption. Primarily used for player lasers.\n"
  example: []
  syntax:
    content: public static ExBPY OptionAngle(Func<TExArgCtx, TEx<FireOption>> ctr)
    parameters:
    - id: ctr
      type: System.Func{TExArgCtx,TEx{FireOption}}
    return:
      type: ExBPY
    content.vb: Public Shared Function OptionAngle(ctr As Func(Of TExArgCtx, TEx(Of FireOption))) As ExBPY
  overload: Danmokou.DMath.Functions.ExM.OptionAngle*
  nameWithType.vb: ExM.OptionAngle(Func(Of TExArgCtx, TEx(Of FireOption)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.OptionAngle(System.Func(Of TExArgCtx, TEx(Of FireOption)))
  name.vb: OptionAngle(Func(Of TExArgCtx, TEx(Of FireOption)))
- uid: Danmokou.DMath.Functions.ExM.Power
  commentId: M:Danmokou.DMath.Functions.ExM.Power
  id: Power
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Power()
  nameWithType: ExM.Power()
  fullName: Danmokou.DMath.Functions.ExM.Power()
  type: Method
  source:
    id: Power
    path: ''
    startLine: 11281
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the player&apos;s power value.\n"
  example: []
  syntax:
    content: public static tfloat Power()
    return:
      type: tfloat
    content.vb: Public Shared Function Power As tfloat
  overload: Danmokou.DMath.Functions.ExM.Power*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.PowerF
  commentId: M:Danmokou.DMath.Functions.ExM.PowerF
  id: PowerF
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PowerF()
  nameWithType: ExM.PowerF()
  fullName: Danmokou.DMath.Functions.ExM.PowerF()
  type: Method
  source:
    id: PowerF
    path: ''
    startLine: 11289
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the player&apos;s power value, floored.\n"
  example: []
  syntax:
    content: public static tfloat PowerF()
    return:
      type: tfloat
    content.vb: Public Shared Function PowerF As tfloat
  overload: Danmokou.DMath.Functions.ExM.PowerF*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.PowerIndex
  commentId: M:Danmokou.DMath.Functions.ExM.PowerIndex
  id: PowerIndex
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PowerIndex()
  nameWithType: ExM.PowerIndex()
  fullName: Danmokou.DMath.Functions.ExM.PowerIndex()
  type: Method
  source:
    id: PowerIndex
    path: ''
    startLine: 11294
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the player&apos;s power index.\n"
  example: []
  syntax:
    content: public static tfloat PowerIndex()
    return:
      type: tfloat
    content.vb: Public Shared Function PowerIndex As tfloat
  overload: Danmokou.DMath.Functions.ExM.PowerIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.IfPowerGTP``1(System.Func{TExArgCtx,TEx{``0}})
  commentId: M:Danmokou.DMath.Functions.ExM.IfPowerGTP``1(System.Func{TExArgCtx,TEx{``0}})
  id: IfPowerGTP``1(System.Func{TExArgCtx,TEx{``0}})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: IfPowerGTP<T>(Func<TExArgCtx, TEx<T>>)
  nameWithType: ExM.IfPowerGTP<T>(Func<TExArgCtx, TEx<T>>)
  fullName: Danmokou.DMath.Functions.ExM.IfPowerGTP<T>(System.Func<TExArgCtx, TEx<T>>)
  type: Method
  source:
    id: IfPowerGTP
    path: ''
    startLine: 11300
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nIf the player&apos;s power (floored) is strictly than the firing index,\nreturn the child, otherwise return zero.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> IfPowerGTP<T>(Func<TExArgCtx, TEx<T>> inner)
    parameters:
    - id: inner
      type: System.Func{TExArgCtx,TEx{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
    content.vb: Public Shared Function IfPowerGTP(Of T)(inner As Func(Of TExArgCtx, TEx(Of T))) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.IfPowerGTP*
  nameWithType.vb: ExM.IfPowerGTP(Of T)(Func(Of TExArgCtx, TEx(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.IfPowerGTP(Of T)(System.Func(Of TExArgCtx, TEx(Of T)))
  name.vb: IfPowerGTP(Of T)(Func(Of TExArgCtx, TEx(Of T)))
- uid: Danmokou.DMath.Functions.ExM.Mine``1
  commentId: M:Danmokou.DMath.Functions.ExM.Mine``1
  id: Mine``1
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Mine<T>()
  nameWithType: ExM.Mine<T>()
  fullName: Danmokou.DMath.Functions.ExM.Mine<T>()
  type: Method
  source:
    id: Mine
    path: ''
    startLine: 11313
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the object of type T associated with the entity calling this function.\n<br />eg. If this is used by a laser fired by a player option, and T = FireOption,\n then this function returns the FireOption that created this laser.\n<br />eg. If this is used by a bullet fired by a boss, and T = BehaviorEntity,\n then this function returns the boss that fired this bullet.\n"
  example: []
  syntax:
    content: public static Func<TExArgCtx, TEx<T>> Mine<T>()
    typeParameters:
    - id: T
      description: One of Bullet, CurvedTileRenderLaser, PlayerController, FireOption, BehaviorEntity
    return:
      type: System.Func{TExArgCtx,TEx{{T}}}
      description: ''
    content.vb: Public Shared Function Mine(Of T) As Func(Of TExArgCtx, TEx(Of T))
  overload: Danmokou.DMath.Functions.ExM.Mine*
  nameWithType.vb: ExM.Mine(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Mine(Of T)()
  name.vb: Mine(Of T)()
- uid: Danmokou.DMath.Functions.ExM.FromID(System.String)
  commentId: M:Danmokou.DMath.Functions.ExM.FromID(System.String)
  id: FromID(System.String)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: FromID(String)
  nameWithType: ExM.FromID(String)
  fullName: Danmokou.DMath.Functions.ExM.FromID(System.String)
  type: Method
  source:
    id: FromID
    path: ''
    startLine: 11332
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Func<TExArgCtx, TEx<BehaviorEntity>> FromID(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Func{TExArgCtx,TEx{BehaviorEntity}}
    content.vb: Public Shared Function FromID(id As String) As Func(Of TExArgCtx, TEx(Of BehaviorEntity))
  overload: Danmokou.DMath.Functions.ExM.FromID*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.HPi
  commentId: M:Danmokou.DMath.Functions.ExM.HPi
  id: HPi
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: HPi()
  nameWithType: ExM.HPi()
  fullName: Danmokou.DMath.Functions.ExM.HPi()
  type: Method
  source:
    id: HPi
    path: ''
    startLine: 11444
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe constant pi/2.\n"
  example: []
  syntax:
    content: public static tfloat HPi()
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function HPi As tfloat
  overload: Danmokou.DMath.Functions.ExM.HPi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Pi
  commentId: M:Danmokou.DMath.Functions.ExM.Pi
  id: Pi
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Pi()
  nameWithType: ExM.Pi()
  fullName: Danmokou.DMath.Functions.ExM.Pi()
  type: Method
  source:
    id: Pi
    path: ''
    startLine: 11449
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe constant pi.\n"
  example: []
  syntax:
    content: public static tfloat Pi()
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Pi As tfloat
  overload: Danmokou.DMath.Functions.ExM.Pi*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Tau
  commentId: M:Danmokou.DMath.Functions.ExM.Tau
  id: Tau
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Tau()
  nameWithType: ExM.Tau()
  fullName: Danmokou.DMath.Functions.ExM.Tau()
  type: Method
  source:
    id: Tau
    path: ''
    startLine: 11454
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe constant pi*2.\n"
  example: []
  syntax:
    content: public static tfloat Tau()
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Tau As tfloat
  overload: Danmokou.DMath.Functions.ExM.Tau*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Twau
  commentId: M:Danmokou.DMath.Functions.ExM.Twau
  id: Twau
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Twau()
  nameWithType: ExM.Twau()
  fullName: Danmokou.DMath.Functions.ExM.Twau()
  type: Method
  source:
    id: Twau
    path: ''
    startLine: 11459
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe constant pi*4.\n"
  example: []
  syntax:
    content: public static tfloat Twau()
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Twau As tfloat
  overload: Danmokou.DMath.Functions.ExM.Twau*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Add``1(TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Add``1(TEx{``0},TEx{``0})
  id: Add``1(TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Add<T>(TEx<T>, TEx<T>)
  nameWithType: ExM.Add<T>(TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Add<T>(TEx<T>, TEx<T>)
  type: Method
  source:
    id: Add
    path: ''
    startLine: 11464
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd two vectypes.\n"
  example: []
  syntax:
    content: public static TEx<T> Add<T>(TEx<T> x, TEx<T> y)
    parameters:
    - id: x
      type: TEx{{T}}
    - id: y
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function Add(Of T)(x As TEx(Of T), y As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Add*
  nameWithType.vb: ExM.Add(Of T)(TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Add(Of T)(TEx(Of T), TEx(Of T))
  name.vb: Add(Of T)(TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.AddNV(trv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.AddNV(trv2,tv2)
  id: AddNV(trv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: AddNV(trv2, tv2)
  nameWithType: ExM.AddNV(trv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.AddNV(trv2, tv2)
  type: Method
  source:
    id: AddNV
    path: ''
    startLine: 11469
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd to the nonrotational components of an RV2.\n"
  example: []
  syntax:
    content: public static trv2 AddNV(trv2 rv2, tv2 nv)
    parameters:
    - id: rv2
      type: trv2
    - id: nv
      type: tv2
    return:
      type: trv2
    content.vb: Public Shared Function AddNV(rv2 As trv2, nv As tv2) As trv2
  overload: Danmokou.DMath.Functions.ExM.AddNV*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.AddA(trv2,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.AddA(trv2,tfloat)
  id: AddA(trv2,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: AddA(trv2, tfloat)
  nameWithType: ExM.AddA(trv2, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.AddA(trv2, tfloat)
  type: Method
  source:
    id: AddA
    path: ''
    startLine: 11473
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd to the angle of an RV2.\n"
  example: []
  syntax:
    content: public static trv2 AddA(trv2 rv2, tfloat ang)
    parameters:
    - id: rv2
      type: trv2
    - id: ang
      type: tfloat
    return:
      type: trv2
    content.vb: Public Shared Function AddA(rv2 As trv2, ang As tfloat) As trv2
  overload: Danmokou.DMath.Functions.ExM.AddA*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.AddNVA(trv2,tv2,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.AddNVA(trv2,tv2,tfloat)
  id: AddNVA(trv2,tv2,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: AddNVA(trv2, tv2, tfloat)
  nameWithType: ExM.AddNVA(trv2, tv2, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.AddNVA(trv2, tv2, tfloat)
  type: Method
  source:
    id: AddNVA
    path: ''
    startLine: 11477
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd to the nonrotational components and angle of an RV2.\n"
  example: []
  syntax:
    content: public static trv2 AddNVA(trv2 rv2, tv2 nv, tfloat ang)
    parameters:
    - id: rv2
      type: trv2
    - id: nv
      type: tv2
    - id: ang
      type: tfloat
    return:
      type: trv2
    content.vb: Public Shared Function AddNVA(rv2 As trv2, nv As tv2, ang As tfloat) As trv2
  overload: Danmokou.DMath.Functions.ExM.AddNVA*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.AddRVA(trv2,tv3)
  commentId: M:Danmokou.DMath.Functions.ExM.AddRVA(trv2,tv3)
  id: AddRVA(trv2,tv3)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: AddRVA(trv2, tv3)
  nameWithType: ExM.AddRVA(trv2, tv3)
  fullName: Danmokou.DMath.Functions.ExM.AddRVA(trv2, tv3)
  type: Method
  source:
    id: AddRVA
    path: ''
    startLine: 11481
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd to the rotational components and angle of an RV2.\n"
  example: []
  syntax:
    content: public static trv2 AddRVA(trv2 rv2, tv3 rva)
    parameters:
    - id: rv2
      type: trv2
    - id: rva
      type: tv3
    return:
      type: trv2
    content.vb: Public Shared Function AddRVA(rv2 As trv2, rva As tv3) As trv2
  overload: Danmokou.DMath.Functions.ExM.AddRVA*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.AddRV(trv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.AddRV(trv2,tv2)
  id: AddRV(trv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: AddRV(trv2, tv2)
  nameWithType: ExM.AddRV(trv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.AddRV(trv2, tv2)
  type: Method
  source:
    id: AddRV
    path: ''
    startLine: 11485
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nAdd to the rotational components of an RV2.\n"
  example: []
  syntax:
    content: public static trv2 AddRV(trv2 rv2, tv2 rv)
    parameters:
    - id: rv2
      type: trv2
    - id: rv
      type: tv2
    return:
      type: trv2
    content.vb: Public Shared Function AddRV(rv2 As trv2, rv As tv2) As trv2
  overload: Danmokou.DMath.Functions.ExM.AddRV*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Sub``1(TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Sub``1(TEx{``0},TEx{``0})
  id: Sub``1(TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sub<T>(TEx<T>, TEx<T>)
  nameWithType: ExM.Sub<T>(TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Sub<T>(TEx<T>, TEx<T>)
  type: Method
  source:
    id: Sub
    path: ''
    startLine: 11490
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nSubtract two vectypes.\n"
  example: []
  syntax:
    content: public static TEx<T> Sub<T>(TEx<T> x, TEx<T> y)
    parameters:
    - id: x
      type: TEx{{T}}
    - id: y
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function Sub(Of T)(x As TEx(Of T), y As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Sub*
  nameWithType.vb: ExM.Sub(Of T)(TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Sub(Of T)(TEx(Of T), TEx(Of T))
  name.vb: Sub(Of T)(TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.Mul``1(tfloat,TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Mul``1(tfloat,TEx{``0})
  id: Mul``1(tfloat,TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Mul<T>(tfloat, TEx<T>)
  nameWithType: ExM.Mul<T>(tfloat, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Mul<T>(tfloat, TEx<T>)
  type: Method
  source:
    id: Mul
    path: ''
    startLine: 11495
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMultiply a vectype by a number.\n"
  example: []
  syntax:
    content: public static TEx<T> Mul<T>(tfloat x, TEx<T> y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function Mul(Of T)(x As tfloat, y As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Mul*
  nameWithType.vb: ExM.Mul(Of T)(tfloat, TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Mul(Of T)(tfloat, TEx(Of T))
  name.vb: Mul(Of T)(tfloat, TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.MulRev``1(TEx{``0},tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.MulRev``1(TEx{``0},tfloat)
  id: MulRev``1(TEx{``0},tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MulRev<T>(TEx<T>, tfloat)
  nameWithType: ExM.MulRev<T>(TEx<T>, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.MulRev<T>(TEx<T>, tfloat)
  type: Method
  source:
    id: MulRev
    path: ''
    startLine: 11501
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMultiply a vectype by a number.\n"
  example: []
  syntax:
    content: public static TEx<T> MulRev<T>(TEx<T> y, tfloat x)
    parameters:
    - id: y
      type: TEx{{T}}
    - id: x
      type: tfloat
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function MulRev(Of T)(y As TEx(Of T), x As tfloat) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.MulRev*
  nameWithType.vb: ExM.MulRev(Of T)(TEx(Of T), tfloat)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.MulRev(Of T)(TEx(Of T), tfloat)
  name.vb: MulRev(Of T)(TEx(Of T), tfloat)
- uid: Danmokou.DMath.Functions.ExM.MulInt(TEx{System.Int32},TEx{System.Int32})
  commentId: M:Danmokou.DMath.Functions.ExM.MulInt(TEx{System.Int32},TEx{System.Int32})
  id: MulInt(TEx{System.Int32},TEx{System.Int32})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MulInt(TEx<Int32>, TEx<Int32>)
  nameWithType: ExM.MulInt(TEx<Int32>, TEx<Int32>)
  fullName: Danmokou.DMath.Functions.ExM.MulInt(TEx<System.Int32>, TEx<System.Int32>)
  type: Method
  source:
    id: MulInt
    path: ''
    startLine: 11504
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<int> MulInt(TEx<int> x, TEx<int> y)
    parameters:
    - id: x
      type: TEx{System.Int32}
    - id: y
      type: TEx{System.Int32}
    return:
      type: TEx{System.Int32}
    content.vb: Public Shared Function MulInt(x As TEx(Of Integer), y As TEx(Of Integer)) As TEx(Of Integer)
  overload: Danmokou.DMath.Functions.ExM.MulInt*
  nameWithType.vb: ExM.MulInt(TEx(Of Int32), TEx(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.MulInt(TEx(Of System.Int32), TEx(Of System.Int32))
  name.vb: MulInt(TEx(Of Int32), TEx(Of Int32))
- uid: Danmokou.DMath.Functions.ExM.DegRad(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DegRad(tfloat)
  id: DegRad(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DegRad(tfloat)
  nameWithType: ExM.DegRad(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DegRad(tfloat)
  type: Method
  source:
    id: DegRad
    path: ''
    startLine: 11512
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nConvert a number from degrees to radians.\n"
  example: []
  syntax:
    content: public static tfloat DegRad(tfloat x)
    parameters:
    - id: x
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function DegRad(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DegRad*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadDeg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RadDeg(tfloat)
  id: RadDeg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadDeg(tfloat)
  nameWithType: ExM.RadDeg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RadDeg(tfloat)
  type: Method
  source:
    id: RadDeg
    path: ''
    startLine: 11519
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nConvert a number from radians to degrees.\n"
  example: []
  syntax:
    content: public static tfloat RadDeg(tfloat x)
    parameters:
    - id: x
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RadDeg(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Div``1(TEx{``0},tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Div``1(TEx{``0},tfloat)
  id: Div``1(TEx{``0},tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Div<T>(TEx<T>, tfloat)
  nameWithType: ExM.Div<T>(TEx<T>, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Div<T>(TEx<T>, tfloat)
  type: Method
  source:
    id: Div
    path: ''
    startLine: 11525
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nDivide a vectype by a number. Alias: / x y\n"
  example: []
  syntax:
    content: public static TEx<T> Div<T>(TEx<T> x, tfloat y)
    parameters:
    - id: x
      type: TEx{{T}}
    - id: y
      type: tfloat
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
      description: ''
    content.vb: Public Shared Function Div(Of T)(x As TEx(Of T), y As tfloat) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Div*
  nameWithType.vb: ExM.Div(Of T)(TEx(Of T), tfloat)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Div(Of T)(TEx(Of T), tfloat)
  name.vb: Div(Of T)(TEx(Of T), tfloat)
- uid: Danmokou.DMath.Functions.ExM.DivInv(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DivInv(tfloat,tfloat)
  id: DivInv(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DivInv(tfloat, tfloat)
  nameWithType: ExM.DivInv(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DivInv(tfloat, tfloat)
  type: Method
  source:
    id: DivInv
    path: ''
    startLine: 11530
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nDivide two numbers in reverse order (the same as / y x). \n"
  example: []
  syntax:
    content: public static tfloat DivInv(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function DivInv(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DivInv*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.FDiv(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.FDiv(tfloat,tfloat)
  id: FDiv(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: FDiv(tfloat, tfloat)
  nameWithType: ExM.FDiv(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.FDiv(tfloat, tfloat)
  type: Method
  source:
    id: FDiv
    path: ''
    startLine: 11535
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nDivide two numbers and returns the floor.\n"
  example: []
  syntax:
    content: public static tfloat FDiv(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function FDiv(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.FDiv*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Complement(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Complement(tfloat)
  id: Complement(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Complement(tfloat)
  nameWithType: ExM.Complement(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Complement(tfloat)
  type: Method
  source:
    id: Complement
    path: ''
    startLine: 11540
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\n(1-x)\n"
  example: []
  syntax:
    content: public static tfloat Complement(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Complement(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Complement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.MulComplement(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.MulComplement(tfloat,tfloat)
  id: MulComplement(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MulComplement(tfloat, tfloat)
  nameWithType: ExM.MulComplement(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.MulComplement(tfloat, tfloat)
  type: Method
  source:
    id: MulComplement
    path: ''
    startLine: 11546
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nx*(1-y)\n"
  example: []
  syntax:
    content: public static tfloat MulComplement(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function MulComplement(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.MulComplement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SubMax0(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SubMax0(tfloat,tfloat)
  id: SubMax0(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SubMax0(tfloat, tfloat)
  nameWithType: ExM.SubMax0(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SubMax0(tfloat, tfloat)
  type: Method
  source:
    id: SubMax0
    path: ''
    startLine: 11552
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nmax(0, x-by).\n"
  example: []
  syntax:
    content: public static tfloat SubMax0(tfloat x, tfloat by)
    parameters:
    - id: x
      type: tfloat
    - id: by
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function SubMax0(x As tfloat, by As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SubMax0*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Increment(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Increment(tfloat)
  id: Increment(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Increment(tfloat)
  nameWithType: ExM.Increment(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Increment(tfloat)
  type: Method
  source:
    id: Increment
    path: ''
    startLine: 11559
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nx+1\n"
  example: []
  syntax:
    content: public static tfloat Increment(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Increment(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Increment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Decrement(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Decrement(tfloat)
  id: Decrement(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Decrement(tfloat)
  nameWithType: ExM.Decrement(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Decrement(tfloat)
  type: Method
  source:
    id: Decrement
    path: ''
    startLine: 11564
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nx-1\n"
  example: []
  syntax:
    content: public static tfloat Decrement(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Decrement(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Decrement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.DecrementSubtract(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DecrementSubtract(tfloat,tfloat)
  id: DecrementSubtract(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DecrementSubtract(tfloat, tfloat)
  nameWithType: ExM.DecrementSubtract(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DecrementSubtract(tfloat, tfloat)
  type: Method
  source:
    id: DecrementSubtract
    path: ''
    startLine: 11570
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nx-1-y\n"
  example: []
  syntax:
    content: public static tfloat DecrementSubtract(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function DecrementSubtract(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DecrementSubtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Neg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Neg(tfloat)
  id: Neg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Neg(tfloat)
  nameWithType: ExM.Neg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Neg(tfloat)
  type: Method
  source:
    id: Neg
    path: ''
    startLine: 11576
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns -1 * x.\n"
  example: []
  syntax:
    content: public static tfloat Neg(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Neg(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Neg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Negate``1(TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Negate``1(TEx{``0})
  id: Negate``1(TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Negate<T>(TEx<T>)
  nameWithType: ExM.Negate<T>(TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Negate<T>(TEx<T>)
  type: Method
  source:
    id: Negate
    path: ''
    startLine: 11581
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns -x.\n"
  example: []
  syntax:
    content: public static TEx<T> Negate<T>(TEx<T> x)
    parameters:
    - id: x
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function Negate(Of T)(x As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Negate*
  nameWithType.vb: ExM.Negate(Of T)(TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Negate(Of T)(TEx(Of T))
  name.vb: Negate(Of T)(TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.Sign(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Sign(tfloat)
  id: Sign(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sign(tfloat)
  nameWithType: ExM.Sign(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Sign(tfloat)
  type: Method
  source:
    id: Sign
    path: ''
    startLine: 11596
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns -1 if x lt 0 and 1 otherwise. (Note: Sign(0) = 1)\n"
  example: []
  syntax:
    content: public static tfloat Sign(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Sign(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Sign*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Exp(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Exp(tfloat)
  id: Exp(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Exp(tfloat)
  nameWithType: ExM.Exp(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Exp(tfloat)
  type: Method
  source:
    id: Exp
    path: ''
    startLine: 11603
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns e^x.\n"
  example: []
  syntax:
    content: public static tfloat Exp(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Exp(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Ln(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Ln(tfloat)
  id: Ln(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Ln(tfloat)
  nameWithType: ExM.Ln(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Ln(tfloat)
  type: Method
  source:
    id: Ln
    path: ''
    startLine: 11609
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns ln(x).\n"
  example: []
  syntax:
    content: public static tfloat Ln(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Ln(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Ln*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Sqrt(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Sqrt(tfloat)
  id: Sqrt(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sqrt(tfloat)
  nameWithType: ExM.Sqrt(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Sqrt(tfloat)
  type: Method
  source:
    id: Sqrt
    path: ''
    startLine: 11616
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the square root of a number.\n"
  example: []
  syntax:
    content: public static tfloat Sqrt(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Sqrt(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Sqr(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Sqr(tfloat)
  id: Sqr(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sqr(tfloat)
  nameWithType: ExM.Sqr(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Sqr(tfloat)
  type: Method
  source:
    id: Sqr
    path: ''
    startLine: 11621
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the square of a number.\n"
  example: []
  syntax:
    content: public static tfloat Sqr(tfloat f)
    parameters:
    - id: f
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Sqr(f As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Mag2(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Mag2(tfloat,tfloat)
  id: Mag2(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Mag2(tfloat, tfloat)
  nameWithType: ExM.Mag2(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Mag2(tfloat, tfloat)
  type: Method
  source:
    id: Mag2
    path: ''
    startLine: 11625
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the quantity sqrt(x^2+y^2).\n"
  example: []
  syntax:
    content: public static tfloat Mag2(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Mag2(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Mag2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SqrMag2(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SqrMag2(tfloat,tfloat)
  id: SqrMag2(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SqrMag2(tfloat, tfloat)
  nameWithType: ExM.SqrMag2(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SqrMag2(tfloat, tfloat)
  type: Method
  source:
    id: SqrMag2
    path: ''
    startLine: 11629
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the quantity x^2+y^2.\n"
  example: []
  syntax:
    content: public static tfloat SqrMag2(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function SqrMag2(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SqrMag2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SqrMag3(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SqrMag3(tfloat,tfloat,tfloat)
  id: SqrMag3(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SqrMag3(tfloat, tfloat, tfloat)
  nameWithType: ExM.SqrMag3(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SqrMag3(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: SqrMag3
    path: ''
    startLine: 11633
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the quantity x^2+y^2+z^2.\n"
  example: []
  syntax:
    content: public static tfloat SqrMag3(tfloat x, tfloat y, tfloat z)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    - id: z
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function SqrMag3(x As tfloat, y As tfloat, z As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SqrMag3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Mag(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.Mag(tv2)
  id: Mag(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Mag(tv2)
  nameWithType: ExM.Mag(tv2)
  fullName: Danmokou.DMath.Functions.ExM.Mag(tv2)
  type: Method
  source:
    id: Mag
    path: ''
    startLine: 11639
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the magnitude of a vector2.\n"
  example: []
  syntax:
    content: public static tfloat Mag(tv2 v2)
    parameters:
    - id: v2
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function Mag(v2 As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Mag*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.v3Mag(tv3)
  commentId: M:Danmokou.DMath.Functions.ExM.v3Mag(tv3)
  id: v3Mag(tv3)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: v3Mag(tv3)
  nameWithType: ExM.v3Mag(tv3)
  fullName: Danmokou.DMath.Functions.ExM.v3Mag(tv3)
  type: Method
  source:
    id: v3Mag
    path: ''
    startLine: 11644
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the magnitude of a vector3.\n"
  example: []
  syntax:
    content: public static tfloat v3Mag(tv3 v3)
    parameters:
    - id: v3
      type: tv3
    return:
      type: tfloat
    content.vb: Public Shared Function v3Mag(v3 As tv3) As tfloat
  overload: Danmokou.DMath.Functions.ExM.v3Mag*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Norm(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.Norm(tv2)
  id: Norm(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Norm(tv2)
  nameWithType: ExM.Norm(tv2)
  fullName: Danmokou.DMath.Functions.ExM.Norm(tv2)
  type: Method
  source:
    id: Norm
    path: ''
    startLine: 11649
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nNormalize a vector2.\n"
  example: []
  syntax:
    content: public static tv2 Norm(tv2 v2)
    parameters:
    - id: v2
      type: tv2
    return:
      type: tv2
    content.vb: Public Shared Function Norm(v2 As tv2) As tv2
  overload: Danmokou.DMath.Functions.ExM.Norm*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Norm3(tv3)
  commentId: M:Danmokou.DMath.Functions.ExM.Norm3(tv3)
  id: Norm3(tv3)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Norm3(tv3)
  nameWithType: ExM.Norm3(tv3)
  fullName: Danmokou.DMath.Functions.ExM.Norm3(tv3)
  type: Method
  source:
    id: Norm3
    path: ''
    startLine: 11661
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nNormalize a vector3.\n"
  example: []
  syntax:
    content: public static tv3 Norm3(tv3 v3)
    parameters:
    - id: v3
      type: tv3
    return:
      type: tv3
    content.vb: Public Shared Function Norm3(v3 As tv3) As tv3
  overload: Danmokou.DMath.Functions.ExM.Norm3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SqrMag(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.SqrMag(tv2)
  id: SqrMag(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SqrMag(tv2)
  nameWithType: ExM.SqrMag(tv2)
  fullName: Danmokou.DMath.Functions.ExM.SqrMag(tv2)
  type: Method
  source:
    id: SqrMag
    path: ''
    startLine: 11675
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the square magnitude of a vector2.\n"
  example: []
  syntax:
    content: public static tfloat SqrMag(tv2 v2)
    parameters:
    - id: v2
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function SqrMag(v2 As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SqrMag*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.v3SqrMag(tv3)
  commentId: M:Danmokou.DMath.Functions.ExM.v3SqrMag(tv3)
  id: v3SqrMag(tv3)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: v3SqrMag(tv3)
  nameWithType: ExM.v3SqrMag(tv3)
  fullName: Danmokou.DMath.Functions.ExM.v3SqrMag(tv3)
  type: Method
  source:
    id: v3SqrMag
    path: ''
    startLine: 11680
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the square magnitude of a vector3.\n"
  example: []
  syntax:
    content: public static tfloat v3SqrMag(tv3 v3)
    parameters:
    - id: v3
      type: tv3
    return:
      type: tfloat
    content.vb: Public Shared Function v3SqrMag(v3 As tv3) As tfloat
  overload: Danmokou.DMath.Functions.ExM.v3SqrMag*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Pow``1(TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExM.Pow``1(TEx{``0},TEx{``0})
  id: Pow``1(TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Pow<T>(TEx<T>, TEx<T>)
  nameWithType: ExM.Pow<T>(TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExM.Pow<T>(TEx<T>, TEx<T>)
  type: Method
  source:
    id: Pow
    path: ''
    startLine: 11687
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns (bas)^(exp).\n"
  example: []
  syntax:
    content: public static TEx<T> Pow<T>(TEx<T> bas, TEx<T> exp)
    parameters:
    - id: bas
      type: TEx{{T}}
    - id: exp
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function Pow(Of T)(bas As TEx(Of T), exp As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.Pow*
  nameWithType.vb: ExM.Pow(Of T)(TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.Pow(Of T)(TEx(Of T), TEx(Of T))
  name.vb: Pow(Of T)(TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExM.PowSub(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.PowSub(tfloat,tfloat)
  id: PowSub(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: PowSub(tfloat, tfloat)
  nameWithType: ExM.PowSub(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.PowSub(tfloat, tfloat)
  type: Method
  source:
    id: PowSub
    path: ''
    startLine: 11694
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns one function raised to the power of the other, subtracted by the first function. (Alias: ^- bas exp)\nUseful for getting polynomial curves that start at zero, eg. ^- t 1.1\n"
  example: []
  syntax:
    content: public static tfloat PowSub(tfloat bas, tfloat exp)
    parameters:
    - id: bas
      type: tfloat
    - id: exp
      type: tfloat
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function PowSub(bas As tfloat, exp As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.PowSub*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.NPow(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.NPow(tfloat,tfloat)
  id: NPow(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: NPow(tfloat, tfloat)
  nameWithType: ExM.NPow(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.NPow(tfloat, tfloat)
  type: Method
  source:
    id: NPow
    path: ''
    startLine: 11711
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns one number raised to the power of the other.\nIf bas is negative, then returns - (-bas)^exp. This allows fractional powers on negatives.\n(Alias: ^^ bas exp)\n"
  example: []
  syntax:
    content: public static tfloat NPow(tfloat bas, tfloat exp)
    parameters:
    - id: bas
      type: tfloat
      description: Base
    - id: exp
      type: tfloat
      description: Exponent
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function NPow(bas As tfloat, exp As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.NPow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Round(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Round(tfloat)
  id: Round(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Round(tfloat)
  nameWithType: ExM.Round(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Round(tfloat)
  type: Method
  source:
    id: Round
    path: ''
    startLine: 11724
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nRound a number to the nearest intereger.\n"
  example: []
  syntax:
    content: public static tfloat Round(tfloat ex)
    parameters:
    - id: ex
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Round(ex As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.BlockRound(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.BlockRound(tfloat,tfloat)
  id: BlockRound(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: BlockRound(tfloat, tfloat)
  nameWithType: ExM.BlockRound(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.BlockRound(tfloat, tfloat)
  type: Method
  source:
    id: BlockRound
    path: ''
    startLine: 11729
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\n= Round(ex / block) * block\n"
  example: []
  syntax:
    content: public static tfloat BlockRound(tfloat block, tfloat ex)
    parameters:
    - id: block
      type: tfloat
    - id: ex
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function BlockRound(block As tfloat, ex As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.BlockRound*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Floor(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Floor(tfloat)
  id: Floor(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Floor(tfloat)
  nameWithType: ExM.Floor(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Floor(tfloat)
  type: Method
  source:
    id: Floor
    path: ''
    startLine: 11735
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the floor of a float value.\n"
  example: []
  syntax:
    content: public static tfloat Floor(tfloat ex)
    parameters:
    - id: ex
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Floor(ex As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.BlockFloor(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.BlockFloor(tfloat,tfloat)
  id: BlockFloor(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: BlockFloor(tfloat, tfloat)
  nameWithType: ExM.BlockFloor(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.BlockFloor(tfloat, tfloat)
  type: Method
  source:
    id: BlockFloor
    path: ''
    startLine: 11739
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\n= Floor(ex / block) * block\n"
  example: []
  syntax:
    content: public static tfloat BlockFloor(tfloat block, tfloat ex)
    parameters:
    - id: block
      type: tfloat
    - id: ex
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function BlockFloor(block As tfloat, ex As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.BlockFloor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.dFloor(Ex)
  commentId: M:Danmokou.DMath.Functions.ExM.dFloor(Ex)
  id: dFloor(Ex)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: dFloor(Ex)
  nameWithType: ExM.dFloor(Ex)
  fullName: Danmokou.DMath.Functions.ExM.dFloor(Ex)
  type: Method
  source:
    id: dFloor
    path: ''
    startLine: 11741
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static Ex dFloor(Ex ex)
    parameters:
    - id: ex
      type: Ex
    return:
      type: Ex
    content.vb: Public Shared Function dFloor(ex As Ex) As Ex
  overload: Danmokou.DMath.Functions.ExM.dFloor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Ceil(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Ceil(tfloat)
  id: Ceil(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Ceil(tfloat)
  nameWithType: ExM.Ceil(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Ceil(tfloat)
  type: Method
  source:
    id: Ceil
    path: ''
    startLine: 11745
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the ceil of a float value.\n"
  example: []
  syntax:
    content: public static tfloat Ceil(tfloat ex)
    parameters:
    - id: ex
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Ceil(ex As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Ceil*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Abs(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Abs(tfloat)
  id: Abs(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Abs(tfloat)
  nameWithType: ExM.Abs(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Abs(tfloat)
  type: Method
  source:
    id: Abs
    path: ''
    startLine: 11754
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the absolute value of a number.\n"
  example: []
  syntax:
    content: public static tfloat Abs(tfloat var)
    parameters:
    - id: var
      type: tfloat
      description: Target
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Abs(var As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Diff(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Diff(tfloat,tfloat)
  id: Diff(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Diff(tfloat, tfloat)
  nameWithType: ExM.Diff(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Diff(tfloat, tfloat)
  type: Method
  source:
    id: Diff
    path: ''
    startLine: 11761
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturns the nonnegative difference between two numbers.\n"
  example: []
  syntax:
    content: public static tfloat Diff(tfloat x, tfloat y)
    parameters:
    - id: x
      type: tfloat
    - id: y
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Diff(x As tfloat, y As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Diff*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Dist(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.Dist(tv2,tv2)
  id: Dist(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Dist(tv2, tv2)
  nameWithType: ExM.Dist(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.Dist(tv2, tv2)
  type: Method
  source:
    id: Dist
    path: ''
    startLine: 11767
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the normalized distance (square root) between two parametric equations.\n"
  example: []
  syntax:
    content: public static tfloat Dist(tv2 f1, tv2 f2)
    parameters:
    - id: f1
      type: tv2
    - id: f2
      type: tv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Dist(f1 As tv2, f2 As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Dist*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SqrDist(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.SqrDist(tv2,tv2)
  id: SqrDist(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SqrDist(tv2, tv2)
  nameWithType: ExM.SqrDist(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.SqrDist(tv2, tv2)
  type: Method
  source:
    id: SqrDist
    path: ''
    startLine: 11773
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the normalized square distance between two parametric equations.\n"
  example: []
  syntax:
    content: public static tfloat SqrDist(tv2 f1, tv2 f2)
    parameters:
    - id: f1
      type: tv2
    - id: f2
      type: tv2
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SqrDist(f1 As tv2, f2 As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SqrDist*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Min(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Min(tfloat,tfloat)
  id: Min(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Min(tfloat, tfloat)
  nameWithType: ExM.Min(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Min(tfloat, tfloat)
  type: Method
  source:
    id: Min
    path: ''
    startLine: 11779
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the smaller of two numbers.\n"
  example: []
  syntax:
    content: public static tfloat Min(tfloat x1, tfloat x2)
    parameters:
    - id: x1
      type: tfloat
    - id: x2
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Min(x1 As tfloat, x2 As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.MinA(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.MinA(tfloat,tfloat)
  id: MinA(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MinA(tfloat, tfloat)
  nameWithType: ExM.MinA(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.MinA(tfloat, tfloat)
  type: Method
  source:
    id: MinA
    path: ''
    startLine: 11785
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nOf two numbers, return the one with the smaller absolute value.\nNot well-defined when x1 = -x2.\n"
  example: []
  syntax:
    content: public static tfloat MinA(tfloat x1, tfloat x2)
    parameters:
    - id: x1
      type: tfloat
    - id: x2
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function MinA(x1 As tfloat, x2 As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.MinA*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Max(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Max(tfloat,tfloat)
  id: Max(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Max(tfloat, tfloat)
  nameWithType: ExM.Max(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Max(tfloat, tfloat)
  type: Method
  source:
    id: Max
    path: ''
    startLine: 11791
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the larger of two numbers.\n"
  example: []
  syntax:
    content: public static tfloat Max(tfloat x1, tfloat x2)
    parameters:
    - id: x1
      type: tfloat
    - id: x2
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Max(x1 As tfloat, x2 As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.MaxA(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.MaxA(tfloat,tfloat)
  id: MaxA(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MaxA(tfloat, tfloat)
  nameWithType: ExM.MaxA(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.MaxA(tfloat, tfloat)
  type: Method
  source:
    id: MaxA
    path: ''
    startLine: 11796
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nOf two numbers, return the one with the larger absolute value.\nNot well-defined when x1 = -x2.\n"
  example: []
  syntax:
    content: public static tfloat MaxA(tfloat x1, tfloat x2)
    parameters:
    - id: x1
      type: tfloat
    - id: x2
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function MaxA(x1 As tfloat, x2 As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.MaxA*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Limit(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Limit(tfloat,tfloat)
  id: Limit(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Limit(tfloat, tfloat)
  nameWithType: ExM.Limit(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Limit(tfloat, tfloat)
  type: Method
  source:
    id: Limit
    path: ''
    startLine: 11805
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nLimit a value x to have absolute value leq by.\n"
  example: []
  syntax:
    content: public static tfloat Limit(tfloat by, tfloat x)
    parameters:
    - id: by
      type: tfloat
      description: Positive number for absolute value comparison
    - id: x
      type: tfloat
      description: Number to be limited
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Limit(by As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Limit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.HighPass(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.HighPass(tfloat,tfloat)
  id: HighPass(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: HighPass(tfloat, tfloat)
  nameWithType: ExM.HighPass(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.HighPass(tfloat, tfloat)
  type: Method
  source:
    id: HighPass
    path: ''
    startLine: 11811
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nIf x&apos;s absolute value is less than by, then return 0 instead.\n"
  example: []
  syntax:
    content: public static tfloat HighPass(tfloat by, tfloat x)
    parameters:
    - id: by
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function HighPass(by As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.HighPass*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.HighCut(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.HighCut(tfloat,tfloat)
  id: HighCut(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: HighCut(tfloat, tfloat)
  nameWithType: ExM.HighCut(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.HighCut(tfloat, tfloat)
  type: Method
  source:
    id: HighCut
    path: ''
    startLine: 11816
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nIf x&apos;s absolute value is greater than by, then return 0 instead.\n"
  example: []
  syntax:
    content: public static tfloat HighCut(tfloat by, tfloat x)
    parameters:
    - id: by
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function HighCut(by As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.HighCut*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Clamp(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Clamp(tfloat,tfloat,tfloat)
  id: Clamp(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Clamp(tfloat, tfloat, tfloat)
  nameWithType: ExM.Clamp(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Clamp(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Clamp
    path: ''
    startLine: 11824
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nClamp a value to a [min, max] range.\n"
  example: []
  syntax:
    content: public static tfloat Clamp(tfloat min, tfloat max, tfloat x)
    parameters:
    - id: min
      type: tfloat
    - id: max
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Clamp(min As tfloat, max As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Clamp01(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Clamp01(tfloat)
  id: Clamp01(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Clamp01(tfloat)
  nameWithType: ExM.Clamp01(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Clamp01(tfloat)
  type: Method
  source:
    id: Clamp01
    path: ''
    startLine: 11829
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nClamp a value to the [0, 1] range.\n"
  example: []
  syntax:
    content: public static tfloat Clamp01(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Clamp01(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Clamp01*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Linear(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Linear(tfloat,tfloat,tfloat)
  id: Linear(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Linear(tfloat, tfloat, tfloat)
  nameWithType: ExM.Linear(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Linear(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Linear
    path: ''
    startLine: 11834
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the linear function a+b*x.\n"
  example: []
  syntax:
    content: public static tfloat Linear(tfloat a, tfloat b, tfloat x)
    parameters:
    - id: a
      type: tfloat
    - id: b
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Linear(a As tfloat, b As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Linear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadIntoRange(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RadIntoRange(tfloat)
  id: RadIntoRange(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadIntoRange(tfloat)
  nameWithType: ExM.RadIntoRange(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RadIntoRange(tfloat)
  type: Method
  source:
    id: RadIntoRange
    path: ''
    startLine: 11841
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMove a value in the range [-3pi, 3pi] to the range [-pi, pi] by adding or subtracting tau.\n"
  example: []
  syntax:
    content: public static tfloat RadIntoRange(tfloat ang_rad)
    parameters:
    - id: ang_rad
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RadIntoRange(ang_rad As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadIntoRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadToNeg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RadToNeg(tfloat)
  id: RadToNeg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadToNeg(tfloat)
  nameWithType: ExM.RadToNeg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RadToNeg(tfloat)
  type: Method
  source:
    id: RadToNeg
    path: ''
    startLine: 11853
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMove a value in the range [-2pi, 2pi] to the range [-2pi, 0] by subtracting tau.\n"
  example: []
  syntax:
    content: public static tfloat RadToNeg(tfloat ang_rad)
    parameters:
    - id: ang_rad
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RadToNeg(ang_rad As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadToNeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadToPos(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.RadToPos(tfloat)
  id: RadToPos(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadToPos(tfloat)
  nameWithType: ExM.RadToPos(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.RadToPos(tfloat)
  type: Method
  source:
    id: RadToPos
    path: ''
    startLine: 11860
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMove a value in the range [-2pi, 2pi] to the range [0,2pi] by adding tau.\n"
  example: []
  syntax:
    content: public static tfloat RadToPos(tfloat ang_rad)
    parameters:
    - id: ang_rad
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function RadToPos(ang_rad As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadToPos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.DegIntoRange(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DegIntoRange(tfloat)
  id: DegIntoRange(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DegIntoRange(tfloat)
  nameWithType: ExM.DegIntoRange(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DegIntoRange(tfloat)
  type: Method
  source:
    id: DegIntoRange
    path: ''
    startLine: 11867
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nMove a value in the range [-540, 540] to the range [-180, 180] by adding or subtracting 360.\n"
  example: []
  syntax:
    content: public static tfloat DegIntoRange(tfloat ang_rad)
    parameters:
    - id: ang_rad
      type: tfloat
      description: ''
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function DegIntoRange(ang_rad As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DegIntoRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.DegDiff(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.DegDiff(tv2,tv2)
  id: DegDiff(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DegDiff(tv2, tv2)
  nameWithType: ExM.DegDiff(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.DegDiff(tv2, tv2)
  type: Method
  source:
    id: DegDiff
    path: ''
    startLine: 11877
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotation required, in degrees, to rotate SOURCE to TARGET, in the range [-180,180].\n"
  example: []
  syntax:
    content: public static tfloat DegDiff(tv2 target, tv2 source)
    parameters:
    - id: target
      type: tv2
    - id: source
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function DegDiff(target As tv2, source As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DegDiff*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadDiff(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RadDiff(tv2,tv2)
  id: RadDiff(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadDiff(tv2, tv2)
  nameWithType: ExM.RadDiff(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.RadDiff(tv2, tv2)
  type: Method
  source:
    id: RadDiff
    path: ''
    startLine: 11881
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotation required, in radians, to rotate SOURCE to TARGET, in the range [-pi,pi].\n"
  example: []
  syntax:
    content: public static tfloat RadDiff(tv2 target, tv2 source)
    parameters:
    - id: target
      type: tv2
    - id: source
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function RadDiff(target As tv2, source As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadDiff*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadDiffCCW(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RadDiffCCW(tv2,tv2)
  id: RadDiffCCW(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadDiffCCW(tv2, tv2)
  nameWithType: ExM.RadDiffCCW(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.RadDiffCCW(tv2, tv2)
  type: Method
  source:
    id: RadDiffCCW
    path: ''
    startLine: 11885
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotation required, in radians, to rotate SOURCE to TARGET, in the range [0,2pi].\n"
  example: []
  syntax:
    content: public static tfloat RadDiffCCW(tv2 target, tv2 source)
    parameters:
    - id: target
      type: tv2
    - id: source
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function RadDiffCCW(target As tv2, source As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadDiffCCW*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.RadDiffCW(tv2,tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.RadDiffCW(tv2,tv2)
  id: RadDiffCW(tv2,tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: RadDiffCW(tv2, tv2)
  nameWithType: ExM.RadDiffCW(tv2, tv2)
  fullName: Danmokou.DMath.Functions.ExM.RadDiffCW(tv2, tv2)
  type: Method
  source:
    id: RadDiffCW
    path: ''
    startLine: 11890
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the rotation required, in radians, to rotate SOURCE to TARGET, in the range [-2pi,0].\n"
  example: []
  syntax:
    content: public static tfloat RadDiffCW(tv2 target, tv2 source)
    parameters:
    - id: target
      type: tv2
    - id: source
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function RadDiffCW(target As tv2, source As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.RadDiffCW*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Sin(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Sin(tfloat)
  id: Sin(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sin(tfloat)
  nameWithType: ExM.Sin(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Sin(tfloat)
  type: Method
  source:
    id: Sin
    path: ''
    startLine: 11906
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe raw sine function (period 2pi, peakheight 1).\n"
  example: []
  syntax:
    content: public static tfloat Sin(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Sin(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Cos(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Cos(tfloat)
  id: Cos(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Cos(tfloat)
  nameWithType: ExM.Cos(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Cos(tfloat)
  type: Method
  source:
    id: Cos
    path: ''
    startLine: 11911
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe raw cosine function (period 2pi, peakheight 1).\n"
  example: []
  syntax:
    content: public static tfloat Cos(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Cos(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.CosSin(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.CosSin(tfloat)
  id: CosSin(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: CosSin(tfloat)
  nameWithType: ExM.CosSin(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.CosSin(tfloat)
  type: Method
  source:
    id: CosSin
    path: ''
    startLine: 11915
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the raw cosine and sine functions together.\n"
  example: []
  syntax:
    content: public static TEx<Vector2> CosSin(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: TEx{Vector2}
    content.vb: Public Shared Function CosSin(x As tfloat) As TEx(Of Vector2)
  overload: Danmokou.DMath.Functions.ExM.CosSin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.SinDeg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.SinDeg(tfloat)
  id: SinDeg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: SinDeg(tfloat)
  nameWithType: ExM.SinDeg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.SinDeg(tfloat)
  type: Method
  source:
    id: SinDeg
    path: ''
    startLine: 11920
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe raw degree sine function (period 360, peakheight 1).\n"
  example: []
  syntax:
    content: public static tfloat SinDeg(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function SinDeg(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.SinDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.CosDeg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.CosDeg(tfloat)
  id: CosDeg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: CosDeg(tfloat)
  nameWithType: ExM.CosDeg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.CosDeg(tfloat)
  type: Method
  source:
    id: CosDeg
    path: ''
    startLine: 11925
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe raw degree cosine function (period 360,, peakheight 1).\n"
  example: []
  syntax:
    content: public static tfloat CosDeg(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function CosDeg(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.CosDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.CosSinDeg(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.CosSinDeg(tfloat)
  id: CosSinDeg(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: CosSinDeg(tfloat)
  nameWithType: ExM.CosSinDeg(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.CosSinDeg(tfloat)
  type: Method
  source:
    id: CosSinDeg
    path: ''
    startLine: 11929
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the raw degree cosine and sine functions together.\n"
  example: []
  syntax:
    content: public static TEx<Vector2> CosSinDeg(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: TEx{Vector2}
    content.vb: Public Shared Function CosSinDeg(x As tfloat) As TEx(Of Vector2)
  overload: Danmokou.DMath.Functions.ExM.CosSinDeg*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Sine(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Sine(tfloat,tfloat,tfloat)
  id: Sine(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Sine(tfloat, tfloat, tfloat)
  nameWithType: ExM.Sine(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Sine(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Sine
    path: ''
    startLine: 11941
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn a sine with a custom period/amplitude.\n"
  example: []
  syntax:
    content: public static tfloat Sine(tfloat period, tfloat peakHeight, tfloat f)
    parameters:
    - id: period
      type: tfloat
      description: Sine period
    - id: peakHeight
      type: tfloat
      description: Sine peak height
    - id: f
      type: tfloat
      description: Target function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Sine(period As tfloat, peakHeight As tfloat, f As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Sine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.DSine(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DSine(tfloat,tfloat,tfloat)
  id: DSine(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DSine(tfloat, tfloat, tfloat)
  nameWithType: ExM.DSine(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DSine(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: DSine
    path: ''
    startLine: 11949
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the derivative of a sine with a custom period/amplitude.\n"
  example: []
  syntax:
    content: public static tfloat DSine(tfloat period, tfloat peakHeight, tfloat f)
    parameters:
    - id: period
      type: tfloat
      description: Sine period
    - id: peakHeight
      type: tfloat
      description: Sine peak height
    - id: f
      type: tfloat
      description: Target function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function DSine(period As tfloat, peakHeight As tfloat, f As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DSine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Cosine(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Cosine(tfloat,tfloat,tfloat)
  id: Cosine(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Cosine(tfloat, tfloat, tfloat)
  nameWithType: ExM.Cosine(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Cosine(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: Cosine
    path: ''
    startLine: 11963
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn a cosine with a custom period/amplitude.\n"
  example: []
  syntax:
    content: public static tfloat Cosine(tfloat period, tfloat peakHeight, tfloat f)
    parameters:
    - id: period
      type: tfloat
      description: Cosine period
    - id: peakHeight
      type: tfloat
      description: Cosine peak height
    - id: f
      type: tfloat
      description: Target function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function Cosine(period As tfloat, peakHeight As tfloat, f As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Cosine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.DCosine(tfloat,tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.DCosine(tfloat,tfloat,tfloat)
  id: DCosine(tfloat,tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: DCosine(tfloat, tfloat, tfloat)
  nameWithType: ExM.DCosine(tfloat, tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.DCosine(tfloat, tfloat, tfloat)
  type: Method
  source:
    id: DCosine
    path: ''
    startLine: 11971
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the derivative of a cosine with a custom period/amplitude.\n"
  example: []
  syntax:
    content: public static tfloat DCosine(tfloat period, tfloat peakHeight, tfloat f)
    parameters:
    - id: period
      type: tfloat
      description: Cosine period
    - id: peakHeight
      type: tfloat
      description: Cosine peak height
    - id: f
      type: tfloat
      description: Target function
    return:
      type: tfloat
      description: ''
    content.vb: Public Shared Function DCosine(period As tfloat, peakHeight As tfloat, f As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.DCosine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ACosR(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.ACosR(tfloat)
  id: ACosR(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ACosR(tfloat)
  nameWithType: ExM.ACosR(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.ACosR(tfloat)
  type: Method
  source:
    id: ACosR
    path: ''
    startLine: 11983
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nGet the arccosine in radians of a number.\n"
  example: []
  syntax:
    content: public static tfloat ACosR(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function ACosR(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ACosR*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ACos(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.ACos(tfloat)
  id: ACos(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ACos(tfloat)
  nameWithType: ExM.ACos(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.ACos(tfloat)
  type: Method
  source:
    id: ACos
    path: ''
    startLine: 11985
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static tfloat ACos(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function ACos(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ACos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.Tan(tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.Tan(tfloat)
  id: Tan(tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: Tan(tfloat)
  nameWithType: ExM.Tan(tfloat)
  fullName: Danmokou.DMath.Functions.ExM.Tan(tfloat)
  type: Method
  source:
    id: Tan
    path: ''
    startLine: 11990
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nThe raw tangent function.\n"
  example: []
  syntax:
    content: public static tfloat Tan(tfloat x)
    parameters:
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function Tan(x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ATanR2(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.ATanR2(tfloat,tfloat)
  id: ATanR2(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ATanR2(tfloat, tfloat)
  nameWithType: ExM.ATanR2(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.ATanR2(tfloat, tfloat)
  type: Method
  source:
    id: ATanR2
    path: ''
    startLine: 11997
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the angle in radians whose tangent is y/x.\n"
  example: []
  syntax:
    content: public static tfloat ATanR2(tfloat y, tfloat x)
    parameters:
    - id: y
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function ATanR2(y As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ATanR2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ATanR(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.ATanR(tv2)
  id: ATanR(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ATanR(tv2)
  nameWithType: ExM.ATanR(tv2)
  fullName: Danmokou.DMath.Functions.ExM.ATanR(tv2)
  type: Method
  source:
    id: ATanR
    path: ''
    startLine: 12002
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the angle in radians whose tangent is v2.y/v2.x.\n"
  example: []
  syntax:
    content: public static tfloat ATanR(tv2 f)
    parameters:
    - id: f
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function ATanR(f As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ATanR*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ATan2(tfloat,tfloat)
  commentId: M:Danmokou.DMath.Functions.ExM.ATan2(tfloat,tfloat)
  id: ATan2(tfloat,tfloat)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ATan2(tfloat, tfloat)
  nameWithType: ExM.ATan2(tfloat, tfloat)
  fullName: Danmokou.DMath.Functions.ExM.ATan2(tfloat, tfloat)
  type: Method
  source:
    id: ATan2
    path: ''
    startLine: 12006
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the angle in degrees whose tangent is y/x.\n"
  example: []
  syntax:
    content: public static tfloat ATan2(tfloat y, tfloat x)
    parameters:
    - id: y
      type: tfloat
    - id: x
      type: tfloat
    return:
      type: tfloat
    content.vb: Public Shared Function ATan2(y As tfloat, x As tfloat) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ATan2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ATan(tv2)
  commentId: M:Danmokou.DMath.Functions.ExM.ATan(tv2)
  id: ATan(tv2)
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ATan(tv2)
  nameWithType: ExM.ATan(tv2)
  fullName: Danmokou.DMath.Functions.ExM.ATan(tv2)
  type: Method
  source:
    id: ATan
    path: ''
    startLine: 12010
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nReturn the angle in degrees whose tangent is v2.y/v2.x.\n"
  example: []
  syntax:
    content: public static tfloat ATan(tv2 f)
    parameters:
    - id: f
      type: tv2
    return:
      type: tfloat
    content.vb: Public Shared Function ATan(f As tv2) As tfloat
  overload: Danmokou.DMath.Functions.ExM.ATan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Danmokou.DMath.Functions.ExM.ArrayIndex``1(TEx{``0[]},TEx{System.Int32})
  commentId: M:Danmokou.DMath.Functions.ExM.ArrayIndex``1(TEx{``0[]},TEx{System.Int32})
  id: ArrayIndex``1(TEx{``0[]},TEx{System.Int32})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: ArrayIndex<T>(TEx<T[]>, TEx<Int32>)
  nameWithType: ExM.ArrayIndex<T>(TEx<T[]>, TEx<Int32>)
  fullName: Danmokou.DMath.Functions.ExM.ArrayIndex<T>(TEx<T[]>, TEx<System.Int32>)
  type: Method
  source:
    id: ArrayIndex
    path: ''
    startLine: 12016
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nArray indexing operator arr[index].\n"
  example: []
  syntax:
    content: public static TEx<T> ArrayIndex<T>(TEx<T[]> arr, TEx<int> index)
    parameters:
    - id: arr
      type: TEx{{T}[]}
    - id: index
      type: TEx{System.Int32}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function ArrayIndex(Of T)(arr As TEx(Of T()), index As TEx(Of Integer)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.ArrayIndex*
  nameWithType.vb: ExM.ArrayIndex(Of T)(TEx(Of T()), TEx(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.ArrayIndex(Of T)(TEx(Of T()), TEx(Of System.Int32))
  name.vb: ArrayIndex(Of T)(TEx(Of T()), TEx(Of Int32))
- uid: Danmokou.DMath.Functions.ExM.MIndex``1(TEx{``0[]},TEx{System.Single})
  commentId: M:Danmokou.DMath.Functions.ExM.MIndex``1(TEx{``0[]},TEx{System.Single})
  id: MIndex``1(TEx{``0[]},TEx{System.Single})
  parent: Danmokou.DMath.Functions.ExM
  langs:
  - csharp
  - vb
  name: MIndex<T>(TEx<T[]>, TEx<Single>)
  nameWithType: ExM.MIndex<T>(TEx<T[]>, TEx<Single>)
  fullName: Danmokou.DMath.Functions.ExM.MIndex<T>(TEx<T[]>, TEx<System.Single>)
  type: Method
  source:
    id: MIndex
    path: ''
    startLine: 12026
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  summary: "\nIndex into the provided array, treating the index as an integer and looping around to the front\nif it goes out of bounds.\n"
  example: []
  syntax:
    content: public static TEx<T> MIndex<T>(TEx<T[]> arr, TEx<float> index)
    parameters:
    - id: arr
      type: TEx{{T}[]}
    - id: index
      type: TEx{System.Single}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function MIndex(Of T)(arr As TEx(Of T()), index As TEx(Of Single)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExM.MIndex*
  nameWithType.vb: ExM.MIndex(Of T)(TEx(Of T()), TEx(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExM.MIndex(Of T)(TEx(Of T()), TEx(Of System.Single))
  name.vb: MIndex(Of T)(TEx(Of T()), TEx(Of Single))
references:
- uid: Danmokou.DMath.Functions
  commentId: N:Danmokou.DMath.Functions
  name: Danmokou.DMath.Functions
  nameWithType: Danmokou.DMath.Functions
  fullName: Danmokou.DMath.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.DMath.Functions.ExM.YMin*
  commentId: Overload:Danmokou.DMath.Functions.ExM.YMin
  name: YMin
  nameWithType: ExM.YMin
  fullName: Danmokou.DMath.Functions.ExM.YMin
- uid: TEx{System.Single}
  commentId: '!:TEx{System.Single}'
  definition: TEx`1
  name: TEx<Single>
  nameWithType: TEx<Single>
  fullName: TEx<System.Single>
  nameWithType.vb: TEx(Of Single)
  fullName.vb: TEx(Of System.Single)
  name.vb: TEx(Of Single)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TEx`1
  isExternal: true
  name: TEx<>
  nameWithType: TEx<>
  fullName: TEx<>
  nameWithType.vb: TEx(Of )
  fullName.vb: TEx(Of )
  name.vb: TEx(Of )
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.YMax*
  commentId: Overload:Danmokou.DMath.Functions.ExM.YMax
  name: YMax
  nameWithType: ExM.YMax
  fullName: Danmokou.DMath.Functions.ExM.YMax
- uid: Danmokou.DMath.Functions.ExM.XMin*
  commentId: Overload:Danmokou.DMath.Functions.ExM.XMin
  name: XMin
  nameWithType: ExM.XMin
  fullName: Danmokou.DMath.Functions.ExM.XMin
- uid: Danmokou.DMath.Functions.ExM.XMax*
  commentId: Overload:Danmokou.DMath.Functions.ExM.XMax
  name: XMax
  nameWithType: ExM.XMax
  fullName: Danmokou.DMath.Functions.ExM.XMax
- uid: Danmokou.DMath.Functions.ExM.YMinMinus1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.YMinMinus1
  name: YMinMinus1
  nameWithType: ExM.YMinMinus1
  fullName: Danmokou.DMath.Functions.ExM.YMinMinus1
- uid: Danmokou.DMath.Functions.ExM.YMaxPlus1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.YMaxPlus1
  name: YMaxPlus1
  nameWithType: ExM.YMaxPlus1
  fullName: Danmokou.DMath.Functions.ExM.YMaxPlus1
- uid: Danmokou.DMath.Functions.ExM.XMinMinus1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.XMinMinus1
  name: XMinMinus1
  nameWithType: ExM.XMinMinus1
  fullName: Danmokou.DMath.Functions.ExM.XMinMinus1
- uid: Danmokou.DMath.Functions.ExM.XMaxPlus1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.XMaxPlus1
  name: XMaxPlus1
  nameWithType: ExM.XMaxPlus1
  fullName: Danmokou.DMath.Functions.ExM.XMaxPlus1
- uid: Danmokou.DMath.Functions.ExM.XWidth*
  commentId: Overload:Danmokou.DMath.Functions.ExM.XWidth
  name: XWidth
  nameWithType: ExM.XWidth
  fullName: Danmokou.DMath.Functions.ExM.XWidth
- uid: Danmokou.DMath.Functions.ExM.YHeight*
  commentId: Overload:Danmokou.DMath.Functions.ExM.YHeight
  name: YHeight
  nameWithType: ExM.YHeight
  fullName: Danmokou.DMath.Functions.ExM.YHeight
- uid: Danmokou.DMath.Functions.ExM.LPlayer*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LPlayer
  name: LPlayer
  nameWithType: ExM.LPlayer
  fullName: Danmokou.DMath.Functions.ExM.LPlayer
- uid: TEx{Vector2}
  commentId: '!:TEx{Vector2}'
  definition: TEx`1
  name: TEx<Vector2>
  nameWithType: TEx<Vector2>
  fullName: TEx<Vector2>
  nameWithType.vb: TEx(Of Vector2)
  fullName.vb: TEx(Of Vector2)
  name.vb: TEx(Of Vector2)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.LPlayerTrue*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LPlayerTrue
  name: LPlayerTrue
  nameWithType: ExM.LPlayerTrue
  fullName: Danmokou.DMath.Functions.ExM.LPlayerTrue
- uid: Danmokou.DMath.Functions.ExM.LBEH*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LBEH
  name: LBEH
  nameWithType: ExM.LBEH
  fullName: Danmokou.DMath.Functions.ExM.LBEH
- uid: TEx{BehaviorEntity}
  commentId: '!:TEx{BehaviorEntity}'
  definition: TEx`1
  name: TEx<BehaviorEntity>
  nameWithType: TEx<BehaviorEntity>
  fullName: TEx<BehaviorEntity>
  nameWithType.vb: TEx(Of BehaviorEntity)
  fullName.vb: TEx(Of BehaviorEntity)
  name.vb: TEx(Of BehaviorEntity)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.DistToWall*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DistToWall
  name: DistToWall
  nameWithType: ExM.DistToWall
  fullName: Danmokou.DMath.Functions.ExM.DistToWall
- uid: tv2
  isExternal: true
  name: tv2
  nameWithType: tv2
  fullName: tv2
- uid: tfloat
  isExternal: true
  name: tfloat
  nameWithType: tfloat
  fullName: tfloat
- uid: Danmokou.DMath.Functions.ExM.ToWall*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ToWall
  name: ToWall
  nameWithType: ExM.ToWall
  fullName: Danmokou.DMath.Functions.ExM.ToWall
- uid: Danmokou.DMath.Functions.ExM.Reference*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Reference
  name: Reference
  nameWithType: ExM.Reference
  fullName: Danmokou.DMath.Functions.ExM.Reference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{TExArgCtx,TEx{{T}}}
  commentId: T:System.Func{TExArgCtx,TEx{``0}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<T>>
  nameWithType: Func<TExArgCtx, TEx<T>>
  fullName: System.Func<TExArgCtx, TEx<T>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of T))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of T))
  name.vb: Func(Of TExArgCtx, TEx(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.ReferenceLet*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ReferenceLet
  name: ReferenceLet
  nameWithType: ExM.ReferenceLet
  fullName: Danmokou.DMath.Functions.ExM.ReferenceLet
- uid: Danmokou.DMath.Functions.ExM.ReferenceSafe*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ReferenceSafe
  name: ReferenceSafe
  nameWithType: ExM.ReferenceSafe
  fullName: Danmokou.DMath.Functions.ExM.ReferenceSafe
- uid: Danmokou.DMath.Functions.ExM.RetrieveHoisted*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RetrieveHoisted
  name: RetrieveHoisted
  nameWithType: ExM.RetrieveHoisted
  fullName: Danmokou.DMath.Functions.ExM.RetrieveHoisted
- uid: ReflectEx.Hoist{{T}}
  commentId: '!:ReflectEx.Hoist{``0}'
  definition: ReflectEx.Hoist`1
  name: ReflectEx.Hoist<T>
  nameWithType: ReflectEx.Hoist<T>
  fullName: ReflectEx.Hoist<T>
  nameWithType.vb: ReflectEx.Hoist(Of T)
  fullName.vb: ReflectEx.Hoist(Of T)
  name.vb: ReflectEx.Hoist(Of T)
  spec.csharp:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TExArgCtx,TEx{System.Single}}
  commentId: T:System.Func{TExArgCtx,TEx{System.Single}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<Single>>
  nameWithType: Func<TExArgCtx, TEx<Single>>
  fullName: System.Func<TExArgCtx, TEx<System.Single>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of Single))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of System.Single))
  name.vb: Func(Of TExArgCtx, TEx(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ReflectEx.Hoist`1
  isExternal: true
  name: ReflectEx.Hoist<>
  nameWithType: ReflectEx.Hoist<>
  fullName: ReflectEx.Hoist<>
  nameWithType.vb: ReflectEx.Hoist(Of )
  fullName.vb: ReflectEx.Hoist(Of )
  name.vb: ReflectEx.Hoist(Of )
  spec.csharp:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReflectEx.Hoist`1
    name: ReflectEx.Hoist
    nameWithType: ReflectEx.Hoist
    fullName: ReflectEx.Hoist
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.RetrieveHoisted0*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RetrieveHoisted0
  name: RetrieveHoisted0
  nameWithType: ExM.RetrieveHoisted0
  fullName: Danmokou.DMath.Functions.ExM.RetrieveHoisted0
- uid: Danmokou.DMath.Functions.ExM.LetBDSL2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LetBDSL2
  name: LetBDSL2
  nameWithType: ExM.LetBDSL2
  fullName: Danmokou.DMath.Functions.ExM.LetBDSL2
- uid: System.ValueTuple{System.String,UncompiledCode{{V}}}[]
  isExternal: true
  name: (T1, T2)<String, UncompiledCode<V>>[]
  nameWithType: (T1, T2)<String, UncompiledCode<V>>[]
  fullName: System.ValueTuple<System.String, UncompiledCode<V>>[]
  nameWithType.vb: (T1, T2)(Of String, UncompiledCode(Of V))()
  fullName.vb: System.ValueTuple(Of System.String, UncompiledCode(Of V))()
  name.vb: (T1, T2)(Of String, UncompiledCode(Of V))()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UncompiledCode`1
    name: UncompiledCode
    nameWithType: UncompiledCode
    fullName: UncompiledCode
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UncompiledCode`1
    name: UncompiledCode
    nameWithType: UncompiledCode
    fullName: UncompiledCode
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.Functions.ExM.LetFloats*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LetFloats
  name: LetFloats
  nameWithType: ExM.LetFloats
  fullName: Danmokou.DMath.Functions.ExM.LetFloats
- uid: System.ValueTuple{System.String,ExBPY}[]
  isExternal: true
  name: (T1, T2)<String, ExBPY>[]
  nameWithType: (T1, T2)<String, ExBPY>[]
  fullName: System.ValueTuple<System.String, ExBPY>[]
  nameWithType.vb: (T1, T2)(Of String, ExBPY)()
  fullName.vb: System.ValueTuple(Of System.String, ExBPY)()
  name.vb: (T1, T2)(Of String, ExBPY)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ExBPY
    name: ExBPY
    nameWithType: ExBPY
    fullName: ExBPY
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ExBPY
    name: ExBPY
    nameWithType: ExBPY
    fullName: ExBPY
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.Functions.ExM.LetV2s*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LetV2s
  name: LetV2s
  nameWithType: ExM.LetV2s
  fullName: Danmokou.DMath.Functions.ExM.LetV2s
- uid: System.ValueTuple{System.String,ExTP}[]
  isExternal: true
  name: (T1, T2)<String, ExTP>[]
  nameWithType: (T1, T2)<String, ExTP>[]
  fullName: System.ValueTuple<System.String, ExTP>[]
  nameWithType.vb: (T1, T2)(Of String, ExTP)()
  fullName.vb: System.ValueTuple(Of System.String, ExTP)()
  name.vb: (T1, T2)(Of String, ExTP)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ExTP
    name: ExTP
    nameWithType: ExTP
    fullName: ExTP
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ExTP
    name: ExTP
    nameWithType: ExTP
    fullName: ExTP
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.Functions.ExM.Let*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Let
  name: Let
  nameWithType: ExM.Let
  fullName: Danmokou.DMath.Functions.ExM.Let
- uid: ReflectEx.Alias[]
  isExternal: true
  name: ReflectEx.Alias[]
  nameWithType: ReflectEx.Alias[]
  fullName: ReflectEx.Alias[]
  nameWithType.vb: ReflectEx.Alias()
  fullName.vb: ReflectEx.Alias()
  name.vb: ReflectEx.Alias()
  spec.csharp:
  - uid: ReflectEx.Alias
    name: ReflectEx.Alias
    nameWithType: ReflectEx.Alias
    fullName: ReflectEx.Alias
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: ReflectEx.Alias
    name: ReflectEx.Alias
    nameWithType: ReflectEx.Alias
    fullName: ReflectEx.Alias
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.PIData
  commentId: T:Danmokou.DMath.PIData
  parent: Danmokou.DMath
  name: PIData
  nameWithType: PIData
  fullName: Danmokou.DMath.PIData
- uid: Danmokou.DMath.Functions.ExM.Set*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Set
  name: Set
  nameWithType: ExM.Set
  fullName: Danmokou.DMath.Functions.ExM.Set
- uid: Danmokou.DMath
  commentId: N:Danmokou.DMath
  name: Danmokou.DMath
  nameWithType: Danmokou.DMath
  fullName: Danmokou.DMath
- uid: Danmokou.DMath.Functions.ExM.V2X*
  commentId: Overload:Danmokou.DMath.Functions.ExM.V2X
  name: V2X
  nameWithType: ExM.V2X
  fullName: Danmokou.DMath.Functions.ExM.V2X
- uid: Danmokou.DMath.Functions.ExM.V2Y*
  commentId: Overload:Danmokou.DMath.Functions.ExM.V2Y
  name: V2Y
  nameWithType: ExM.V2Y
  fullName: Danmokou.DMath.Functions.ExM.V2Y
- uid: Danmokou.DMath.Functions.ExM.RV2NX*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RV2NX
  name: RV2NX
  nameWithType: ExM.RV2NX
  fullName: Danmokou.DMath.Functions.ExM.RV2NX
- uid: trv2
  isExternal: true
  name: trv2
  nameWithType: trv2
  fullName: trv2
- uid: Danmokou.DMath.Functions.ExM.RV2NY*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RV2NY
  name: RV2NY
  nameWithType: ExM.RV2NY
  fullName: Danmokou.DMath.Functions.ExM.RV2NY
- uid: Danmokou.DMath.Functions.ExM.RV2RX*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RV2RX
  name: RV2RX
  nameWithType: ExM.RV2RX
  fullName: Danmokou.DMath.Functions.ExM.RV2RX
- uid: Danmokou.DMath.Functions.ExM.RV2RY*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RV2RY
  name: RV2RY
  nameWithType: ExM.RV2RY
  fullName: Danmokou.DMath.Functions.ExM.RV2RY
- uid: Danmokou.DMath.Functions.ExM.RV2A*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RV2A
  name: RV2A
  nameWithType: ExM.RV2A
  fullName: Danmokou.DMath.Functions.ExM.RV2A
- uid: Danmokou.Core.Parametrization
  commentId: T:Danmokou.Core.Parametrization
  parent: Danmokou.Core
  name: Parametrization
  nameWithType: Parametrization
  fullName: Danmokou.Core.Parametrization
- uid: Danmokou.DMath.Functions.ExM.P1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.P1
  name: P1
  nameWithType: ExM.P1
  fullName: Danmokou.DMath.Functions.ExM.P1
- uid: Ex
  isExternal: true
  name: Ex
  nameWithType: Ex
  fullName: Ex
- uid: Danmokou.Core
  commentId: N:Danmokou.Core
  name: Danmokou.Core
  nameWithType: Danmokou.Core
  fullName: Danmokou.Core
- uid: Danmokou.DMath.Functions.ExM.P1M*
  commentId: Overload:Danmokou.DMath.Functions.ExM.P1M
  name: P1M
  nameWithType: ExM.P1M
  fullName: Danmokou.DMath.Functions.ExM.P1M
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Danmokou.DMath.Functions.ExM.exP1M*
  commentId: Overload:Danmokou.DMath.Functions.ExM.exP1M
  name: exP1M
  nameWithType: ExM.exP1M
  fullName: Danmokou.DMath.Functions.ExM.exP1M
- uid: Danmokou.DMath.Functions.ExM.P2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.P2
  name: P2
  nameWithType: ExM.P2
  fullName: Danmokou.DMath.Functions.ExM.P2
- uid: Danmokou.DMath.Functions.ExM.P2M*
  commentId: Overload:Danmokou.DMath.Functions.ExM.P2M
  name: P2M
  nameWithType: ExM.P2M
  fullName: Danmokou.DMath.Functions.ExM.P2M
- uid: Danmokou.DMath.Functions.ExM.exP2M*
  commentId: Overload:Danmokou.DMath.Functions.ExM.exP2M
  name: exP2M
  nameWithType: ExM.exP2M
  fullName: Danmokou.DMath.Functions.ExM.exP2M
- uid: Danmokou.DMath.Functions.ExM.PM*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PM
  name: PM
  nameWithType: ExM.PM
  fullName: Danmokou.DMath.Functions.ExM.PM
- uid: Danmokou.DMath.Functions.ExM.exPM*
  commentId: Overload:Danmokou.DMath.Functions.ExM.exPM
  name: exPM
  nameWithType: ExM.exPM
  fullName: Danmokou.DMath.Functions.ExM.exPM
- uid: Danmokou.DMath.Functions.ExM.__Combine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.__Combine
  name: __Combine
  nameWithType: ExM.__Combine
  fullName: Danmokou.DMath.Functions.ExM.__Combine
- uid: Danmokou.DMath.Functions.ExM.Rand*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Rand
  name: Rand
  nameWithType: ExM.Rand
  fullName: Danmokou.DMath.Functions.ExM.Rand
- uid: Danmokou.DMath.Functions.ExM.Randpm1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Randpm1
  name: Randpm1
  nameWithType: ExM.Randpm1
  fullName: Danmokou.DMath.Functions.ExM.Randpm1
- uid: Danmokou.DMath.Functions.ExM.SRand*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SRand
  name: SRand
  nameWithType: ExM.SRand
  fullName: Danmokou.DMath.Functions.ExM.SRand
- uid: Danmokou.DMath.Functions.ExM.SRand01*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SRand01
  name: SRand01
  nameWithType: ExM.SRand01
  fullName: Danmokou.DMath.Functions.ExM.SRand01
- uid: Danmokou.DMath.Functions.ExM.SRandpm1*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SRandpm1
  name: SRandpm1
  nameWithType: ExM.SRandpm1
  fullName: Danmokou.DMath.Functions.ExM.SRandpm1
- uid: Danmokou.DMath.Functions.ExM.Superpose*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Superpose
  name: Superpose
  nameWithType: ExM.Superpose
  fullName: Danmokou.DMath.Functions.ExM.Superpose
- uid: TEx{{T}}
  commentId: '!:TEx{``0}'
  definition: TEx`1
  name: TEx<T>
  nameWithType: TEx<T>
  fullName: TEx<T>
  nameWithType.vb: TEx(Of T)
  fullName.vb: TEx(Of T)
  name.vb: TEx(Of T)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.SuperposeC*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SuperposeC
  name: SuperposeC
  nameWithType: ExM.SuperposeC
  fullName: Danmokou.DMath.Functions.ExM.SuperposeC
- uid: Danmokou.DMath.Functions.ExM.Opacity*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Opacity
  name: Opacity
  nameWithType: ExM.Opacity
  fullName: Danmokou.DMath.Functions.ExM.Opacity
- uid: Danmokou.DMath.Functions.ExM.Softmax*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Softmax
  name: Softmax
  nameWithType: ExM.Softmax
  fullName: Danmokou.DMath.Functions.ExM.Softmax
- uid: ExBPY
  isExternal: true
  name: ExBPY
  nameWithType: ExBPY
  fullName: ExBPY
- uid: UncompiledCode{System.Single}[]
  isExternal: true
  name: UncompiledCode<Single>[]
  nameWithType: UncompiledCode<Single>[]
  fullName: UncompiledCode<System.Single>[]
  nameWithType.vb: UncompiledCode(Of Single)()
  fullName.vb: UncompiledCode(Of System.Single)()
  name.vb: UncompiledCode(Of Single)()
  spec.csharp:
  - uid: UncompiledCode`1
    name: UncompiledCode
    nameWithType: UncompiledCode
    fullName: UncompiledCode
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: UncompiledCode`1
    name: UncompiledCode
    nameWithType: UncompiledCode
    fullName: UncompiledCode
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Danmokou.DMath.Functions.ExM.Logsum*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Logsum
  name: Logsum
  nameWithType: ExM.Logsum
  fullName: Danmokou.DMath.Functions.ExM.Logsum
- uid: Danmokou.DMath.Functions.ExM.SWing*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SWing
  name: SWing
  nameWithType: ExM.SWing
  fullName: Danmokou.DMath.Functions.ExM.SWing
- uid: Danmokou.DMath.Functions.ExM.SWing2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SWing2
  name: SWing2
  nameWithType: ExM.SWing2
  fullName: Danmokou.DMath.Functions.ExM.SWing2
- uid: Danmokou.DMath.Functions.ExM._constNamedTimer*
  commentId: Overload:Danmokou.DMath.Functions.ExM._constNamedTimer
  name: _constNamedTimer
  nameWithType: ExM._constNamedTimer
  fullName: Danmokou.DMath.Functions.ExM._constNamedTimer
- uid: System.Func{TExArgCtx,TEx{ETime.Timer}}
  commentId: T:System.Func{TExArgCtx,TEx{ETime.Timer}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<ETime.Timer>>
  nameWithType: Func<TExArgCtx, TEx<ETime.Timer>>
  fullName: System.Func<TExArgCtx, TEx<ETime.Timer>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of ETime.Timer))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of ETime.Timer))
  name.vb: Func(Of TExArgCtx, TEx(Of ETime.Timer))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ETime.Timer
    name: ETime.Timer
    nameWithType: ETime.Timer
    fullName: ETime.Timer
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ETime.Timer
    name: ETime.Timer
    nameWithType: ETime.Timer
    fullName: ETime.Timer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.Timer*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Timer
  name: Timer
  nameWithType: ExM.Timer
  fullName: Danmokou.DMath.Functions.ExM.Timer
- uid: TEx{ETime.Timer}
  commentId: '!:TEx{ETime.Timer}'
  definition: TEx`1
  name: TEx<ETime.Timer>
  nameWithType: TEx<ETime.Timer>
  fullName: TEx<ETime.Timer>
  nameWithType.vb: TEx(Of ETime.Timer)
  fullName.vb: TEx(Of ETime.Timer)
  name.vb: TEx(Of ETime.Timer)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ETime.Timer
    name: ETime.Timer
    nameWithType: ETime.Timer
    fullName: ETime.Timer
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ETime.Timer
    name: ETime.Timer
    nameWithType: ETime.Timer
    fullName: ETime.Timer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.TimerSec*
  commentId: Overload:Danmokou.DMath.Functions.ExM.TimerSec
  name: TimerSec
  nameWithType: ExM.TimerSec
  fullName: Danmokou.DMath.Functions.ExM.TimerSec
- uid: Danmokou.DMath.Functions.ExM.Height*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Height
  name: Height
  nameWithType: ExM.Height
  fullName: Danmokou.DMath.Functions.ExM.Height
- uid: Danmokou.DMath.Functions.ExM.RegPolyR*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RegPolyR
  name: RegPolyR
  nameWithType: ExM.RegPolyR
  fullName: Danmokou.DMath.Functions.ExM.RegPolyR
- uid: Danmokou.DMath.Functions.ExM.RegPoly*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RegPoly
  name: RegPoly
  nameWithType: ExM.RegPoly
  fullName: Danmokou.DMath.Functions.ExM.RegPoly
- uid: Danmokou.DMath.Functions.ExM.Reg2StarR*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Reg2StarR
  name: Reg2StarR
  nameWithType: ExM.Reg2StarR
  fullName: Danmokou.DMath.Functions.ExM.Reg2StarR
- uid: Danmokou.DMath.Functions.ExM.Reg2Star*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Reg2Star
  name: Reg2Star
  nameWithType: ExM.Reg2Star
  fullName: Danmokou.DMath.Functions.ExM.Reg2Star
- uid: Danmokou.DMath.Functions.ExM.RegSoftStarR*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RegSoftStarR
  name: RegSoftStarR
  nameWithType: ExM.RegSoftStarR
  fullName: Danmokou.DMath.Functions.ExM.RegSoftStarR
- uid: Danmokou.DMath.Functions.ExM.RegSoftStar*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RegSoftStar
  name: RegSoftStar
  nameWithType: ExM.RegSoftStar
  fullName: Danmokou.DMath.Functions.ExM.RegSoftStar
- uid: Danmokou.DMath.Functions.ExM.BounceX*
  commentId: Overload:Danmokou.DMath.Functions.ExM.BounceX
  name: BounceX
  nameWithType: ExM.BounceX
  fullName: Danmokou.DMath.Functions.ExM.BounceX
- uid: Danmokou.DMath.Functions.ExM.BounceY*
  commentId: Overload:Danmokou.DMath.Functions.ExM.BounceY
  name: BounceY
  nameWithType: ExM.BounceY
  fullName: Danmokou.DMath.Functions.ExM.BounceY
- uid: Danmokou.DMath.Functions.ExM.FrameNumber*
  commentId: Overload:Danmokou.DMath.Functions.ExM.FrameNumber
  name: FrameNumber
  nameWithType: ExM.FrameNumber
  fullName: Danmokou.DMath.Functions.ExM.FrameNumber
- uid: TEx{System.Int32}
  commentId: '!:TEx{System.Int32}'
  definition: TEx`1
  name: TEx<Int32>
  nameWithType: TEx<Int32>
  fullName: TEx<System.Int32>
  nameWithType.vb: TEx(Of Int32)
  fullName.vb: TEx(Of System.Int32)
  name.vb: TEx(Of Int32)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.HPRatio*
  commentId: Overload:Danmokou.DMath.Functions.ExM.HPRatio
  name: HPRatio
  nameWithType: ExM.HPRatio
  fullName: Danmokou.DMath.Functions.ExM.HPRatio
- uid: Danmokou.DMath.Functions.ExM.PhotosTaken*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PhotosTaken
  name: PhotosTaken
  nameWithType: ExM.PhotosTaken
  fullName: Danmokou.DMath.Functions.ExM.PhotosTaken
- uid: Danmokou.DMath.Functions.ExM.Is1CC*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Is1CC
  name: Is1CC
  nameWithType: ExM.Is1CC
  fullName: Danmokou.DMath.Functions.ExM.Is1CC
- uid: tbool
  isExternal: true
  name: tbool
  nameWithType: tbool
  fullName: tbool
- uid: Danmokou.DMath.Functions.ExM.inst*
  commentId: Overload:Danmokou.DMath.Functions.ExM.inst
  name: inst
  nameWithType: ExM.inst
  fullName: Danmokou.DMath.Functions.ExM.inst
- uid: Danmokou.DMath.Functions.ExM.Instance*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Instance
  name: Instance
  nameWithType: ExM.Instance
  fullName: Danmokou.DMath.Functions.ExM.Instance
- uid: TEx{InstanceData}
  commentId: '!:TEx{InstanceData}'
  definition: TEx`1
  name: TEx<InstanceData>
  nameWithType: TEx<InstanceData>
  fullName: TEx<InstanceData>
  nameWithType.vb: TEx(Of InstanceData)
  fullName.vb: TEx(Of InstanceData)
  name.vb: TEx(Of InstanceData)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InstanceData
    name: InstanceData
    nameWithType: InstanceData
    fullName: InstanceData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InstanceData
    name: InstanceData
    nameWithType: InstanceData
    fullName: InstanceData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.CFeature*
  commentId: Overload:Danmokou.DMath.Functions.ExM.CFeature
  name: CFeature
  nameWithType: ExM.CFeature
  fullName: Danmokou.DMath.Functions.ExM.CFeature
- uid: Danmokou.DMath.Functions.ExM.PlayerFreeT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerFreeT
  name: PlayerFreeT
  nameWithType: ExM.PlayerFreeT
  fullName: Danmokou.DMath.Functions.ExM.PlayerFreeT
- uid: System.Func{TExArgCtx,TEx{PlayerController}}
  commentId: T:System.Func{TExArgCtx,TEx{PlayerController}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<PlayerController>>
  nameWithType: Func<TExArgCtx, TEx<PlayerController>>
  fullName: System.Func<TExArgCtx, TEx<PlayerController>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of PlayerController))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of PlayerController))
  name.vb: Func(Of TExArgCtx, TEx(Of PlayerController))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PlayerController
    name: PlayerController
    nameWithType: PlayerController
    fullName: PlayerController
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PlayerController
    name: PlayerController
    nameWithType: PlayerController
    fullName: PlayerController
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.PlayerFocusT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerFocusT
  name: PlayerFocusT
  nameWithType: ExM.PlayerFocusT
  fullName: Danmokou.DMath.Functions.ExM.PlayerFocusT
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerFiringT
  name: PlayerFiringT
  nameWithType: ExM.PlayerFiringT
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringT
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerFiringFreeT
  name: PlayerFiringFreeT
  nameWithType: ExM.PlayerFiringFreeT
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringFreeT
- uid: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerFiringFocusT
  name: PlayerFiringFocusT
  nameWithType: ExM.PlayerFiringFocusT
  fullName: Danmokou.DMath.Functions.ExM.PlayerFiringFocusT
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerUnFiringT
  name: PlayerUnFiringT
  nameWithType: ExM.PlayerUnFiringT
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringT
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT
  name: PlayerUnFiringFreeT
  nameWithType: ExM.PlayerUnFiringFreeT
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringFreeT
- uid: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT
  name: PlayerUnFiringFocusT
  nameWithType: ExM.PlayerUnFiringFocusT
  fullName: Danmokou.DMath.Functions.ExM.PlayerUnFiringFocusT
- uid: Danmokou.DMath.Functions.ExM.PlayerID*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerID
  name: PlayerID
  nameWithType: ExM.PlayerID
  fullName: Danmokou.DMath.Functions.ExM.PlayerID
- uid: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus
  name: PlayerLerpFreeToFocus
  nameWithType: ExM.PlayerLerpFreeToFocus
  fullName: Danmokou.DMath.Functions.ExM.PlayerLerpFreeToFocus
- uid: Danmokou.DMath.Functions.ExM.PlayerPastPos*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerPastPos
  name: PlayerPastPos
  nameWithType: ExM.PlayerPastPos
  fullName: Danmokou.DMath.Functions.ExM.PlayerPastPos
- uid: ExTP
  isExternal: true
  name: ExTP
  nameWithType: ExTP
  fullName: ExTP
- uid: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerMarisaAPos
  name: PlayerMarisaAPos
  nameWithType: ExM.PlayerMarisaAPos
  fullName: Danmokou.DMath.Functions.ExM.PlayerMarisaAPos
- uid: Danmokou.DMath.Functions.ExM.PlayerPastDir*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerPastDir
  name: PlayerPastDir
  nameWithType: ExM.PlayerPastDir
  fullName: Danmokou.DMath.Functions.ExM.PlayerPastDir
- uid: Danmokou.DMath.Functions.ExM.PlayerMarisaADir*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PlayerMarisaADir
  name: PlayerMarisaADir
  nameWithType: ExM.PlayerMarisaADir
  fullName: Danmokou.DMath.Functions.ExM.PlayerMarisaADir
- uid: Danmokou.DMath.Functions.ExM.Colliding*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Colliding
  name: Colliding
  nameWithType: ExM.Colliding
  fullName: Danmokou.DMath.Functions.ExM.Colliding
- uid: System.Func{TExArgCtx,TEx{Bullet}}
  commentId: T:System.Func{TExArgCtx,TEx{Bullet}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<Bullet>>
  nameWithType: Func<TExArgCtx, TEx<Bullet>>
  fullName: System.Func<TExArgCtx, TEx<Bullet>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of Bullet))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of Bullet))
  name.vb: Func(Of TExArgCtx, TEx(Of Bullet))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Bullet
    name: Bullet
    nameWithType: Bullet
    fullName: Bullet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Bullet
    name: Bullet
    nameWithType: Bullet
    fullName: Bullet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ExPred
  isExternal: true
  name: ExPred
  nameWithType: ExPred
  fullName: ExPred
- uid: Danmokou.DMath.Functions.ExM.CollidingT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.CollidingT
  name: CollidingT
  nameWithType: ExM.CollidingT
  fullName: Danmokou.DMath.Functions.ExM.CollidingT
- uid: Danmokou.DMath.Functions.ExM.UnCollidingT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.UnCollidingT
  name: UnCollidingT
  nameWithType: ExM.UnCollidingT
  fullName: Danmokou.DMath.Functions.ExM.UnCollidingT
- uid: Danmokou.DMath.Functions.ExM.LaserLastActiveT*
  commentId: Overload:Danmokou.DMath.Functions.ExM.LaserLastActiveT
  name: LaserLastActiveT
  nameWithType: ExM.LaserLastActiveT
  fullName: Danmokou.DMath.Functions.ExM.LaserLastActiveT
- uid: System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}}
  commentId: T:System.Func{TExArgCtx,TEx{CurvedTileRenderLaser}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<CurvedTileRenderLaser>>
  nameWithType: Func<TExArgCtx, TEx<CurvedTileRenderLaser>>
  fullName: System.Func<TExArgCtx, TEx<CurvedTileRenderLaser>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser))
  name.vb: Func(Of TExArgCtx, TEx(Of CurvedTileRenderLaser))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CurvedTileRenderLaser
    name: CurvedTileRenderLaser
    nameWithType: CurvedTileRenderLaser
    fullName: CurvedTileRenderLaser
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CurvedTileRenderLaser
    name: CurvedTileRenderLaser
    nameWithType: CurvedTileRenderLaser
    fullName: CurvedTileRenderLaser
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.OptionLocation*
  commentId: Overload:Danmokou.DMath.Functions.ExM.OptionLocation
  name: OptionLocation
  nameWithType: ExM.OptionLocation
  fullName: Danmokou.DMath.Functions.ExM.OptionLocation
- uid: System.Func{TExArgCtx,TEx{FireOption}}
  commentId: T:System.Func{TExArgCtx,TEx{FireOption}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<FireOption>>
  nameWithType: Func<TExArgCtx, TEx<FireOption>>
  fullName: System.Func<TExArgCtx, TEx<FireOption>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of FireOption))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of FireOption))
  name.vb: Func(Of TExArgCtx, TEx(Of FireOption))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FireOption
    name: FireOption
    nameWithType: FireOption
    fullName: FireOption
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FireOption
    name: FireOption
    nameWithType: FireOption
    fullName: FireOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.OptionAngle*
  commentId: Overload:Danmokou.DMath.Functions.ExM.OptionAngle
  name: OptionAngle
  nameWithType: ExM.OptionAngle
  fullName: Danmokou.DMath.Functions.ExM.OptionAngle
- uid: Danmokou.DMath.Functions.ExM.Power*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Power
  name: Power
  nameWithType: ExM.Power
  fullName: Danmokou.DMath.Functions.ExM.Power
- uid: Danmokou.DMath.Functions.ExM.PowerF*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PowerF
  name: PowerF
  nameWithType: ExM.PowerF
  fullName: Danmokou.DMath.Functions.ExM.PowerF
- uid: Danmokou.DMath.Functions.ExM.PowerIndex*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PowerIndex
  name: PowerIndex
  nameWithType: ExM.PowerIndex
  fullName: Danmokou.DMath.Functions.ExM.PowerIndex
- uid: Danmokou.DMath.Functions.ExM.IfPowerGTP*
  commentId: Overload:Danmokou.DMath.Functions.ExM.IfPowerGTP
  name: IfPowerGTP
  nameWithType: ExM.IfPowerGTP
  fullName: Danmokou.DMath.Functions.ExM.IfPowerGTP
- uid: Danmokou.DMath.Functions.ExM.Mine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Mine
  name: Mine
  nameWithType: ExM.Mine
  fullName: Danmokou.DMath.Functions.ExM.Mine
- uid: Danmokou.DMath.Functions.ExM.FromID*
  commentId: Overload:Danmokou.DMath.Functions.ExM.FromID
  name: FromID
  nameWithType: ExM.FromID
  fullName: Danmokou.DMath.Functions.ExM.FromID
- uid: System.Func{TExArgCtx,TEx{BehaviorEntity}}
  commentId: T:System.Func{TExArgCtx,TEx{BehaviorEntity}}
  parent: System
  definition: System.Func`2
  name: Func<TExArgCtx, TEx<BehaviorEntity>>
  nameWithType: Func<TExArgCtx, TEx<BehaviorEntity>>
  fullName: System.Func<TExArgCtx, TEx<BehaviorEntity>>
  nameWithType.vb: Func(Of TExArgCtx, TEx(Of BehaviorEntity))
  fullName.vb: System.Func(Of TExArgCtx, TEx(Of BehaviorEntity))
  name.vb: Func(Of TExArgCtx, TEx(Of BehaviorEntity))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TExArgCtx
    name: TExArgCtx
    nameWithType: TExArgCtx
    fullName: TExArgCtx
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BehaviorEntity
    name: BehaviorEntity
    nameWithType: BehaviorEntity
    fullName: BehaviorEntity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.HPi*
  commentId: Overload:Danmokou.DMath.Functions.ExM.HPi
  name: HPi
  nameWithType: ExM.HPi
  fullName: Danmokou.DMath.Functions.ExM.HPi
- uid: Danmokou.DMath.Functions.ExM.Pi*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Pi
  name: Pi
  nameWithType: ExM.Pi
  fullName: Danmokou.DMath.Functions.ExM.Pi
- uid: Danmokou.DMath.Functions.ExM.Tau*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Tau
  name: Tau
  nameWithType: ExM.Tau
  fullName: Danmokou.DMath.Functions.ExM.Tau
- uid: Danmokou.DMath.Functions.ExM.Twau*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Twau
  name: Twau
  nameWithType: ExM.Twau
  fullName: Danmokou.DMath.Functions.ExM.Twau
- uid: Danmokou.DMath.Functions.ExM.Add*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Add
  name: Add
  nameWithType: ExM.Add
  fullName: Danmokou.DMath.Functions.ExM.Add
- uid: Danmokou.DMath.Functions.ExM.AddNV*
  commentId: Overload:Danmokou.DMath.Functions.ExM.AddNV
  name: AddNV
  nameWithType: ExM.AddNV
  fullName: Danmokou.DMath.Functions.ExM.AddNV
- uid: Danmokou.DMath.Functions.ExM.AddA*
  commentId: Overload:Danmokou.DMath.Functions.ExM.AddA
  name: AddA
  nameWithType: ExM.AddA
  fullName: Danmokou.DMath.Functions.ExM.AddA
- uid: Danmokou.DMath.Functions.ExM.AddNVA*
  commentId: Overload:Danmokou.DMath.Functions.ExM.AddNVA
  name: AddNVA
  nameWithType: ExM.AddNVA
  fullName: Danmokou.DMath.Functions.ExM.AddNVA
- uid: Danmokou.DMath.Functions.ExM.AddRVA*
  commentId: Overload:Danmokou.DMath.Functions.ExM.AddRVA
  name: AddRVA
  nameWithType: ExM.AddRVA
  fullName: Danmokou.DMath.Functions.ExM.AddRVA
- uid: tv3
  isExternal: true
  name: tv3
  nameWithType: tv3
  fullName: tv3
- uid: Danmokou.DMath.Functions.ExM.AddRV*
  commentId: Overload:Danmokou.DMath.Functions.ExM.AddRV
  name: AddRV
  nameWithType: ExM.AddRV
  fullName: Danmokou.DMath.Functions.ExM.AddRV
- uid: Danmokou.DMath.Functions.ExM.Sub*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sub
  name: Sub
  nameWithType: ExM.Sub
  fullName: Danmokou.DMath.Functions.ExM.Sub
- uid: Danmokou.DMath.Functions.ExM.Mul*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Mul
  name: Mul
  nameWithType: ExM.Mul
  fullName: Danmokou.DMath.Functions.ExM.Mul
- uid: Danmokou.DMath.Functions.ExM.MulRev*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MulRev
  name: MulRev
  nameWithType: ExM.MulRev
  fullName: Danmokou.DMath.Functions.ExM.MulRev
- uid: Danmokou.DMath.Functions.ExM.MulInt*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MulInt
  name: MulInt
  nameWithType: ExM.MulInt
  fullName: Danmokou.DMath.Functions.ExM.MulInt
- uid: Danmokou.DMath.Functions.ExM.DegRad*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DegRad
  name: DegRad
  nameWithType: ExM.DegRad
  fullName: Danmokou.DMath.Functions.ExM.DegRad
- uid: Danmokou.DMath.Functions.ExM.RadDeg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadDeg
  name: RadDeg
  nameWithType: ExM.RadDeg
  fullName: Danmokou.DMath.Functions.ExM.RadDeg
- uid: Danmokou.DMath.Functions.ExM.Div*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Div
  name: Div
  nameWithType: ExM.Div
  fullName: Danmokou.DMath.Functions.ExM.Div
- uid: Danmokou.DMath.Functions.ExM.DivInv*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DivInv
  name: DivInv
  nameWithType: ExM.DivInv
  fullName: Danmokou.DMath.Functions.ExM.DivInv
- uid: Danmokou.DMath.Functions.ExM.FDiv*
  commentId: Overload:Danmokou.DMath.Functions.ExM.FDiv
  name: FDiv
  nameWithType: ExM.FDiv
  fullName: Danmokou.DMath.Functions.ExM.FDiv
- uid: Danmokou.DMath.Functions.ExM.Complement*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Complement
  name: Complement
  nameWithType: ExM.Complement
  fullName: Danmokou.DMath.Functions.ExM.Complement
- uid: Danmokou.DMath.Functions.ExM.MulComplement*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MulComplement
  name: MulComplement
  nameWithType: ExM.MulComplement
  fullName: Danmokou.DMath.Functions.ExM.MulComplement
- uid: Danmokou.DMath.Functions.ExM.SubMax0*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SubMax0
  name: SubMax0
  nameWithType: ExM.SubMax0
  fullName: Danmokou.DMath.Functions.ExM.SubMax0
- uid: Danmokou.DMath.Functions.ExM.Increment*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Increment
  name: Increment
  nameWithType: ExM.Increment
  fullName: Danmokou.DMath.Functions.ExM.Increment
- uid: Danmokou.DMath.Functions.ExM.Decrement*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Decrement
  name: Decrement
  nameWithType: ExM.Decrement
  fullName: Danmokou.DMath.Functions.ExM.Decrement
- uid: Danmokou.DMath.Functions.ExM.DecrementSubtract*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DecrementSubtract
  name: DecrementSubtract
  nameWithType: ExM.DecrementSubtract
  fullName: Danmokou.DMath.Functions.ExM.DecrementSubtract
- uid: Danmokou.DMath.Functions.ExM.Neg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Neg
  name: Neg
  nameWithType: ExM.Neg
  fullName: Danmokou.DMath.Functions.ExM.Neg
- uid: Danmokou.DMath.Functions.ExM.Negate*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Negate
  name: Negate
  nameWithType: ExM.Negate
  fullName: Danmokou.DMath.Functions.ExM.Negate
- uid: Danmokou.DMath.Functions.ExM.Sign*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sign
  name: Sign
  nameWithType: ExM.Sign
  fullName: Danmokou.DMath.Functions.ExM.Sign
- uid: Danmokou.DMath.Functions.ExM.Exp*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Exp
  name: Exp
  nameWithType: ExM.Exp
  fullName: Danmokou.DMath.Functions.ExM.Exp
- uid: Danmokou.DMath.Functions.ExM.Ln*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Ln
  name: Ln
  nameWithType: ExM.Ln
  fullName: Danmokou.DMath.Functions.ExM.Ln
- uid: Danmokou.DMath.Functions.ExM.Sqrt*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sqrt
  name: Sqrt
  nameWithType: ExM.Sqrt
  fullName: Danmokou.DMath.Functions.ExM.Sqrt
- uid: Danmokou.DMath.Functions.ExM.Sqr*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sqr
  name: Sqr
  nameWithType: ExM.Sqr
  fullName: Danmokou.DMath.Functions.ExM.Sqr
- uid: Danmokou.DMath.Functions.ExM.Mag2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Mag2
  name: Mag2
  nameWithType: ExM.Mag2
  fullName: Danmokou.DMath.Functions.ExM.Mag2
- uid: Danmokou.DMath.Functions.ExM.SqrMag2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SqrMag2
  name: SqrMag2
  nameWithType: ExM.SqrMag2
  fullName: Danmokou.DMath.Functions.ExM.SqrMag2
- uid: Danmokou.DMath.Functions.ExM.SqrMag3*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SqrMag3
  name: SqrMag3
  nameWithType: ExM.SqrMag3
  fullName: Danmokou.DMath.Functions.ExM.SqrMag3
- uid: Danmokou.DMath.Functions.ExM.Mag*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Mag
  name: Mag
  nameWithType: ExM.Mag
  fullName: Danmokou.DMath.Functions.ExM.Mag
- uid: Danmokou.DMath.Functions.ExM.v3Mag*
  commentId: Overload:Danmokou.DMath.Functions.ExM.v3Mag
  name: v3Mag
  nameWithType: ExM.v3Mag
  fullName: Danmokou.DMath.Functions.ExM.v3Mag
- uid: Danmokou.DMath.Functions.ExM.Norm*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Norm
  name: Norm
  nameWithType: ExM.Norm
  fullName: Danmokou.DMath.Functions.ExM.Norm
- uid: Danmokou.DMath.Functions.ExM.Norm3*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Norm3
  name: Norm3
  nameWithType: ExM.Norm3
  fullName: Danmokou.DMath.Functions.ExM.Norm3
- uid: Danmokou.DMath.Functions.ExM.SqrMag*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SqrMag
  name: SqrMag
  nameWithType: ExM.SqrMag
  fullName: Danmokou.DMath.Functions.ExM.SqrMag
- uid: Danmokou.DMath.Functions.ExM.v3SqrMag*
  commentId: Overload:Danmokou.DMath.Functions.ExM.v3SqrMag
  name: v3SqrMag
  nameWithType: ExM.v3SqrMag
  fullName: Danmokou.DMath.Functions.ExM.v3SqrMag
- uid: Danmokou.DMath.Functions.ExM.Pow*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Pow
  name: Pow
  nameWithType: ExM.Pow
  fullName: Danmokou.DMath.Functions.ExM.Pow
- uid: Danmokou.DMath.Functions.ExM.PowSub*
  commentId: Overload:Danmokou.DMath.Functions.ExM.PowSub
  name: PowSub
  nameWithType: ExM.PowSub
  fullName: Danmokou.DMath.Functions.ExM.PowSub
- uid: Danmokou.DMath.Functions.ExM.NPow*
  commentId: Overload:Danmokou.DMath.Functions.ExM.NPow
  name: NPow
  nameWithType: ExM.NPow
  fullName: Danmokou.DMath.Functions.ExM.NPow
- uid: Danmokou.DMath.Functions.ExM.Round*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Round
  name: Round
  nameWithType: ExM.Round
  fullName: Danmokou.DMath.Functions.ExM.Round
- uid: Danmokou.DMath.Functions.ExM.BlockRound*
  commentId: Overload:Danmokou.DMath.Functions.ExM.BlockRound
  name: BlockRound
  nameWithType: ExM.BlockRound
  fullName: Danmokou.DMath.Functions.ExM.BlockRound
- uid: Danmokou.DMath.Functions.ExM.Floor*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Floor
  name: Floor
  nameWithType: ExM.Floor
  fullName: Danmokou.DMath.Functions.ExM.Floor
- uid: Danmokou.DMath.Functions.ExM.BlockFloor*
  commentId: Overload:Danmokou.DMath.Functions.ExM.BlockFloor
  name: BlockFloor
  nameWithType: ExM.BlockFloor
  fullName: Danmokou.DMath.Functions.ExM.BlockFloor
- uid: Danmokou.DMath.Functions.ExM.dFloor*
  commentId: Overload:Danmokou.DMath.Functions.ExM.dFloor
  name: dFloor
  nameWithType: ExM.dFloor
  fullName: Danmokou.DMath.Functions.ExM.dFloor
- uid: Danmokou.DMath.Functions.ExM.Ceil*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Ceil
  name: Ceil
  nameWithType: ExM.Ceil
  fullName: Danmokou.DMath.Functions.ExM.Ceil
- uid: Danmokou.DMath.Functions.ExM.Abs*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Abs
  name: Abs
  nameWithType: ExM.Abs
  fullName: Danmokou.DMath.Functions.ExM.Abs
- uid: Danmokou.DMath.Functions.ExM.Diff*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Diff
  name: Diff
  nameWithType: ExM.Diff
  fullName: Danmokou.DMath.Functions.ExM.Diff
- uid: Danmokou.DMath.Functions.ExM.Dist*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Dist
  name: Dist
  nameWithType: ExM.Dist
  fullName: Danmokou.DMath.Functions.ExM.Dist
- uid: Danmokou.DMath.Functions.ExM.SqrDist*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SqrDist
  name: SqrDist
  nameWithType: ExM.SqrDist
  fullName: Danmokou.DMath.Functions.ExM.SqrDist
- uid: Danmokou.DMath.Functions.ExM.Min*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Min
  name: Min
  nameWithType: ExM.Min
  fullName: Danmokou.DMath.Functions.ExM.Min
- uid: Danmokou.DMath.Functions.ExM.MinA*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MinA
  name: MinA
  nameWithType: ExM.MinA
  fullName: Danmokou.DMath.Functions.ExM.MinA
- uid: Danmokou.DMath.Functions.ExM.Max*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Max
  name: Max
  nameWithType: ExM.Max
  fullName: Danmokou.DMath.Functions.ExM.Max
- uid: Danmokou.DMath.Functions.ExM.MaxA*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MaxA
  name: MaxA
  nameWithType: ExM.MaxA
  fullName: Danmokou.DMath.Functions.ExM.MaxA
- uid: Danmokou.DMath.Functions.ExM.Limit*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Limit
  name: Limit
  nameWithType: ExM.Limit
  fullName: Danmokou.DMath.Functions.ExM.Limit
- uid: Danmokou.DMath.Functions.ExM.HighPass*
  commentId: Overload:Danmokou.DMath.Functions.ExM.HighPass
  name: HighPass
  nameWithType: ExM.HighPass
  fullName: Danmokou.DMath.Functions.ExM.HighPass
- uid: Danmokou.DMath.Functions.ExM.HighCut*
  commentId: Overload:Danmokou.DMath.Functions.ExM.HighCut
  name: HighCut
  nameWithType: ExM.HighCut
  fullName: Danmokou.DMath.Functions.ExM.HighCut
- uid: Danmokou.DMath.Functions.ExM.Clamp*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Clamp
  name: Clamp
  nameWithType: ExM.Clamp
  fullName: Danmokou.DMath.Functions.ExM.Clamp
- uid: Danmokou.DMath.Functions.ExM.Clamp01*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Clamp01
  name: Clamp01
  nameWithType: ExM.Clamp01
  fullName: Danmokou.DMath.Functions.ExM.Clamp01
- uid: Danmokou.DMath.Functions.ExM.Linear*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Linear
  name: Linear
  nameWithType: ExM.Linear
  fullName: Danmokou.DMath.Functions.ExM.Linear
- uid: Danmokou.DMath.Functions.ExM.RadIntoRange*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadIntoRange
  name: RadIntoRange
  nameWithType: ExM.RadIntoRange
  fullName: Danmokou.DMath.Functions.ExM.RadIntoRange
- uid: Danmokou.DMath.Functions.ExM.RadToNeg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadToNeg
  name: RadToNeg
  nameWithType: ExM.RadToNeg
  fullName: Danmokou.DMath.Functions.ExM.RadToNeg
- uid: Danmokou.DMath.Functions.ExM.RadToPos*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadToPos
  name: RadToPos
  nameWithType: ExM.RadToPos
  fullName: Danmokou.DMath.Functions.ExM.RadToPos
- uid: Danmokou.DMath.Functions.ExM.DegIntoRange*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DegIntoRange
  name: DegIntoRange
  nameWithType: ExM.DegIntoRange
  fullName: Danmokou.DMath.Functions.ExM.DegIntoRange
- uid: Danmokou.DMath.Functions.ExM.DegDiff*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DegDiff
  name: DegDiff
  nameWithType: ExM.DegDiff
  fullName: Danmokou.DMath.Functions.ExM.DegDiff
- uid: Danmokou.DMath.Functions.ExM.RadDiff*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadDiff
  name: RadDiff
  nameWithType: ExM.RadDiff
  fullName: Danmokou.DMath.Functions.ExM.RadDiff
- uid: Danmokou.DMath.Functions.ExM.RadDiffCCW*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadDiffCCW
  name: RadDiffCCW
  nameWithType: ExM.RadDiffCCW
  fullName: Danmokou.DMath.Functions.ExM.RadDiffCCW
- uid: Danmokou.DMath.Functions.ExM.RadDiffCW*
  commentId: Overload:Danmokou.DMath.Functions.ExM.RadDiffCW
  name: RadDiffCW
  nameWithType: ExM.RadDiffCW
  fullName: Danmokou.DMath.Functions.ExM.RadDiffCW
- uid: Danmokou.DMath.Functions.ExM.Sin*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sin
  name: Sin
  nameWithType: ExM.Sin
  fullName: Danmokou.DMath.Functions.ExM.Sin
- uid: Danmokou.DMath.Functions.ExM.Cos*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Cos
  name: Cos
  nameWithType: ExM.Cos
  fullName: Danmokou.DMath.Functions.ExM.Cos
- uid: Danmokou.DMath.Functions.ExM.CosSin*
  commentId: Overload:Danmokou.DMath.Functions.ExM.CosSin
  name: CosSin
  nameWithType: ExM.CosSin
  fullName: Danmokou.DMath.Functions.ExM.CosSin
- uid: Danmokou.DMath.Functions.ExM.SinDeg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.SinDeg
  name: SinDeg
  nameWithType: ExM.SinDeg
  fullName: Danmokou.DMath.Functions.ExM.SinDeg
- uid: Danmokou.DMath.Functions.ExM.CosDeg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.CosDeg
  name: CosDeg
  nameWithType: ExM.CosDeg
  fullName: Danmokou.DMath.Functions.ExM.CosDeg
- uid: Danmokou.DMath.Functions.ExM.CosSinDeg*
  commentId: Overload:Danmokou.DMath.Functions.ExM.CosSinDeg
  name: CosSinDeg
  nameWithType: ExM.CosSinDeg
  fullName: Danmokou.DMath.Functions.ExM.CosSinDeg
- uid: Danmokou.DMath.Functions.ExM.Sine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Sine
  name: Sine
  nameWithType: ExM.Sine
  fullName: Danmokou.DMath.Functions.ExM.Sine
- uid: Danmokou.DMath.Functions.ExM.DSine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DSine
  name: DSine
  nameWithType: ExM.DSine
  fullName: Danmokou.DMath.Functions.ExM.DSine
- uid: Danmokou.DMath.Functions.ExM.Cosine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Cosine
  name: Cosine
  nameWithType: ExM.Cosine
  fullName: Danmokou.DMath.Functions.ExM.Cosine
- uid: Danmokou.DMath.Functions.ExM.DCosine*
  commentId: Overload:Danmokou.DMath.Functions.ExM.DCosine
  name: DCosine
  nameWithType: ExM.DCosine
  fullName: Danmokou.DMath.Functions.ExM.DCosine
- uid: Danmokou.DMath.Functions.ExM.ACosR*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ACosR
  name: ACosR
  nameWithType: ExM.ACosR
  fullName: Danmokou.DMath.Functions.ExM.ACosR
- uid: Danmokou.DMath.Functions.ExM.ACos*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ACos
  name: ACos
  nameWithType: ExM.ACos
  fullName: Danmokou.DMath.Functions.ExM.ACos
- uid: Danmokou.DMath.Functions.ExM.Tan*
  commentId: Overload:Danmokou.DMath.Functions.ExM.Tan
  name: Tan
  nameWithType: ExM.Tan
  fullName: Danmokou.DMath.Functions.ExM.Tan
- uid: Danmokou.DMath.Functions.ExM.ATanR2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ATanR2
  name: ATanR2
  nameWithType: ExM.ATanR2
  fullName: Danmokou.DMath.Functions.ExM.ATanR2
- uid: Danmokou.DMath.Functions.ExM.ATanR*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ATanR
  name: ATanR
  nameWithType: ExM.ATanR
  fullName: Danmokou.DMath.Functions.ExM.ATanR
- uid: Danmokou.DMath.Functions.ExM.ATan2*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ATan2
  name: ATan2
  nameWithType: ExM.ATan2
  fullName: Danmokou.DMath.Functions.ExM.ATan2
- uid: Danmokou.DMath.Functions.ExM.ATan*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ATan
  name: ATan
  nameWithType: ExM.ATan
  fullName: Danmokou.DMath.Functions.ExM.ATan
- uid: Danmokou.DMath.Functions.ExM.ArrayIndex*
  commentId: Overload:Danmokou.DMath.Functions.ExM.ArrayIndex
  name: ArrayIndex
  nameWithType: ExM.ArrayIndex
  fullName: Danmokou.DMath.Functions.ExM.ArrayIndex
- uid: TEx{{T}[]}
  commentId: '!:TEx{``0[]}'
  definition: TEx`1
  name: TEx<T[]>
  nameWithType: TEx<T[]>
  fullName: TEx<T[]>
  nameWithType.vb: TEx(Of T())
  fullName.vb: TEx(Of T())
  name.vb: TEx(Of T())
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExM.MIndex*
  commentId: Overload:Danmokou.DMath.Functions.ExM.MIndex
  name: MIndex
  nameWithType: ExM.MIndex
  fullName: Danmokou.DMath.Functions.ExM.MIndex
