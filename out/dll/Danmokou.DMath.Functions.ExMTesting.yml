### YamlMime:ManagedReference
items:
- uid: Danmokou.DMath.Functions.ExMTesting
  commentId: T:Danmokou.DMath.Functions.ExMTesting
  id: ExMTesting
  parent: Danmokou.DMath.Functions
  children:
  - Danmokou.DMath.Functions.ExMTesting.AddTest``1(TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExMTesting.MulTest``1(TEx{``0},TEx{``0})
  - Danmokou.DMath.Functions.ExMTesting.TestLookup1``1(TEx{System.Func{``0,``0}},TEx{``0})
  - Danmokou.DMath.Functions.ExMTesting.TestLookup2``1(System.Func{TEx{``0},TEx{``0},TEx{``0}},TEx{``0},TEx{``0})
  langs:
  - csharp
  - vb
  name: ExMTesting
  nameWithType: ExMTesting
  fullName: Danmokou.DMath.Functions.ExMTesting
  type: Class
  source:
    id: ExMTesting
    path: ''
    startLine: 13292
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static class ExMTesting
    content.vb: Public Module ExMTesting
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Danmokou.DMath.Functions.ExMTesting.TestLookup2``1(System.Func{TEx{``0},TEx{``0},TEx{``0}},TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExMTesting.TestLookup2``1(System.Func{TEx{``0},TEx{``0},TEx{``0}},TEx{``0},TEx{``0})
  id: TestLookup2``1(System.Func{TEx{``0},TEx{``0},TEx{``0}},TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExMTesting
  langs:
  - csharp
  - vb
  name: TestLookup2<T>(Func<TEx<T>, TEx<T>, TEx<T>>, TEx<T>, TEx<T>)
  nameWithType: ExMTesting.TestLookup2<T>(Func<TEx<T>, TEx<T>, TEx<T>>, TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExMTesting.TestLookup2<T>(System.Func<TEx<T>, TEx<T>, TEx<T>>, TEx<T>, TEx<T>)
  type: Method
  source:
    id: TestLookup2
    path: ''
    startLine: 13294
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<T> TestLookup2<T>(Func<TEx<T>, TEx<T>, TEx<T>> generic, TEx<T> subject1, TEx<T> subject2)
    parameters:
    - id: generic
      type: System.Func{TEx{{T}},TEx{{T}},TEx{{T}}}
    - id: subject1
      type: TEx{{T}}
    - id: subject2
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function TestLookup2(Of T)(generic As Func(Of TEx(Of T), TEx(Of T), TEx(Of T)), subject1 As TEx(Of T), subject2 As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExMTesting.TestLookup2*
  nameWithType.vb: ExMTesting.TestLookup2(Of T)(Func(Of TEx(Of T), TEx(Of T), TEx(Of T)), TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExMTesting.TestLookup2(Of T)(System.Func(Of TEx(Of T), TEx(Of T), TEx(Of T)), TEx(Of T), TEx(Of T))
  name.vb: TestLookup2(Of T)(Func(Of TEx(Of T), TEx(Of T), TEx(Of T)), TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExMTesting.TestLookup1``1(TEx{System.Func{``0,``0}},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExMTesting.TestLookup1``1(TEx{System.Func{``0,``0}},TEx{``0})
  id: TestLookup1``1(TEx{System.Func{``0,``0}},TEx{``0})
  parent: Danmokou.DMath.Functions.ExMTesting
  langs:
  - csharp
  - vb
  name: TestLookup1<T>(TEx<Func<T, T>>, TEx<T>)
  nameWithType: ExMTesting.TestLookup1<T>(TEx<Func<T, T>>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExMTesting.TestLookup1<T>(TEx<System.Func<T, T>>, TEx<T>)
  type: Method
  source:
    id: TestLookup1
    path: ''
    startLine: 13296
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<T> TestLookup1<T>(TEx<Func<T, T>> generic, TEx<T> subject1)
    parameters:
    - id: generic
      type: TEx{System.Func{{T},{T}}}
    - id: subject1
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function TestLookup1(Of T)(generic As TEx(Of Func(Of T, T)), subject1 As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExMTesting.TestLookup1*
  nameWithType.vb: ExMTesting.TestLookup1(Of T)(TEx(Of Func(Of T, T)), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExMTesting.TestLookup1(Of T)(TEx(Of System.Func(Of T, T)), TEx(Of T))
  name.vb: TestLookup1(Of T)(TEx(Of Func(Of T, T)), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExMTesting.AddTest``1(TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExMTesting.AddTest``1(TEx{``0},TEx{``0})
  id: AddTest``1(TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExMTesting
  langs:
  - csharp
  - vb
  name: AddTest<T>(TEx<T>, TEx<T>)
  nameWithType: ExMTesting.AddTest<T>(TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExMTesting.AddTest<T>(TEx<T>, TEx<T>)
  type: Method
  source:
    id: AddTest
    path: ''
    startLine: 13298
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<T> AddTest<T>(TEx<T> x, TEx<T> y)
    parameters:
    - id: x
      type: TEx{{T}}
    - id: y
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function AddTest(Of T)(x As TEx(Of T), y As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExMTesting.AddTest*
  nameWithType.vb: ExMTesting.AddTest(Of T)(TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExMTesting.AddTest(Of T)(TEx(Of T), TEx(Of T))
  name.vb: AddTest(Of T)(TEx(Of T), TEx(Of T))
- uid: Danmokou.DMath.Functions.ExMTesting.MulTest``1(TEx{``0},TEx{``0})
  commentId: M:Danmokou.DMath.Functions.ExMTesting.MulTest``1(TEx{``0},TEx{``0})
  id: MulTest``1(TEx{``0},TEx{``0})
  parent: Danmokou.DMath.Functions.ExMTesting
  langs:
  - csharp
  - vb
  name: MulTest<T>(TEx<T>, TEx<T>)
  nameWithType: ExMTesting.MulTest<T>(TEx<T>, TEx<T>)
  fullName: Danmokou.DMath.Functions.ExMTesting.MulTest<T>(TEx<T>, TEx<T>)
  type: Method
  source:
    id: MulTest
    path: ''
    startLine: 13299
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.DMath.Functions
  syntax:
    content: public static TEx<T> MulTest<T>(TEx<T> x, TEx<T> y)
    parameters:
    - id: x
      type: TEx{{T}}
    - id: y
      type: TEx{{T}}
    typeParameters:
    - id: T
    return:
      type: TEx{{T}}
    content.vb: Public Shared Function MulTest(Of T)(x As TEx(Of T), y As TEx(Of T)) As TEx(Of T)
  overload: Danmokou.DMath.Functions.ExMTesting.MulTest*
  nameWithType.vb: ExMTesting.MulTest(Of T)(TEx(Of T), TEx(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Danmokou.DMath.Functions.ExMTesting.MulTest(Of T)(TEx(Of T), TEx(Of T))
  name.vb: MulTest(Of T)(TEx(Of T), TEx(Of T))
references:
- uid: Danmokou.DMath.Functions
  commentId: N:Danmokou.DMath.Functions
  name: Danmokou.DMath.Functions
  nameWithType: Danmokou.DMath.Functions
  fullName: Danmokou.DMath.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.DMath.Functions.ExMTesting.TestLookup2*
  commentId: Overload:Danmokou.DMath.Functions.ExMTesting.TestLookup2
  name: TestLookup2
  nameWithType: ExMTesting.TestLookup2
  fullName: Danmokou.DMath.Functions.ExMTesting.TestLookup2
- uid: System.Func{TEx{{T}},TEx{{T}},TEx{{T}}}
  commentId: T:System.Func{TEx{``0},TEx{``0},TEx{``0}}
  parent: System
  definition: System.Func`3
  name: Func<TEx<T>, TEx<T>, TEx<T>>
  nameWithType: Func<TEx<T>, TEx<T>, TEx<T>>
  fullName: System.Func<TEx<T>, TEx<T>, TEx<T>>
  nameWithType.vb: Func(Of TEx(Of T), TEx(Of T), TEx(Of T))
  fullName.vb: System.Func(Of TEx(Of T), TEx(Of T), TEx(Of T))
  name.vb: Func(Of TEx(Of T), TEx(Of T), TEx(Of T))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TEx{{T}}
  commentId: '!:TEx{``0}'
  definition: TEx`1
  name: TEx<T>
  nameWithType: TEx<T>
  fullName: TEx<T>
  nameWithType.vb: TEx(Of T)
  fullName.vb: TEx(Of T)
  name.vb: TEx(Of T)
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TEx`1
  isExternal: true
  name: TEx<>
  nameWithType: TEx<>
  fullName: TEx<>
  nameWithType.vb: TEx(Of )
  fullName.vb: TEx(Of )
  name.vb: TEx(Of )
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExMTesting.TestLookup1*
  commentId: Overload:Danmokou.DMath.Functions.ExMTesting.TestLookup1
  name: TestLookup1
  nameWithType: ExMTesting.TestLookup1
  fullName: Danmokou.DMath.Functions.ExMTesting.TestLookup1
- uid: TEx{System.Func{{T},{T}}}
  commentId: '!:TEx{System.Func{``0,``0}}'
  definition: TEx`1
  name: TEx<Func<T, T>>
  nameWithType: TEx<Func<T, T>>
  fullName: TEx<System.Func<T, T>>
  nameWithType.vb: TEx(Of Func(Of T, T))
  fullName.vb: TEx(Of System.Func(Of T, T))
  name.vb: TEx(Of Func(Of T, T))
  spec.csharp:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TEx`1
    name: TEx
    nameWithType: TEx
    fullName: TEx
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.DMath.Functions.ExMTesting.AddTest*
  commentId: Overload:Danmokou.DMath.Functions.ExMTesting.AddTest
  name: AddTest
  nameWithType: ExMTesting.AddTest
  fullName: Danmokou.DMath.Functions.ExMTesting.AddTest
- uid: Danmokou.DMath.Functions.ExMTesting.MulTest*
  commentId: Overload:Danmokou.DMath.Functions.ExMTesting.MulTest
  name: MulTest
  nameWithType: ExMTesting.MulTest
  fullName: Danmokou.DMath.Functions.ExMTesting.MulTest
