### YamlMime:ManagedReference
items:
- uid: Danmokou.SM.PhaseSM
  commentId: T:Danmokou.SM.PhaseSM
  id: PhaseSM
  parent: Danmokou.SM
  children:
  - Danmokou.SM.PhaseSM.#ctor(List{Danmokou.SM.StateMachine},Danmokou.SM.PhaseProperties,System.Single)
  - Danmokou.SM.PhaseSM.MakeContext(Danmokou.SM.PatternContext)
  - Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext,System.Nullable{IBackgroundOrchestrator})
  - Danmokou.SM.PhaseSM.props
  - Danmokou.SM.PhaseSM.Start(Danmokou.SM.PhaseContext,Danmokou.SM.SMHandoff,System.Nullable{IUIManager},IReadOnlyList{Enemy},System.Action{System.Nullable{IBackgroundOrchestrator}})
  - Danmokou.SM.PhaseSM.Start(Danmokou.SM.SMHandoff)
  langs:
  - csharp
  - vb
  name: PhaseSM
  nameWithType: PhaseSM
  fullName: Danmokou.SM.PhaseSM
  type: Class
  source:
    id: PhaseSM
    path: ''
    startLine: 12825
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\n`phase`: A high-level SM that controls a &quot;phase&quot;, which is a sequence of SMs that may run for variable time\nunder various ending conditions.\n<br />Phases are the basic unit for implementing cards or similar concepts.\n<br />Phases also generally share some state due to data hoisting, events, etc. If you use the `type` property to declare a card type, or you use the `clear` property, then this state and all bullets will be cleared on phase end.\n"
  example: []
  syntax:
    content: 'public class PhaseSM : SequentialSM'
    content.vb: >-
      Public Class PhaseSM
          Inherits SequentialSM
  inheritance:
  - System.Object
  - Danmokou.SM.StateMachine
  - Danmokou.SM.SequentialSM
  derivedClasses:
  - Danmokou.SM.DialoguePhaseSM
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Danmokou.SM.PhaseSM.props
  commentId: F:Danmokou.SM.PhaseSM.props
  id: props
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: props
  nameWithType: PhaseSM.props
  fullName: Danmokou.SM.PhaseSM.props
  type: Field
  source:
    id: props
    path: ''
    startLine: 12839
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public readonly PhaseProperties props
    return:
      type: Danmokou.SM.PhaseProperties
    content.vb: Public ReadOnly props As PhaseProperties
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Danmokou.SM.PhaseSM.MakeContext(Danmokou.SM.PatternContext)
  commentId: M:Danmokou.SM.PhaseSM.MakeContext(Danmokou.SM.PatternContext)
  id: MakeContext(Danmokou.SM.PatternContext)
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: MakeContext(PatternContext)
  nameWithType: PhaseSM.MakeContext(PatternContext)
  fullName: Danmokou.SM.PhaseSM.MakeContext(Danmokou.SM.PatternContext)
  type: Method
  source:
    id: MakeContext
    path: ''
    startLine: 12841
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public PhaseContext MakeContext(PatternContext parent)
    parameters:
    - id: parent
      type: Danmokou.SM.PatternContext
    return:
      type: Danmokou.SM.PhaseContext
    content.vb: Public Function MakeContext(parent As PatternContext) As PhaseContext
  overload: Danmokou.SM.PhaseSM.MakeContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Danmokou.SM.PhaseSM.#ctor(List{Danmokou.SM.StateMachine},Danmokou.SM.PhaseProperties,System.Single)
  commentId: M:Danmokou.SM.PhaseSM.#ctor(List{Danmokou.SM.StateMachine},Danmokou.SM.PhaseProperties,System.Single)
  id: '#ctor(List{Danmokou.SM.StateMachine},Danmokou.SM.PhaseProperties,System.Single)'
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: PhaseSM(List<StateMachine>, PhaseProperties, Single)
  nameWithType: PhaseSM.PhaseSM(List<StateMachine>, PhaseProperties, Single)
  fullName: Danmokou.SM.PhaseSM.PhaseSM(List<Danmokou.SM.StateMachine>, Danmokou.SM.PhaseProperties, System.Single)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 12849
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\n"
  example: []
  syntax:
    content: public PhaseSM(List<StateMachine> states, PhaseProperties props, float timeout)
    parameters:
    - id: states
      type: List{Danmokou.SM.StateMachine}
      description: Substates, run sequentially
    - id: props
      type: Danmokou.SM.PhaseProperties
      description: Properties describing miscellaneous features of this phase
    - id: timeout
      type: System.Single
      description: Timeout in seconds before the phase automatically ends. Set to zero for no timeout
    content.vb: Public Sub New(states As List(Of StateMachine), props As PhaseProperties, timeout As Single)
  overload: Danmokou.SM.PhaseSM.#ctor*
  nameWithType.vb: PhaseSM.PhaseSM(List(Of StateMachine), PhaseProperties, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.SM.PhaseSM.PhaseSM(List(Of Danmokou.SM.StateMachine), Danmokou.SM.PhaseProperties, System.Single)
  name.vb: PhaseSM(List(Of StateMachine), PhaseProperties, Single)
- uid: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext,System.Nullable{IBackgroundOrchestrator})
  commentId: M:Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext,System.Nullable{IBackgroundOrchestrator})
  id: PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext,System.Nullable{IBackgroundOrchestrator})
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: PrePrepareBackgroundGraphics(PhaseContext, Nullable<IBackgroundOrchestrator>)
  nameWithType: PhaseSM.PrePrepareBackgroundGraphics(PhaseContext, Nullable<IBackgroundOrchestrator>)
  fullName: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext, System.Nullable<IBackgroundOrchestrator>)
  type: Method
  source:
    id: PrePrepareBackgroundGraphics
    path: ''
    startLine: 12881
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  summary: "\nTry to prepare background graphics separately from the standard preparation process.\nThis function can be called while the previous phase is still executing (eg. during post-phase cull time).\n<br />Note that this can result in the background being set twice (once here and once in PreparePhase),\n but BackgroundOrchestrator will make the second set a noop.\n"
  example: []
  syntax:
    content: public void PrePrepareBackgroundGraphics(PhaseContext ctx, IBackgroundOrchestrator? bgo)
    parameters:
    - id: ctx
      type: Danmokou.SM.PhaseContext
    - id: bgo
      type: System.Nullable{IBackgroundOrchestrator}
    content.vb: Public Sub PrePrepareBackgroundGraphics(ctx As PhaseContext, bgo As IBackgroundOrchestrator?)
  overload: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics*
  nameWithType.vb: PhaseSM.PrePrepareBackgroundGraphics(PhaseContext, Nullable(Of IBackgroundOrchestrator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics(Danmokou.SM.PhaseContext, System.Nullable(Of IBackgroundOrchestrator))
  name.vb: PrePrepareBackgroundGraphics(PhaseContext, Nullable(Of IBackgroundOrchestrator))
- uid: Danmokou.SM.PhaseSM.Start(Danmokou.SM.SMHandoff)
  commentId: M:Danmokou.SM.PhaseSM.Start(Danmokou.SM.SMHandoff)
  id: Start(Danmokou.SM.SMHandoff)
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: Start(SMHandoff)
  nameWithType: PhaseSM.Start(SMHandoff)
  fullName: Danmokou.SM.PhaseSM.Start(Danmokou.SM.SMHandoff)
  type: Method
  source:
    id: Start
    path: ''
    startLine: 12961
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public override Task Start(SMHandoff smh)
    parameters:
    - id: smh
      type: Danmokou.SM.SMHandoff
    return:
      type: Task
    content.vb: Public Overrides Function Start(smh As SMHandoff) As Task
  overridden: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  overload: Danmokou.SM.PhaseSM.Start*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Danmokou.SM.PhaseSM.Start(Danmokou.SM.PhaseContext,Danmokou.SM.SMHandoff,System.Nullable{IUIManager},IReadOnlyList{Enemy},System.Action{System.Nullable{IBackgroundOrchestrator}})
  commentId: M:Danmokou.SM.PhaseSM.Start(Danmokou.SM.PhaseContext,Danmokou.SM.SMHandoff,System.Nullable{IUIManager},IReadOnlyList{Enemy},System.Action{System.Nullable{IBackgroundOrchestrator}})
  id: Start(Danmokou.SM.PhaseContext,Danmokou.SM.SMHandoff,System.Nullable{IUIManager},IReadOnlyList{Enemy},System.Action{System.Nullable{IBackgroundOrchestrator}})
  parent: Danmokou.SM.PhaseSM
  langs:
  - csharp
  - vb
  name: Start(PhaseContext, SMHandoff, Nullable<IUIManager>, IReadOnlyList<Enemy>, Action<Nullable<IBackgroundOrchestrator>>)
  nameWithType: PhaseSM.Start(PhaseContext, SMHandoff, Nullable<IUIManager>, IReadOnlyList<Enemy>, Action<Nullable<IBackgroundOrchestrator>>)
  fullName: Danmokou.SM.PhaseSM.Start(Danmokou.SM.PhaseContext, Danmokou.SM.SMHandoff, System.Nullable<IUIManager>, IReadOnlyList<Enemy>, System.Action<System.Nullable<IBackgroundOrchestrator>>)
  type: Method
  source:
    id: Start
    path: ''
    startLine: 12962
  assemblies:
  - cs.temp.dll
  namespace: Danmokou.SM
  syntax:
    content: public async Task Start(PhaseContext ctx, SMHandoff smh, IUIManager? ui, IReadOnlyList<Enemy> subbosses, Action<IBackgroundOrchestrator?> prePrepareNextPhase = null)
    parameters:
    - id: ctx
      type: Danmokou.SM.PhaseContext
    - id: smh
      type: Danmokou.SM.SMHandoff
    - id: ui
      type: System.Nullable{IUIManager}
    - id: subbosses
      type: IReadOnlyList{Enemy}
    - id: prePrepareNextPhase
      type: System.Action{System.Nullable{IBackgroundOrchestrator}}
    return:
      type: Task
    content.vb: Public Function Start(ctx As PhaseContext, smh As SMHandoff, ui As IUIManager?, subbosses As IReadOnlyList(Of Enemy), prePrepareNextPhase As Action(Of IBackgroundOrchestrator?) = Nothing) As Task
  overload: Danmokou.SM.PhaseSM.Start*
  nameWithType.vb: PhaseSM.Start(PhaseContext, SMHandoff, Nullable(Of IUIManager), IReadOnlyList(Of Enemy), Action(Of Nullable(Of IBackgroundOrchestrator)))
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: Danmokou.SM.PhaseSM.Start(Danmokou.SM.PhaseContext, Danmokou.SM.SMHandoff, System.Nullable(Of IUIManager), IReadOnlyList(Of Enemy), System.Action(Of System.Nullable(Of IBackgroundOrchestrator)))
  name.vb: Start(PhaseContext, SMHandoff, Nullable(Of IUIManager), IReadOnlyList(Of Enemy), Action(Of Nullable(Of IBackgroundOrchestrator)))
references:
- uid: Danmokou.SM
  commentId: N:Danmokou.SM
  name: Danmokou.SM
  nameWithType: Danmokou.SM
  fullName: Danmokou.SM
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Danmokou.SM.StateMachine
  commentId: T:Danmokou.SM.StateMachine
  parent: Danmokou.SM
  name: StateMachine
  nameWithType: StateMachine
  fullName: Danmokou.SM.StateMachine
- uid: Danmokou.SM.SequentialSM
  commentId: T:Danmokou.SM.SequentialSM
  parent: Danmokou.SM
  name: SequentialSM
  nameWithType: SequentialSM
  fullName: Danmokou.SM.SequentialSM
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Danmokou.SM.PhaseProperties
  commentId: T:Danmokou.SM.PhaseProperties
  parent: Danmokou.SM
  name: PhaseProperties
  nameWithType: PhaseProperties
  fullName: Danmokou.SM.PhaseProperties
- uid: Danmokou.SM.PhaseSM.MakeContext*
  commentId: Overload:Danmokou.SM.PhaseSM.MakeContext
  name: MakeContext
  nameWithType: PhaseSM.MakeContext
  fullName: Danmokou.SM.PhaseSM.MakeContext
- uid: Danmokou.SM.PatternContext
  commentId: T:Danmokou.SM.PatternContext
  parent: Danmokou.SM
  name: PatternContext
  nameWithType: PatternContext
  fullName: Danmokou.SM.PatternContext
- uid: Danmokou.SM.PhaseContext
  commentId: T:Danmokou.SM.PhaseContext
  parent: Danmokou.SM
  name: PhaseContext
  nameWithType: PhaseContext
  fullName: Danmokou.SM.PhaseContext
- uid: Danmokou.SM.PhaseSM.#ctor*
  commentId: Overload:Danmokou.SM.PhaseSM.#ctor
  name: PhaseSM
  nameWithType: PhaseSM.PhaseSM
  fullName: Danmokou.SM.PhaseSM.PhaseSM
- uid: List{Danmokou.SM.StateMachine}
  commentId: '!:List{Danmokou.SM.StateMachine}'
  definition: List`1
  name: List<StateMachine>
  nameWithType: List<StateMachine>
  fullName: List<Danmokou.SM.StateMachine>
  nameWithType.vb: List(Of StateMachine)
  fullName.vb: List(Of Danmokou.SM.StateMachine)
  name.vb: List(Of StateMachine)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Danmokou.SM.StateMachine
    name: StateMachine
    nameWithType: StateMachine
    fullName: Danmokou.SM.StateMachine
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics*
  commentId: Overload:Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics
  name: PrePrepareBackgroundGraphics
  nameWithType: PhaseSM.PrePrepareBackgroundGraphics
  fullName: Danmokou.SM.PhaseSM.PrePrepareBackgroundGraphics
- uid: System.Nullable{IBackgroundOrchestrator}
  commentId: T:System.Nullable{IBackgroundOrchestrator}
  parent: System
  definition: System.Nullable`1
  name: Nullable<IBackgroundOrchestrator>
  nameWithType: Nullable<IBackgroundOrchestrator>
  fullName: System.Nullable<IBackgroundOrchestrator>
  nameWithType.vb: Nullable(Of IBackgroundOrchestrator)
  fullName.vb: System.Nullable(Of IBackgroundOrchestrator)
  name.vb: Nullable(Of IBackgroundOrchestrator)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IBackgroundOrchestrator
    name: IBackgroundOrchestrator
    nameWithType: IBackgroundOrchestrator
    fullName: IBackgroundOrchestrator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IBackgroundOrchestrator
    name: IBackgroundOrchestrator
    nameWithType: IBackgroundOrchestrator
    fullName: IBackgroundOrchestrator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  commentId: M:Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  parent: Danmokou.SM.SequentialSM
  name: Start(SMHandoff)
  nameWithType: SequentialSM.Start(SMHandoff)
  fullName: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
  spec.csharp:
  - uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
    name: Start
    nameWithType: SequentialSM.Start
    fullName: Danmokou.SM.SequentialSM.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.SM.SMHandoff
    name: SMHandoff
    nameWithType: SMHandoff
    fullName: Danmokou.SM.SMHandoff
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Danmokou.SM.SequentialSM.Start(Danmokou.SM.SMHandoff)
    name: Start
    nameWithType: SequentialSM.Start
    fullName: Danmokou.SM.SequentialSM.Start
  - name: (
    nameWithType: (
    fullName: (
  - uid: Danmokou.SM.SMHandoff
    name: SMHandoff
    nameWithType: SMHandoff
    fullName: Danmokou.SM.SMHandoff
  - name: )
    nameWithType: )
    fullName: )
- uid: Danmokou.SM.PhaseSM.Start*
  commentId: Overload:Danmokou.SM.PhaseSM.Start
  name: Start
  nameWithType: PhaseSM.Start
  fullName: Danmokou.SM.PhaseSM.Start
- uid: Danmokou.SM.SMHandoff
  commentId: T:Danmokou.SM.SMHandoff
  parent: Danmokou.SM
  name: SMHandoff
  nameWithType: SMHandoff
  fullName: Danmokou.SM.SMHandoff
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: System.Nullable{IUIManager}
  commentId: T:System.Nullable{IUIManager}
  parent: System
  definition: System.Nullable`1
  name: Nullable<IUIManager>
  nameWithType: Nullable<IUIManager>
  fullName: System.Nullable<IUIManager>
  nameWithType.vb: Nullable(Of IUIManager)
  fullName.vb: System.Nullable(Of IUIManager)
  name.vb: Nullable(Of IUIManager)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IUIManager
    name: IUIManager
    nameWithType: IUIManager
    fullName: IUIManager
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IUIManager
    name: IUIManager
    nameWithType: IUIManager
    fullName: IUIManager
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{Enemy}
  commentId: '!:IReadOnlyList{Enemy}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Enemy>
  nameWithType: IReadOnlyList<Enemy>
  fullName: IReadOnlyList<Enemy>
  nameWithType.vb: IReadOnlyList(Of Enemy)
  fullName.vb: IReadOnlyList(Of Enemy)
  name.vb: IReadOnlyList(Of Enemy)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Enemy
    name: Enemy
    nameWithType: Enemy
    fullName: Enemy
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Enemy
    name: Enemy
    nameWithType: Enemy
    fullName: Enemy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Nullable{IBackgroundOrchestrator}}
  commentId: T:System.Action{System.Nullable{IBackgroundOrchestrator}}
  parent: System
  definition: System.Action`1
  name: Action<Nullable<IBackgroundOrchestrator>>
  nameWithType: Action<Nullable<IBackgroundOrchestrator>>
  fullName: System.Action<System.Nullable<IBackgroundOrchestrator>>
  nameWithType.vb: Action(Of Nullable(Of IBackgroundOrchestrator))
  fullName.vb: System.Action(Of System.Nullable(Of IBackgroundOrchestrator))
  name.vb: Action(Of Nullable(Of IBackgroundOrchestrator))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IBackgroundOrchestrator
    name: IBackgroundOrchestrator
    nameWithType: IBackgroundOrchestrator
    fullName: IBackgroundOrchestrator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IBackgroundOrchestrator
    name: IBackgroundOrchestrator
    nameWithType: IBackgroundOrchestrator
    fullName: IBackgroundOrchestrator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  commentId: '!:IReadOnlyList`1'
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
